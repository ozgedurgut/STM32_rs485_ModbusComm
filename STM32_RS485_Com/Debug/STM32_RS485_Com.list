
STM32_RS485_Com.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000538c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080054a0  080054a0  000154a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005540  08005540  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005540  08005540  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005540  08005540  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005540  08005540  00015540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005544  08005544  00015544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000070  080055b8  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  080055b8  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000081a5  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019ed  00000000  00000000  0002823e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  00029c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000818  00000000  00000000  0002a4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000177b8  00000000  00000000  0002ad08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ba9  00000000  00000000  000424c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084a64  00000000  00000000  0004c069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0acd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c64  00000000  00000000  000d0b20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08005484 	.word	0x08005484

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08005484 	.word	0x08005484

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__gesf2>:
 8000c40:	f04f 3cff 	mov.w	ip, #4294967295
 8000c44:	e006      	b.n	8000c54 <__cmpsf2+0x4>
 8000c46:	bf00      	nop

08000c48 <__lesf2>:
 8000c48:	f04f 0c01 	mov.w	ip, #1
 8000c4c:	e002      	b.n	8000c54 <__cmpsf2+0x4>
 8000c4e:	bf00      	nop

08000c50 <__cmpsf2>:
 8000c50:	f04f 0c01 	mov.w	ip, #1
 8000c54:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c58:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c64:	bf18      	it	ne
 8000c66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6a:	d011      	beq.n	8000c90 <__cmpsf2+0x40>
 8000c6c:	b001      	add	sp, #4
 8000c6e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c72:	bf18      	it	ne
 8000c74:	ea90 0f01 	teqne	r0, r1
 8000c78:	bf58      	it	pl
 8000c7a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c7e:	bf88      	it	hi
 8000c80:	17c8      	asrhi	r0, r1, #31
 8000c82:	bf38      	it	cc
 8000c84:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c88:	bf18      	it	ne
 8000c8a:	f040 0001 	orrne.w	r0, r0, #1
 8000c8e:	4770      	bx	lr
 8000c90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c94:	d102      	bne.n	8000c9c <__cmpsf2+0x4c>
 8000c96:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c9a:	d105      	bne.n	8000ca8 <__cmpsf2+0x58>
 8000c9c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ca0:	d1e4      	bne.n	8000c6c <__cmpsf2+0x1c>
 8000ca2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ca6:	d0e1      	beq.n	8000c6c <__cmpsf2+0x1c>
 8000ca8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <__aeabi_cfrcmple>:
 8000cb0:	4684      	mov	ip, r0
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	4661      	mov	r1, ip
 8000cb6:	e7ff      	b.n	8000cb8 <__aeabi_cfcmpeq>

08000cb8 <__aeabi_cfcmpeq>:
 8000cb8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000cba:	f7ff ffc9 	bl	8000c50 <__cmpsf2>
 8000cbe:	2800      	cmp	r0, #0
 8000cc0:	bf48      	it	mi
 8000cc2:	f110 0f00 	cmnmi.w	r0, #0
 8000cc6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000cc8 <__aeabi_fcmpeq>:
 8000cc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ccc:	f7ff fff4 	bl	8000cb8 <__aeabi_cfcmpeq>
 8000cd0:	bf0c      	ite	eq
 8000cd2:	2001      	moveq	r0, #1
 8000cd4:	2000      	movne	r0, #0
 8000cd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cda:	bf00      	nop

08000cdc <__aeabi_fcmplt>:
 8000cdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ce0:	f7ff ffea 	bl	8000cb8 <__aeabi_cfcmpeq>
 8000ce4:	bf34      	ite	cc
 8000ce6:	2001      	movcc	r0, #1
 8000ce8:	2000      	movcs	r0, #0
 8000cea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cee:	bf00      	nop

08000cf0 <__aeabi_fcmple>:
 8000cf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cf4:	f7ff ffe0 	bl	8000cb8 <__aeabi_cfcmpeq>
 8000cf8:	bf94      	ite	ls
 8000cfa:	2001      	movls	r0, #1
 8000cfc:	2000      	movhi	r0, #0
 8000cfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d02:	bf00      	nop

08000d04 <__aeabi_fcmpge>:
 8000d04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d08:	f7ff ffd2 	bl	8000cb0 <__aeabi_cfrcmple>
 8000d0c:	bf94      	ite	ls
 8000d0e:	2001      	movls	r0, #1
 8000d10:	2000      	movhi	r0, #0
 8000d12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d16:	bf00      	nop

08000d18 <__aeabi_fcmpgt>:
 8000d18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d1c:	f7ff ffc8 	bl	8000cb0 <__aeabi_cfrcmple>
 8000d20:	bf34      	ite	cc
 8000d22:	2001      	movcc	r0, #1
 8000d24:	2000      	movcs	r0, #0
 8000d26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d2a:	bf00      	nop

08000d2c <__aeabi_f2uiz>:
 8000d2c:	0042      	lsls	r2, r0, #1
 8000d2e:	d20e      	bcs.n	8000d4e <__aeabi_f2uiz+0x22>
 8000d30:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d34:	d30b      	bcc.n	8000d4e <__aeabi_f2uiz+0x22>
 8000d36:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d3a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d3e:	d409      	bmi.n	8000d54 <__aeabi_f2uiz+0x28>
 8000d40:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d48:	fa23 f002 	lsr.w	r0, r3, r2
 8000d4c:	4770      	bx	lr
 8000d4e:	f04f 0000 	mov.w	r0, #0
 8000d52:	4770      	bx	lr
 8000d54:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d58:	d101      	bne.n	8000d5e <__aeabi_f2uiz+0x32>
 8000d5a:	0242      	lsls	r2, r0, #9
 8000d5c:	d102      	bne.n	8000d64 <__aeabi_f2uiz+0x38>
 8000d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d62:	4770      	bx	lr
 8000d64:	f04f 0000 	mov.w	r0, #0
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop

08000d6c <MAX31865_Init>:
//P.S. Максимальная скорость spi 5 МГц.
//Также обратите внимание, что Clock Polarity(CLPOL) = Low. Clock Phase(CPHA) = 2 Edge.
/*-------------------------------------------Для работы по spi-----------------------------------------------*/

/*=======================ИНИЦИАЛИЗАЦИЯ МОДУЛЯ MAX31865=========================*/
void MAX31865_Init(uint8_t num_wires) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
	///Не вижу особого смысла выводить полную настройку модуля, поэтому сделаем
	///небольшое упрощение для конечного пользователя
	///все, что может настроить пользователь - это выбрать тип подключения
	///2,3 или 4 проводное
	/// \param num_wires - тип подключения датчика 2,3 или 4 проводное
	uint8_t MAX31865_Reinitialization_cnt = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	73fb      	strb	r3, [r7, #15]
	MAX31865_Sensor_Error = 0;
 8000d7a:	4b23      	ldr	r3, [pc, #140]	; (8000e08 <MAX31865_Init+0x9c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
	uint8_t MAX31865_Configuration_register_write[] = { 0x80, 0x00 };
 8000d80:	2380      	movs	r3, #128	; 0x80
 8000d82:	81bb      	strh	r3, [r7, #12]
	if (num_wires == 2 || num_wires == 4) {
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d002      	beq.n	8000d90 <MAX31865_Init+0x24>
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	2b04      	cmp	r3, #4
 8000d8e:	d102      	bne.n	8000d96 <MAX31865_Init+0x2a>
		MAX31865_Configuration_register_write[1] = 0xC3; //0xC3
 8000d90:	23c3      	movs	r3, #195	; 0xc3
 8000d92:	737b      	strb	r3, [r7, #13]
 8000d94:	e004      	b.n	8000da0 <MAX31865_Init+0x34>
	} else if (num_wires == 3) {
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	2b03      	cmp	r3, #3
 8000d9a:	d101      	bne.n	8000da0 <MAX31865_Init+0x34>
		MAX31865_Configuration_register_write[1] = 0xD3; //0xD3
 8000d9c:	23d3      	movs	r3, #211	; 0xd3
 8000d9e:	737b      	strb	r3, [r7, #13]
	}
	cs_set();
 8000da0:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <MAX31865_Init+0xa0>)
 8000da2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000da6:	611a      	str	r2, [r3, #16]
	HAL_SPI_Transmit(&hspi1, MAX31865_Configuration_register_write, 2, 100);
 8000da8:	f107 010c 	add.w	r1, r7, #12
 8000dac:	2364      	movs	r3, #100	; 0x64
 8000dae:	2202      	movs	r2, #2
 8000db0:	4817      	ldr	r0, [pc, #92]	; (8000e10 <MAX31865_Init+0xa4>)
 8000db2:	f001 fd79 	bl	80028a8 <HAL_SPI_Transmit>
	cs_reset();
 8000db6:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <MAX31865_Init+0xa0>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	611a      	str	r2, [r3, #16]
	//Дабы достучаться до датчика после подачи питания, т.к. с первого раза инициализация может и не пройти, заведем цикл.
	while (MAX31865_Configuration_info() != 0xD1 && MAX31865_Configuration_info() != 0xC1) {
 8000dbc:	e013      	b.n	8000de6 <MAX31865_Init+0x7a>
		MAX31865_Reinitialization_cnt++;
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	73fb      	strb	r3, [r7, #15]

		cs_set();
 8000dc4:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <MAX31865_Init+0xa0>)
 8000dc6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dca:	611a      	str	r2, [r3, #16]
		HAL_SPI_Transmit(&hspi1, MAX31865_Configuration_register_write, 2, 100);
 8000dcc:	f107 010c 	add.w	r1, r7, #12
 8000dd0:	2364      	movs	r3, #100	; 0x64
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	480e      	ldr	r0, [pc, #56]	; (8000e10 <MAX31865_Init+0xa4>)
 8000dd6:	f001 fd67 	bl	80028a8 <HAL_SPI_Transmit>
		cs_reset();
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <MAX31865_Init+0xa0>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	611a      	str	r2, [r3, #16]

		if (MAX31865_Reinitialization_cnt == 100) {
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	2b64      	cmp	r3, #100	; 0x64
 8000de4:	d00a      	beq.n	8000dfc <MAX31865_Init+0x90>
	while (MAX31865_Configuration_info() != 0xD1 && MAX31865_Configuration_info() != 0xC1) {
 8000de6:	f000 f815 	bl	8000e14 <MAX31865_Configuration_info>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2bd1      	cmp	r3, #209	; 0xd1
 8000dee:	d006      	beq.n	8000dfe <MAX31865_Init+0x92>
 8000df0:	f000 f810 	bl	8000e14 <MAX31865_Configuration_info>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2bc1      	cmp	r3, #193	; 0xc1
 8000df8:	d1e1      	bne.n	8000dbe <MAX31865_Init+0x52>
			break;
		}

	}

}
 8000dfa:	e000      	b.n	8000dfe <MAX31865_Init+0x92>
			break;
 8000dfc:	bf00      	nop
}
 8000dfe:	bf00      	nop
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000098 	.word	0x20000098
 8000e0c:	40010800 	.word	0x40010800
 8000e10:	200000b4 	.word	0x200000b4

08000e14 <MAX31865_Configuration_info>:
/*=======================ИНИЦИАЛИЗАЦИЯ МОДУЛЯ MAX31865=========================*/

/*====================ИНФОРМАЦИЯ О НАСТРОЙКЕ МОДУЛЯ MAX31865===================*/
uint8_t MAX31865_Configuration_info(void) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
	///Функция получения информации о конфигурации модуля MAX31865
	///Возвращает значение конфигурации.
	///Не удивляйтесь, если отправите при инициализации 0xC3, а получите 0xC1
	///(см. datasheet MAX31865 стр.14 "The fault status clear bit D1, self-clears to 0.")
	uint8_t read_data = 0x00;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	71fb      	strb	r3, [r7, #7]
	uint8_t MAX31865_Configuration = 0x00;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	71bb      	strb	r3, [r7, #6]
	cs_set();
 8000e22:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <MAX31865_Configuration_info+0x40>)
 8000e24:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e28:	611a      	str	r2, [r3, #16]
	HAL_SPI_Transmit(&hspi1, &read_data, 1, 100);
 8000e2a:	1df9      	adds	r1, r7, #7
 8000e2c:	2364      	movs	r3, #100	; 0x64
 8000e2e:	2201      	movs	r2, #1
 8000e30:	4809      	ldr	r0, [pc, #36]	; (8000e58 <MAX31865_Configuration_info+0x44>)
 8000e32:	f001 fd39 	bl	80028a8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &MAX31865_Configuration, 1, 100);
 8000e36:	1db9      	adds	r1, r7, #6
 8000e38:	2364      	movs	r3, #100	; 0x64
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	4806      	ldr	r0, [pc, #24]	; (8000e58 <MAX31865_Configuration_info+0x44>)
 8000e3e:	f001 fe6f 	bl	8002b20 <HAL_SPI_Receive>
	cs_reset();
 8000e42:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <MAX31865_Configuration_info+0x40>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	611a      	str	r2, [r3, #16]
	return MAX31865_Configuration;
 8000e48:	79bb      	ldrb	r3, [r7, #6]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40010800 	.word	0x40010800
 8000e58:	200000b4 	.word	0x200000b4
 8000e5c:	00000000 	.word	0x00000000

08000e60 <MAX31865_Get_Temperature>:
/*====================ИНФОРМАЦИЯ О НАСТРОЙКЕ МОДУЛЯ MAX31865===================*/

/*===================ОСНОВНАЯ ФУНКЦИЯ РАБОТЫ С МОДУЛЕМ MAX31865==================*/
double MAX31865_Get_Temperature(void) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
		uint8_t Fault_Status; //Статус неисправности
	};

	struct rx_data_MAX31865 MAX31865_receieve_data;

	uint8_t MAX31865_start_address_of_the_poll = 0x01; //Адрес регистра, с которого начнем чтение данных
 8000e66:	2301      	movs	r3, #1
 8000e68:	71fb      	strb	r3, [r7, #7]
	uint8_t MAX31865_rx_buffer[7]; //буфер, куда будем складывать приходящие данные
	cs_set();
 8000e6a:	4b2f      	ldr	r3, [pc, #188]	; (8000f28 <MAX31865_Get_Temperature+0xc8>)
 8000e6c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e70:	611a      	str	r2, [r3, #16]
	HAL_SPI_Transmit(&hspi1, &MAX31865_start_address_of_the_poll, 1, 100);
 8000e72:	1df9      	adds	r1, r7, #7
 8000e74:	2364      	movs	r3, #100	; 0x64
 8000e76:	2201      	movs	r2, #1
 8000e78:	482c      	ldr	r0, [pc, #176]	; (8000f2c <MAX31865_Get_Temperature+0xcc>)
 8000e7a:	f001 fd15 	bl	80028a8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, MAX31865_rx_buffer, 7, 100);
 8000e7e:	4639      	mov	r1, r7
 8000e80:	2364      	movs	r3, #100	; 0x64
 8000e82:	2207      	movs	r2, #7
 8000e84:	4829      	ldr	r0, [pc, #164]	; (8000f2c <MAX31865_Get_Temperature+0xcc>)
 8000e86:	f001 fe4b 	bl	8002b20 <HAL_SPI_Receive>
	cs_reset();
 8000e8a:	4b27      	ldr	r3, [pc, #156]	; (8000f28 <MAX31865_Get_Temperature+0xc8>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	611a      	str	r2, [r3, #16]
	MAX31865_receieve_data.RTD_Resistance_Registers = ((MAX31865_rx_buffer[0] << 8) | MAX31865_rx_buffer[1]) >> 1; //Данные регистров сопротивления
 8000e90:	783b      	ldrb	r3, [r7, #0]
 8000e92:	021b      	lsls	r3, r3, #8
 8000e94:	787a      	ldrb	r2, [r7, #1]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	105b      	asrs	r3, r3, #1
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	813b      	strh	r3, [r7, #8]
	MAX31865_receieve_data.High_Fault_Threshold = ((MAX31865_rx_buffer[2] << 8) | MAX31865_rx_buffer[3]) >> 1; //Данные верхнего порого неисправности
 8000e9e:	78bb      	ldrb	r3, [r7, #2]
 8000ea0:	021b      	lsls	r3, r3, #8
 8000ea2:	78fa      	ldrb	r2, [r7, #3]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	105b      	asrs	r3, r3, #1
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	817b      	strh	r3, [r7, #10]
	MAX31865_receieve_data.Low_Fault_Threshold = (MAX31865_rx_buffer[4] << 8) | MAX31865_rx_buffer[5]; //Данные нижнего порога неисправности
 8000eac:	793b      	ldrb	r3, [r7, #4]
 8000eae:	021b      	lsls	r3, r3, #8
 8000eb0:	b21a      	sxth	r2, r3
 8000eb2:	797b      	ldrb	r3, [r7, #5]
 8000eb4:	b21b      	sxth	r3, r3
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	b21b      	sxth	r3, r3
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	81bb      	strh	r3, [r7, #12]
	MAX31865_receieve_data.Fault_Status = MAX31865_rx_buffer[6]; //Статус неисправности
 8000ebe:	79bb      	ldrb	r3, [r7, #6]
 8000ec0:	73bb      	strb	r3, [r7, #14]
	if (MAX31865_receieve_data.Fault_Status > 0x00) {
 8000ec2:	7bbb      	ldrb	r3, [r7, #14]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d008      	beq.n	8000eda <MAX31865_Get_Temperature+0x7a>

		/*--------------Здесь Ваши действия по реагированию на ошибку датчика---------------*/
		MAX31865_Sensor_Error = 1;
 8000ec8:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <MAX31865_Get_Temperature+0xd0>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	701a      	strb	r2, [r3, #0]
		//printf("Sensor Error!\r\n");

		/*----Автоматический сброс ошибки----*/
		MAX31865_Init(3);
 8000ece:	2003      	movs	r0, #3
 8000ed0:	f7ff ff4c 	bl	8000d6c <MAX31865_Init>
		MAX31865_Sensor_Error = 0;
 8000ed4:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <MAX31865_Get_Temperature+0xd0>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]

	//printf("RTD Resistance Registers = %X\r\n", MAX31865_receieve_data.RTD_Resistance_Registers);
	//printf("Hight Fault Treshold = %X\r\n", MAX31865_receieve_data.High_Fault_Threshold);
	//printf("Low Fault Treshold = %X\r\n", MAX31865_receieve_data.Low_Fault_Threshold);
	//printf("Fault status = %X\r\n", MAX31865_receieve_data.Fault_Status = MAX31865_rx_buffer[6]);
	data = ((double) MAX31865_receieve_data.RTD_Resistance_Registers * MAX31865_Rref ) / (double) 32768.0; // Replace 4000 by 400 for PT100
 8000eda:	893b      	ldrh	r3, [r7, #8]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fb35 	bl	800054c <__aeabi_ui2d>
 8000ee2:	a30f      	add	r3, pc, #60	; (adr r3, 8000f20 <MAX31865_Get_Temperature+0xc0>)
 8000ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee8:	f7ff fbaa 	bl	8000640 <__aeabi_dmul>
 8000eec:	4602      	mov	r2, r0
 8000eee:	460b      	mov	r3, r1
 8000ef0:	4610      	mov	r0, r2
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	f04f 0200 	mov.w	r2, #0
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <MAX31865_Get_Temperature+0xd4>)
 8000efa:	f7ff fccb 	bl	8000894 <__aeabi_ddiv>
 8000efe:	4602      	mov	r2, r0
 8000f00:	460b      	mov	r3, r1
 8000f02:	e9c7 2304 	strd	r2, r3, [r7, #16]
	//printf("Rrtd = %lf\n", data);
	return MAX31865_Get_Temperature_math(data);
 8000f06:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f0a:	f000 f815 	bl	8000f38 <MAX31865_Get_Temperature_math>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	460b      	mov	r3, r1
}
 8000f12:	4610      	mov	r0, r2
 8000f14:	4619      	mov	r1, r3
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	f3af 8000 	nop.w
 8000f20:	00000000 	.word	0x00000000
 8000f24:	407ac800 	.word	0x407ac800
 8000f28:	40010800 	.word	0x40010800
 8000f2c:	200000b4 	.word	0x200000b4
 8000f30:	20000098 	.word	0x20000098
 8000f34:	40e00000 	.word	0x40e00000

08000f38 <MAX31865_Get_Temperature_math>:
/*===================ОСНОВНАЯ ФУНКЦИЯ РАБОТЫ С МОДУЛЕМ MAX31865==================*/

/*===============================================ПРЕОБРАЗОВАНИЕ СОПРОТИВЛЕНИЯ В ТЕМПЕРАТУРУ, СОГЛАСНО ГОСТ 6651-2009===============================================*/
double MAX31865_Get_Temperature_math(double PT100_Resistance) {
 8000f38:	b5b0      	push	{r4, r5, r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	e9c7 0100 	strd	r0, r1, [r7]
	if (PT100_Resistance >= (double) 100.0) {
 8000f42:	f04f 0200 	mov.w	r2, #0
 8000f46:	4b72      	ldr	r3, [pc, #456]	; (8001110 <MAX31865_Get_Temperature_math+0x1d8>)
 8000f48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f4c:	f7ff fdfe 	bl	8000b4c <__aeabi_dcmpge>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d03b      	beq.n	8000fce <MAX31865_Get_Temperature_math+0x96>
		double MAX31865_math_Discriminant = (double) 0.00001527480889 - ((double) -0.00000231 * (1 - (PT100_Resistance / MAX31865_PT100_R0 )));
 8000f56:	f04f 0200 	mov.w	r2, #0
 8000f5a:	4b6d      	ldr	r3, [pc, #436]	; (8001110 <MAX31865_Get_Temperature_math+0x1d8>)
 8000f5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f60:	f7ff fc98 	bl	8000894 <__aeabi_ddiv>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	f04f 0000 	mov.w	r0, #0
 8000f6c:	4969      	ldr	r1, [pc, #420]	; (8001114 <MAX31865_Get_Temperature_math+0x1dc>)
 8000f6e:	f7ff f9af 	bl	80002d0 <__aeabi_dsub>
 8000f72:	4602      	mov	r2, r0
 8000f74:	460b      	mov	r3, r1
 8000f76:	4610      	mov	r0, r2
 8000f78:	4619      	mov	r1, r3
 8000f7a:	a351      	add	r3, pc, #324	; (adr r3, 80010c0 <MAX31865_Get_Temperature_math+0x188>)
 8000f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f80:	f7ff fb5e 	bl	8000640 <__aeabi_dmul>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	4610      	mov	r0, r2
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	a34e      	add	r3, pc, #312	; (adr r3, 80010c8 <MAX31865_Get_Temperature_math+0x190>)
 8000f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f92:	f7ff f99f 	bl	80002d4 <__adddf3>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		MAX31865_PT100_T = ((double) -0.0039083 + sqrt(MAX31865_math_Discriminant)) / (double) -0.000001155;
 8000f9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fa2:	f003 fbd1 	bl	8004748 <sqrt>
 8000fa6:	a34a      	add	r3, pc, #296	; (adr r3, 80010d0 <MAX31865_Get_Temperature_math+0x198>)
 8000fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fac:	f7ff f990 	bl	80002d0 <__aeabi_dsub>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	a347      	add	r3, pc, #284	; (adr r3, 80010d8 <MAX31865_Get_Temperature_math+0x1a0>)
 8000fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbe:	f7ff fc69 	bl	8000894 <__aeabi_ddiv>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4954      	ldr	r1, [pc, #336]	; (8001118 <MAX31865_Get_Temperature_math+0x1e0>)
 8000fc8:	e9c1 2300 	strd	r2, r3, [r1]
 8000fcc:	e06d      	b.n	80010aa <MAX31865_Get_Temperature_math+0x172>
	} else {
		MAX31865_PT100_T = (double) 0.000000000270 * pow(PT100_Resistance, 5) - (double) 0.000000066245 * pow(PT100_Resistance, 4) - (double) 0.000000184636 * pow(PT100_Resistance, 3)
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	4b52      	ldr	r3, [pc, #328]	; (800111c <MAX31865_Get_Temperature_math+0x1e4>)
 8000fd4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fd8:	f003 fb4e 	bl	8004678 <pow>
 8000fdc:	a340      	add	r3, pc, #256	; (adr r3, 80010e0 <MAX31865_Get_Temperature_math+0x1a8>)
 8000fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe2:	f7ff fb2d 	bl	8000640 <__aeabi_dmul>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4614      	mov	r4, r2
 8000fec:	461d      	mov	r5, r3
 8000fee:	f04f 0200 	mov.w	r2, #0
 8000ff2:	4b4b      	ldr	r3, [pc, #300]	; (8001120 <MAX31865_Get_Temperature_math+0x1e8>)
 8000ff4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ff8:	f003 fb3e 	bl	8004678 <pow>
 8000ffc:	a33a      	add	r3, pc, #232	; (adr r3, 80010e8 <MAX31865_Get_Temperature_math+0x1b0>)
 8000ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001002:	f7ff fb1d 	bl	8000640 <__aeabi_dmul>
 8001006:	4602      	mov	r2, r0
 8001008:	460b      	mov	r3, r1
 800100a:	4620      	mov	r0, r4
 800100c:	4629      	mov	r1, r5
 800100e:	f7ff f95f 	bl	80002d0 <__aeabi_dsub>
 8001012:	4602      	mov	r2, r0
 8001014:	460b      	mov	r3, r1
 8001016:	4614      	mov	r4, r2
 8001018:	461d      	mov	r5, r3
 800101a:	f04f 0200 	mov.w	r2, #0
 800101e:	4b41      	ldr	r3, [pc, #260]	; (8001124 <MAX31865_Get_Temperature_math+0x1ec>)
 8001020:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001024:	f003 fb28 	bl	8004678 <pow>
 8001028:	a331      	add	r3, pc, #196	; (adr r3, 80010f0 <MAX31865_Get_Temperature_math+0x1b8>)
 800102a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102e:	f7ff fb07 	bl	8000640 <__aeabi_dmul>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4620      	mov	r0, r4
 8001038:	4629      	mov	r1, r5
 800103a:	f7ff f949 	bl	80002d0 <__aeabi_dsub>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4614      	mov	r4, r2
 8001044:	461d      	mov	r5, r3
				+ (double) 0.002320232987 * pow(PT100_Resistance, 2) + (double) 2.229927824035 * PT100_Resistance - (double) 242.090854986215;
 8001046:	f04f 0200 	mov.w	r2, #0
 800104a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800104e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001052:	f003 fb11 	bl	8004678 <pow>
 8001056:	a328      	add	r3, pc, #160	; (adr r3, 80010f8 <MAX31865_Get_Temperature_math+0x1c0>)
 8001058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105c:	f7ff faf0 	bl	8000640 <__aeabi_dmul>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4620      	mov	r0, r4
 8001066:	4629      	mov	r1, r5
 8001068:	f7ff f934 	bl	80002d4 <__adddf3>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4614      	mov	r4, r2
 8001072:	461d      	mov	r5, r3
 8001074:	a322      	add	r3, pc, #136	; (adr r3, 8001100 <MAX31865_Get_Temperature_math+0x1c8>)
 8001076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800107e:	f7ff fadf 	bl	8000640 <__aeabi_dmul>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4620      	mov	r0, r4
 8001088:	4629      	mov	r1, r5
 800108a:	f7ff f923 	bl	80002d4 <__adddf3>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	4610      	mov	r0, r2
 8001094:	4619      	mov	r1, r3
 8001096:	a31c      	add	r3, pc, #112	; (adr r3, 8001108 <MAX31865_Get_Temperature_math+0x1d0>)
 8001098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109c:	f7ff f918 	bl	80002d0 <__aeabi_dsub>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
		MAX31865_PT100_T = (double) 0.000000000270 * pow(PT100_Resistance, 5) - (double) 0.000000066245 * pow(PT100_Resistance, 4) - (double) 0.000000184636 * pow(PT100_Resistance, 3)
 80010a4:	491c      	ldr	r1, [pc, #112]	; (8001118 <MAX31865_Get_Temperature_math+0x1e0>)
 80010a6:	e9c1 2300 	strd	r2, r3, [r1]
	}
	return MAX31865_PT100_T;
 80010aa:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <MAX31865_Get_Temperature_math+0x1e0>)
 80010ac:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 80010b0:	4610      	mov	r0, r2
 80010b2:	4619      	mov	r1, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bdb0      	pop	{r4, r5, r7, pc}
 80010ba:	bf00      	nop
 80010bc:	f3af 8000 	nop.w
 80010c0:	ee19ce88 	.word	0xee19ce88
 80010c4:	3ec360af 	.word	0x3ec360af
 80010c8:	dfc928d8 	.word	0xdfc928d8
 80010cc:	3ef0044c 	.word	0x3ef0044c
 80010d0:	4aed641c 	.word	0x4aed641c
 80010d4:	3f700226 	.word	0x3f700226
 80010d8:	ee19ce88 	.word	0xee19ce88
 80010dc:	beb360af 	.word	0xbeb360af
 80010e0:	e63e6cde 	.word	0xe63e6cde
 80010e4:	3df28de3 	.word	0x3df28de3
 80010e8:	5d50ae3a 	.word	0x5d50ae3a
 80010ec:	3e71c852 	.word	0x3e71c852
 80010f0:	6e664b7f 	.word	0x6e664b7f
 80010f4:	3e88c80b 	.word	0x3e88c80b
 80010f8:	998b63de 	.word	0x998b63de
 80010fc:	3f6301e1 	.word	0x3f6301e1
 8001100:	66255dbb 	.word	0x66255dbb
 8001104:	4001d6e4 	.word	0x4001d6e4
 8001108:	48b74f1a 	.word	0x48b74f1a
 800110c:	406e42e8 	.word	0x406e42e8
 8001110:	40590000 	.word	0x40590000
 8001114:	3ff00000 	.word	0x3ff00000
 8001118:	20000090 	.word	0x20000090
 800111c:	40140000 	.word	0x40140000
 8001120:	40100000 	.word	0x40100000
 8001124:	40080000 	.word	0x40080000

08001128 <sendData>:
uint8_t RxData[16];
int indx = 0;


void sendData (uint8_t *data)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	// Pull DE high to enable TX operation
	//Before transmitting the data we need to put the RS485 module in the transmitter mode.
	//To do this we have to pull the DE (Driver enable) pin as HIGH.

	HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_SET);
 8001130:	2201      	movs	r2, #1
 8001132:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001136:	480c      	ldr	r0, [pc, #48]	; (8001168 <sendData+0x40>)
 8001138:	f000 ff00 	bl	8001f3c <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1,data, strlen(data),1000);
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff f807 	bl	8000150 <strlen>
 8001142:	4603      	mov	r3, r0
 8001144:	b29a      	uxth	r2, r3
 8001146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	4807      	ldr	r0, [pc, #28]	; (800116c <sendData+0x44>)
 800114e:	f002 f8e0 	bl	8003312 <HAL_UART_Transmit>
	//Then we will send the data using the HAL_UART_Transmit Function.
	// Pull RE Low to enable RX operation
	HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET); // 	//Once the data is transmitted, we will enable the receiver mode by pulling the RE (Receive Enable) Pin LOW.
 8001152:	2200      	movs	r2, #0
 8001154:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001158:	4803      	ldr	r0, [pc, #12]	; (8001168 <sendData+0x40>)
 800115a:	f000 feef 	bl	8001f3c <HAL_GPIO_WritePin>
//Remember that DE and RE are connected to the same pin (PA8, TX_EN), so we can use the same pin to set the module in transmitter or receiver mode.
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40010800 	.word	0x40010800
 800116c:	2000010c 	.word	0x2000010c

08001170 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	807b      	strh	r3, [r7, #2]
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, temperature, 16);
 800117c:	2210      	movs	r2, #16
 800117e:	4904      	ldr	r1, [pc, #16]	; (8001190 <HAL_UARTEx_RxEventCallback+0x20>)
 8001180:	4804      	ldr	r0, [pc, #16]	; (8001194 <HAL_UARTEx_RxEventCallback+0x24>)
 8001182:	f002 f958 	bl	8003436 <HAL_UARTEx_ReceiveToIdle_IT>
	else{
		HAL_UARTEx_ReceiveToIdle_IT(&huart1, temperature, 16);
	}
*/

}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	2000009c 	.word	0x2000009c
 8001194:	2000010c 	.word	0x2000010c

08001198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001198:	b5b0      	push	{r4, r5, r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800119c:	f000 fb06 	bl	80017ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a0:	f000 f8b4 	bl	800130c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a4:	f000 f958 	bl	8001458 <MX_GPIO_Init>
  MX_SPI1_Init();
 80011a8:	f000 f8f6 	bl	8001398 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80011ac:	f000 f92a 	bl	8001404 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	MAX31865_Init(3); // num of wires
 80011b0:	2003      	movs	r0, #3
 80011b2:	f7ff fddb 	bl	8000d6c <MAX31865_Init>
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, temperature, 16);
 80011b6:	2210      	movs	r2, #16
 80011b8:	494b      	ldr	r1, [pc, #300]	; (80012e8 <main+0x150>)
 80011ba:	484c      	ldr	r0, [pc, #304]	; (80012ec <main+0x154>)
 80011bc:	f002 f93b 	bl	8003436 <HAL_UARTEx_ReceiveToIdle_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (HAL_GetTick() - Time >= 1000) {
 80011c0:	f000 fb4c 	bl	800185c <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	4b4a      	ldr	r3, [pc, #296]	; (80012f0 <main+0x158>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011d0:	d3f6      	bcc.n	80011c0 <main+0x28>
				Time = HAL_GetTick();
 80011d2:	f000 fb43 	bl	800185c <HAL_GetTick>
 80011d6:	4603      	mov	r3, r0
 80011d8:	4a45      	ldr	r2, [pc, #276]	; (80012f0 <main+0x158>)
 80011da:	6013      	str	r3, [r2, #0]
				//PT100_Temperature = 25.78;
				PT100_Temperature = MAX31865_Get_Temperature();
 80011dc:	f7ff fe40 	bl	8000e60 <MAX31865_Get_Temperature>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4610      	mov	r0, r2
 80011e6:	4619      	mov	r1, r3
 80011e8:	f7ff fcda 	bl	8000ba0 <__aeabi_d2f>
 80011ec:	4603      	mov	r3, r0
 80011ee:	4a41      	ldr	r2, [pc, #260]	; (80012f4 <main+0x15c>)
 80011f0:	6013      	str	r3, [r2, #0]
				if (PT100_Temperature >= 0) {
 80011f2:	4b40      	ldr	r3, [pc, #256]	; (80012f4 <main+0x15c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f04f 0100 	mov.w	r1, #0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff fd82 	bl	8000d04 <__aeabi_fcmpge>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d040      	beq.n	8001288 <main+0xf0>
					PT100_Temperature = PT100_Temperature + 0.05;
 8001206:	4b3b      	ldr	r3, [pc, #236]	; (80012f4 <main+0x15c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff f9c0 	bl	8000590 <__aeabi_f2d>
 8001210:	a333      	add	r3, pc, #204	; (adr r3, 80012e0 <main+0x148>)
 8001212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001216:	f7ff f85d 	bl	80002d4 <__adddf3>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4610      	mov	r0, r2
 8001220:	4619      	mov	r1, r3
 8001222:	f7ff fcbd 	bl	8000ba0 <__aeabi_d2f>
 8001226:	4603      	mov	r3, r0
 8001228:	4a32      	ldr	r2, [pc, #200]	; (80012f4 <main+0x15c>)
 800122a:	6013      	str	r3, [r2, #0]
					sprintf(temperature, " %d.%d", (uint16_t) (PT100_Temperature),((uint16_t) (PT100_Temperature * 100) - ((uint16_t) PT100_Temperature) * 100) / 10);
 800122c:	4b31      	ldr	r3, [pc, #196]	; (80012f4 <main+0x15c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fd7b 	bl	8000d2c <__aeabi_f2uiz>
 8001236:	4603      	mov	r3, r0
 8001238:	b29b      	uxth	r3, r3
 800123a:	461d      	mov	r5, r3
 800123c:	4b2d      	ldr	r3, [pc, #180]	; (80012f4 <main+0x15c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	492d      	ldr	r1, [pc, #180]	; (80012f8 <main+0x160>)
 8001242:	4618      	mov	r0, r3
 8001244:	f7fe ff8c 	bl	8000160 <__aeabi_fmul>
 8001248:	4603      	mov	r3, r0
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fd6e 	bl	8000d2c <__aeabi_f2uiz>
 8001250:	4603      	mov	r3, r0
 8001252:	b29b      	uxth	r3, r3
 8001254:	461c      	mov	r4, r3
 8001256:	4b27      	ldr	r3, [pc, #156]	; (80012f4 <main+0x15c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fd66 	bl	8000d2c <__aeabi_f2uiz>
 8001260:	4603      	mov	r3, r0
 8001262:	b29b      	uxth	r3, r3
 8001264:	461a      	mov	r2, r3
 8001266:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800126a:	fb02 f303 	mul.w	r3, r2, r3
 800126e:	4423      	add	r3, r4
 8001270:	4a22      	ldr	r2, [pc, #136]	; (80012fc <main+0x164>)
 8001272:	fb82 1203 	smull	r1, r2, r2, r3
 8001276:	1092      	asrs	r2, r2, #2
 8001278:	17db      	asrs	r3, r3, #31
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	462a      	mov	r2, r5
 800127e:	4920      	ldr	r1, [pc, #128]	; (8001300 <main+0x168>)
 8001280:	4819      	ldr	r0, [pc, #100]	; (80012e8 <main+0x150>)
 8001282:	f002 fd7f 	bl	8003d84 <siprintf>
 8001286:	e020      	b.n	80012ca <main+0x132>
					//sprintf(temperature, "%d°C  ", (uint16_t) (PT100_Temperature));
				} else {
					PT100_Temperature = -PT100_Temperature + 0.05;
 8001288:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <main+0x15c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff f97d 	bl	8000590 <__aeabi_f2d>
 8001296:	a312      	add	r3, pc, #72	; (adr r3, 80012e0 <main+0x148>)
 8001298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129c:	f7ff f81a 	bl	80002d4 <__adddf3>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	f7ff fc7a 	bl	8000ba0 <__aeabi_d2f>
 80012ac:	4603      	mov	r3, r0
 80012ae:	4a11      	ldr	r2, [pc, #68]	; (80012f4 <main+0x15c>)
 80012b0:	6013      	str	r3, [r2, #0]
				//	sprintf(temperature, "-%d.%d°C ", (uint16_t) (PT100_Temperature),((uint16_t) (PT100_Temperature * 100) - ((uint16_t) PT100_Temperature) * 100) / 10);
					sprintf(temperature, "- %d", (uint16_t) (PT100_Temperature));
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <main+0x15c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fd38 	bl	8000d2c <__aeabi_f2uiz>
 80012bc:	4603      	mov	r3, r0
 80012be:	b29b      	uxth	r3, r3
 80012c0:	461a      	mov	r2, r3
 80012c2:	4910      	ldr	r1, [pc, #64]	; (8001304 <main+0x16c>)
 80012c4:	4808      	ldr	r0, [pc, #32]	; (80012e8 <main+0x150>)
 80012c6:	f002 fd5d 	bl	8003d84 <siprintf>
				}
			    sendData("301");
 80012ca:	480f      	ldr	r0, [pc, #60]	; (8001308 <main+0x170>)
 80012cc:	f7ff ff2c 	bl	8001128 <sendData>
			    HAL_Delay(500);
 80012d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012d4:	f000 facc 	bl	8001870 <HAL_Delay>
		if (HAL_GetTick() - Time >= 1000) {
 80012d8:	e772      	b.n	80011c0 <main+0x28>
 80012da:	bf00      	nop
 80012dc:	f3af 8000 	nop.w
 80012e0:	9999999a 	.word	0x9999999a
 80012e4:	3fa99999 	.word	0x3fa99999
 80012e8:	2000009c 	.word	0x2000009c
 80012ec:	2000010c 	.word	0x2000010c
 80012f0:	200000b0 	.word	0x200000b0
 80012f4:	200000ac 	.word	0x200000ac
 80012f8:	42c80000 	.word	0x42c80000
 80012fc:	66666667 	.word	0x66666667
 8001300:	080054a0 	.word	0x080054a0
 8001304:	080054a8 	.word	0x080054a8
 8001308:	080054b0 	.word	0x080054b0

0800130c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b090      	sub	sp, #64	; 0x40
 8001310:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001312:	f107 0318 	add.w	r3, r7, #24
 8001316:	2228      	movs	r2, #40	; 0x28
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f002 fd2a 	bl	8003d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]
 800132c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800132e:	2301      	movs	r3, #1
 8001330:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001332:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001336:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001338:	2300      	movs	r3, #0
 800133a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800133c:	2301      	movs	r3, #1
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001340:	2302      	movs	r3, #2
 8001342:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001344:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001348:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800134a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800134e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001350:	f107 0318 	add.w	r3, r7, #24
 8001354:	4618      	mov	r0, r3
 8001356:	f000 fe09 	bl	8001f6c <HAL_RCC_OscConfig>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001360:	f000 f8ba 	bl	80014d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001364:	230f      	movs	r3, #15
 8001366:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001368:	2302      	movs	r3, #2
 800136a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001374:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	2102      	movs	r1, #2
 800137e:	4618      	mov	r0, r3
 8001380:	f001 f876 	bl	8002470 <HAL_RCC_ClockConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800138a:	f000 f8a5 	bl	80014d8 <Error_Handler>
  }
}
 800138e:	bf00      	nop
 8001390:	3740      	adds	r7, #64	; 0x40
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800139c:	4b17      	ldr	r3, [pc, #92]	; (80013fc <MX_SPI1_Init+0x64>)
 800139e:	4a18      	ldr	r2, [pc, #96]	; (8001400 <MX_SPI1_Init+0x68>)
 80013a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013a2:	4b16      	ldr	r3, [pc, #88]	; (80013fc <MX_SPI1_Init+0x64>)
 80013a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013aa:	4b14      	ldr	r3, [pc, #80]	; (80013fc <MX_SPI1_Init+0x64>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <MX_SPI1_Init+0x64>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013b6:	4b11      	ldr	r3, [pc, #68]	; (80013fc <MX_SPI1_Init+0x64>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <MX_SPI1_Init+0x64>)
 80013be:	2201      	movs	r2, #1
 80013c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013c2:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <MX_SPI1_Init+0x64>)
 80013c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80013ca:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <MX_SPI1_Init+0x64>)
 80013cc:	2230      	movs	r2, #48	; 0x30
 80013ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013d0:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <MX_SPI1_Init+0x64>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013d6:	4b09      	ldr	r3, [pc, #36]	; (80013fc <MX_SPI1_Init+0x64>)
 80013d8:	2200      	movs	r2, #0
 80013da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013dc:	4b07      	ldr	r3, [pc, #28]	; (80013fc <MX_SPI1_Init+0x64>)
 80013de:	2200      	movs	r2, #0
 80013e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <MX_SPI1_Init+0x64>)
 80013e4:	220a      	movs	r2, #10
 80013e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013e8:	4804      	ldr	r0, [pc, #16]	; (80013fc <MX_SPI1_Init+0x64>)
 80013ea:	f001 f9d9 	bl	80027a0 <HAL_SPI_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013f4:	f000 f870 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	200000b4 	.word	0x200000b4
 8001400:	40013000 	.word	0x40013000

08001404 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001408:	4b11      	ldr	r3, [pc, #68]	; (8001450 <MX_USART1_UART_Init+0x4c>)
 800140a:	4a12      	ldr	r2, [pc, #72]	; (8001454 <MX_USART1_UART_Init+0x50>)
 800140c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800140e:	4b10      	ldr	r3, [pc, #64]	; (8001450 <MX_USART1_UART_Init+0x4c>)
 8001410:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001414:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001416:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <MX_USART1_UART_Init+0x4c>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <MX_USART1_UART_Init+0x4c>)
 800141e:	2200      	movs	r2, #0
 8001420:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001422:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <MX_USART1_UART_Init+0x4c>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <MX_USART1_UART_Init+0x4c>)
 800142a:	220c      	movs	r2, #12
 800142c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <MX_USART1_UART_Init+0x4c>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <MX_USART1_UART_Init+0x4c>)
 8001436:	2200      	movs	r2, #0
 8001438:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800143a:	4805      	ldr	r0, [pc, #20]	; (8001450 <MX_USART1_UART_Init+0x4c>)
 800143c:	f001 ff1c 	bl	8003278 <HAL_UART_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001446:	f000 f847 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	2000010c 	.word	0x2000010c
 8001454:	40013800 	.word	0x40013800

08001458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145e:	f107 0308 	add.w	r3, r7, #8
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800146c:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <MX_GPIO_Init+0x78>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	4a17      	ldr	r2, [pc, #92]	; (80014d0 <MX_GPIO_Init+0x78>)
 8001472:	f043 0320 	orr.w	r3, r3, #32
 8001476:	6193      	str	r3, [r2, #24]
 8001478:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <MX_GPIO_Init+0x78>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	f003 0320 	and.w	r3, r3, #32
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <MX_GPIO_Init+0x78>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	4a11      	ldr	r2, [pc, #68]	; (80014d0 <MX_GPIO_Init+0x78>)
 800148a:	f043 0304 	orr.w	r3, r3, #4
 800148e:	6193      	str	r3, [r2, #24]
 8001490:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <MX_GPIO_Init+0x78>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	603b      	str	r3, [r7, #0]
 800149a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|TX_EN_Pin, GPIO_PIN_RESET);
 800149c:	2200      	movs	r2, #0
 800149e:	f240 1101 	movw	r1, #257	; 0x101
 80014a2:	480c      	ldr	r0, [pc, #48]	; (80014d4 <MX_GPIO_Init+0x7c>)
 80014a4:	f000 fd4a 	bl	8001f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_Pin TX_EN_Pin */
  GPIO_InitStruct.Pin = CS_Pin|TX_EN_Pin;
 80014a8:	f240 1301 	movw	r3, #257	; 0x101
 80014ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ae:	2301      	movs	r3, #1
 80014b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b6:	2302      	movs	r3, #2
 80014b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	4619      	mov	r1, r3
 80014c0:	4804      	ldr	r0, [pc, #16]	; (80014d4 <MX_GPIO_Init+0x7c>)
 80014c2:	f000 fbb7 	bl	8001c34 <HAL_GPIO_Init>

}
 80014c6:	bf00      	nop
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40010800 	.word	0x40010800

080014d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014dc:	b672      	cpsid	i
}
 80014de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <Error_Handler+0x8>
	...

080014e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <HAL_MspInit+0x5c>)
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	4a14      	ldr	r2, [pc, #80]	; (8001540 <HAL_MspInit+0x5c>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6193      	str	r3, [r2, #24]
 80014f6:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_MspInit+0x5c>)
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <HAL_MspInit+0x5c>)
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	4a0e      	ldr	r2, [pc, #56]	; (8001540 <HAL_MspInit+0x5c>)
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800150c:	61d3      	str	r3, [r2, #28]
 800150e:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <HAL_MspInit+0x5c>)
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800151a:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <HAL_MspInit+0x60>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	4a04      	ldr	r2, [pc, #16]	; (8001544 <HAL_MspInit+0x60>)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001536:	bf00      	nop
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	40021000 	.word	0x40021000
 8001544:	40010000 	.word	0x40010000

08001548 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 0310 	add.w	r3, r7, #16
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a1b      	ldr	r2, [pc, #108]	; (80015d0 <HAL_SPI_MspInit+0x88>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d12f      	bne.n	80015c8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001568:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <HAL_SPI_MspInit+0x8c>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	4a19      	ldr	r2, [pc, #100]	; (80015d4 <HAL_SPI_MspInit+0x8c>)
 800156e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001572:	6193      	str	r3, [r2, #24]
 8001574:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <HAL_SPI_MspInit+0x8c>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001580:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <HAL_SPI_MspInit+0x8c>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	4a13      	ldr	r2, [pc, #76]	; (80015d4 <HAL_SPI_MspInit+0x8c>)
 8001586:	f043 0304 	orr.w	r3, r3, #4
 800158a:	6193      	str	r3, [r2, #24]
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <HAL_SPI_MspInit+0x8c>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001598:	23a0      	movs	r3, #160	; 0xa0
 800159a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015a0:	2303      	movs	r3, #3
 80015a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	4619      	mov	r1, r3
 80015aa:	480b      	ldr	r0, [pc, #44]	; (80015d8 <HAL_SPI_MspInit+0x90>)
 80015ac:	f000 fb42 	bl	8001c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015b0:	2340      	movs	r3, #64	; 0x40
 80015b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015bc:	f107 0310 	add.w	r3, r7, #16
 80015c0:	4619      	mov	r1, r3
 80015c2:	4805      	ldr	r0, [pc, #20]	; (80015d8 <HAL_SPI_MspInit+0x90>)
 80015c4:	f000 fb36 	bl	8001c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015c8:	bf00      	nop
 80015ca:	3720      	adds	r7, #32
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40013000 	.word	0x40013000
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40010800 	.word	0x40010800

080015dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 0310 	add.w	r3, r7, #16
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a20      	ldr	r2, [pc, #128]	; (8001678 <HAL_UART_MspInit+0x9c>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d139      	bne.n	8001670 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015fc:	4b1f      	ldr	r3, [pc, #124]	; (800167c <HAL_UART_MspInit+0xa0>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	4a1e      	ldr	r2, [pc, #120]	; (800167c <HAL_UART_MspInit+0xa0>)
 8001602:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001606:	6193      	str	r3, [r2, #24]
 8001608:	4b1c      	ldr	r3, [pc, #112]	; (800167c <HAL_UART_MspInit+0xa0>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001614:	4b19      	ldr	r3, [pc, #100]	; (800167c <HAL_UART_MspInit+0xa0>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	4a18      	ldr	r2, [pc, #96]	; (800167c <HAL_UART_MspInit+0xa0>)
 800161a:	f043 0304 	orr.w	r3, r3, #4
 800161e:	6193      	str	r3, [r2, #24]
 8001620:	4b16      	ldr	r3, [pc, #88]	; (800167c <HAL_UART_MspInit+0xa0>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800162c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001630:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001636:	2303      	movs	r3, #3
 8001638:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163a:	f107 0310 	add.w	r3, r7, #16
 800163e:	4619      	mov	r1, r3
 8001640:	480f      	ldr	r0, [pc, #60]	; (8001680 <HAL_UART_MspInit+0xa4>)
 8001642:	f000 faf7 	bl	8001c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800164a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001654:	f107 0310 	add.w	r3, r7, #16
 8001658:	4619      	mov	r1, r3
 800165a:	4809      	ldr	r0, [pc, #36]	; (8001680 <HAL_UART_MspInit+0xa4>)
 800165c:	f000 faea 	bl	8001c34 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001660:	2200      	movs	r2, #0
 8001662:	2100      	movs	r1, #0
 8001664:	2025      	movs	r0, #37	; 0x25
 8001666:	f000 f9fe 	bl	8001a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800166a:	2025      	movs	r0, #37	; 0x25
 800166c:	f000 fa17 	bl	8001a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001670:	bf00      	nop
 8001672:	3720      	adds	r7, #32
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40013800 	.word	0x40013800
 800167c:	40021000 	.word	0x40021000
 8001680:	40010800 	.word	0x40010800

08001684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001688:	e7fe      	b.n	8001688 <NMI_Handler+0x4>

0800168a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168e:	e7fe      	b.n	800168e <HardFault_Handler+0x4>

08001690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001694:	e7fe      	b.n	8001694 <MemManage_Handler+0x4>

08001696 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169a:	e7fe      	b.n	800169a <BusFault_Handler+0x4>

0800169c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <UsageFault_Handler+0x4>

080016a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr

080016ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr

080016ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr

080016c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ca:	f000 f8b5 	bl	8001838 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016d8:	4802      	ldr	r0, [pc, #8]	; (80016e4 <USART1_IRQHandler+0x10>)
 80016da:	f001 fefb 	bl	80034d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	2000010c 	.word	0x2000010c

080016e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f0:	4a14      	ldr	r2, [pc, #80]	; (8001744 <_sbrk+0x5c>)
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <_sbrk+0x60>)
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016fc:	4b13      	ldr	r3, [pc, #76]	; (800174c <_sbrk+0x64>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d102      	bne.n	800170a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <_sbrk+0x64>)
 8001706:	4a12      	ldr	r2, [pc, #72]	; (8001750 <_sbrk+0x68>)
 8001708:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <_sbrk+0x64>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	429a      	cmp	r2, r3
 8001716:	d207      	bcs.n	8001728 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001718:	f002 fb02 	bl	8003d20 <__errno>
 800171c:	4603      	mov	r3, r0
 800171e:	220c      	movs	r2, #12
 8001720:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001722:	f04f 33ff 	mov.w	r3, #4294967295
 8001726:	e009      	b.n	800173c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <_sbrk+0x64>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800172e:	4b07      	ldr	r3, [pc, #28]	; (800174c <_sbrk+0x64>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	4a05      	ldr	r2, [pc, #20]	; (800174c <_sbrk+0x64>)
 8001738:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800173a:	68fb      	ldr	r3, [r7, #12]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20005000 	.word	0x20005000
 8001748:	00000400 	.word	0x00000400
 800174c:	20000150 	.word	0x20000150
 8001750:	20000168 	.word	0x20000168

08001754 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr

08001760 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001760:	480c      	ldr	r0, [pc, #48]	; (8001794 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001762:	490d      	ldr	r1, [pc, #52]	; (8001798 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001764:	4a0d      	ldr	r2, [pc, #52]	; (800179c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001768:	e002      	b.n	8001770 <LoopCopyDataInit>

0800176a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800176c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800176e:	3304      	adds	r3, #4

08001770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001774:	d3f9      	bcc.n	800176a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001778:	4c0a      	ldr	r4, [pc, #40]	; (80017a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800177c:	e001      	b.n	8001782 <LoopFillZerobss>

0800177e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800177e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001780:	3204      	adds	r2, #4

08001782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001784:	d3fb      	bcc.n	800177e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001786:	f7ff ffe5 	bl	8001754 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800178a:	f002 facf 	bl	8003d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800178e:	f7ff fd03 	bl	8001198 <main>
  bx lr
 8001792:	4770      	bx	lr
  ldr r0, =_sdata
 8001794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001798:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800179c:	08005548 	.word	0x08005548
  ldr r2, =_sbss
 80017a0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80017a4:	20000168 	.word	0x20000168

080017a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017a8:	e7fe      	b.n	80017a8 <ADC1_2_IRQHandler>
	...

080017ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <HAL_Init+0x28>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a07      	ldr	r2, [pc, #28]	; (80017d4 <HAL_Init+0x28>)
 80017b6:	f043 0310 	orr.w	r3, r3, #16
 80017ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017bc:	2003      	movs	r0, #3
 80017be:	f000 f947 	bl	8001a50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017c2:	200f      	movs	r0, #15
 80017c4:	f000 f808 	bl	80017d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017c8:	f7ff fe8c 	bl	80014e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40022000 	.word	0x40022000

080017d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_InitTick+0x54>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <HAL_InitTick+0x58>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	4619      	mov	r1, r3
 80017ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80017f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f6:	4618      	mov	r0, r3
 80017f8:	f000 f95f 	bl	8001aba <HAL_SYSTICK_Config>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e00e      	b.n	8001824 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b0f      	cmp	r3, #15
 800180a:	d80a      	bhi.n	8001822 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800180c:	2200      	movs	r2, #0
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	f04f 30ff 	mov.w	r0, #4294967295
 8001814:	f000 f927 	bl	8001a66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001818:	4a06      	ldr	r2, [pc, #24]	; (8001834 <HAL_InitTick+0x5c>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800181e:	2300      	movs	r3, #0
 8001820:	e000      	b.n	8001824 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000000 	.word	0x20000000
 8001830:	20000008 	.word	0x20000008
 8001834:	20000004 	.word	0x20000004

08001838 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800183c:	4b05      	ldr	r3, [pc, #20]	; (8001854 <HAL_IncTick+0x1c>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	4b05      	ldr	r3, [pc, #20]	; (8001858 <HAL_IncTick+0x20>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4413      	add	r3, r2
 8001848:	4a03      	ldr	r2, [pc, #12]	; (8001858 <HAL_IncTick+0x20>)
 800184a:	6013      	str	r3, [r2, #0]
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr
 8001854:	20000008 	.word	0x20000008
 8001858:	20000154 	.word	0x20000154

0800185c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return uwTick;
 8001860:	4b02      	ldr	r3, [pc, #8]	; (800186c <HAL_GetTick+0x10>)
 8001862:	681b      	ldr	r3, [r3, #0]
}
 8001864:	4618      	mov	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr
 800186c:	20000154 	.word	0x20000154

08001870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001878:	f7ff fff0 	bl	800185c <HAL_GetTick>
 800187c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001888:	d005      	beq.n	8001896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800188a:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <HAL_Delay+0x44>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	461a      	mov	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4413      	add	r3, r2
 8001894:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001896:	bf00      	nop
 8001898:	f7ff ffe0 	bl	800185c <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d8f7      	bhi.n	8001898 <HAL_Delay+0x28>
  {
  }
}
 80018a8:	bf00      	nop
 80018aa:	bf00      	nop
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000008 	.word	0x20000008

080018b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <__NVIC_SetPriorityGrouping+0x44>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018d4:	4013      	ands	r3, r2
 80018d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ea:	4a04      	ldr	r2, [pc, #16]	; (80018fc <__NVIC_SetPriorityGrouping+0x44>)
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	60d3      	str	r3, [r2, #12]
}
 80018f0:	bf00      	nop
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001904:	4b04      	ldr	r3, [pc, #16]	; (8001918 <__NVIC_GetPriorityGrouping+0x18>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	0a1b      	lsrs	r3, r3, #8
 800190a:	f003 0307 	and.w	r3, r3, #7
}
 800190e:	4618      	mov	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	2b00      	cmp	r3, #0
 800192c:	db0b      	blt.n	8001946 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	f003 021f 	and.w	r2, r3, #31
 8001934:	4906      	ldr	r1, [pc, #24]	; (8001950 <__NVIC_EnableIRQ+0x34>)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	095b      	lsrs	r3, r3, #5
 800193c:	2001      	movs	r0, #1
 800193e:	fa00 f202 	lsl.w	r2, r0, r2
 8001942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	e000e100 	.word	0xe000e100

08001954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	6039      	str	r1, [r7, #0]
 800195e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001964:	2b00      	cmp	r3, #0
 8001966:	db0a      	blt.n	800197e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	b2da      	uxtb	r2, r3
 800196c:	490c      	ldr	r1, [pc, #48]	; (80019a0 <__NVIC_SetPriority+0x4c>)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	0112      	lsls	r2, r2, #4
 8001974:	b2d2      	uxtb	r2, r2
 8001976:	440b      	add	r3, r1
 8001978:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800197c:	e00a      	b.n	8001994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	b2da      	uxtb	r2, r3
 8001982:	4908      	ldr	r1, [pc, #32]	; (80019a4 <__NVIC_SetPriority+0x50>)
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	3b04      	subs	r3, #4
 800198c:	0112      	lsls	r2, r2, #4
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	440b      	add	r3, r1
 8001992:	761a      	strb	r2, [r3, #24]
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	e000e100 	.word	0xe000e100
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b089      	sub	sp, #36	; 0x24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	f1c3 0307 	rsb	r3, r3, #7
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	bf28      	it	cs
 80019c6:	2304      	movcs	r3, #4
 80019c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	3304      	adds	r3, #4
 80019ce:	2b06      	cmp	r3, #6
 80019d0:	d902      	bls.n	80019d8 <NVIC_EncodePriority+0x30>
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3b03      	subs	r3, #3
 80019d6:	e000      	b.n	80019da <NVIC_EncodePriority+0x32>
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019dc:	f04f 32ff 	mov.w	r2, #4294967295
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43da      	mvns	r2, r3
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	401a      	ands	r2, r3
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f0:	f04f 31ff 	mov.w	r1, #4294967295
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	fa01 f303 	lsl.w	r3, r1, r3
 80019fa:	43d9      	mvns	r1, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a00:	4313      	orrs	r3, r2
         );
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3724      	adds	r7, #36	; 0x24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr

08001a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a1c:	d301      	bcc.n	8001a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e00f      	b.n	8001a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a22:	4a0a      	ldr	r2, [pc, #40]	; (8001a4c <SysTick_Config+0x40>)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a2a:	210f      	movs	r1, #15
 8001a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a30:	f7ff ff90 	bl	8001954 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <SysTick_Config+0x40>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a3a:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <SysTick_Config+0x40>)
 8001a3c:	2207      	movs	r2, #7
 8001a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	e000e010 	.word	0xe000e010

08001a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff ff2d 	bl	80018b8 <__NVIC_SetPriorityGrouping>
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b086      	sub	sp, #24
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	60b9      	str	r1, [r7, #8]
 8001a70:	607a      	str	r2, [r7, #4]
 8001a72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a78:	f7ff ff42 	bl	8001900 <__NVIC_GetPriorityGrouping>
 8001a7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	68b9      	ldr	r1, [r7, #8]
 8001a82:	6978      	ldr	r0, [r7, #20]
 8001a84:	f7ff ff90 	bl	80019a8 <NVIC_EncodePriority>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a8e:	4611      	mov	r1, r2
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff ff5f 	bl	8001954 <__NVIC_SetPriority>
}
 8001a96:	bf00      	nop
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ff35 	bl	800191c <__NVIC_EnableIRQ>
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff ffa2 	bl	8001a0c <SysTick_Config>
 8001ac8:	4603      	mov	r3, r0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b085      	sub	sp, #20
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ada:	2300      	movs	r3, #0
 8001adc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d008      	beq.n	8001afa <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2204      	movs	r2, #4
 8001aec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e020      	b.n	8001b3c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 020e 	bic.w	r2, r2, #14
 8001b08:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 0201 	bic.w	r2, r2, #1
 8001b18:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b22:	2101      	movs	r1, #1
 8001b24:	fa01 f202 	lsl.w	r2, r1, r2
 8001b28:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc80      	pop	{r7}
 8001b44:	4770      	bx	lr
	...

08001b48 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b50:	2300      	movs	r3, #0
 8001b52:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d005      	beq.n	8001b6a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2204      	movs	r2, #4
 8001b62:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	73fb      	strb	r3, [r7, #15]
 8001b68:	e051      	b.n	8001c0e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 020e 	bic.w	r2, r2, #14
 8001b78:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 0201 	bic.w	r2, r2, #1
 8001b88:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a22      	ldr	r2, [pc, #136]	; (8001c18 <HAL_DMA_Abort_IT+0xd0>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d029      	beq.n	8001be8 <HAL_DMA_Abort_IT+0xa0>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a20      	ldr	r2, [pc, #128]	; (8001c1c <HAL_DMA_Abort_IT+0xd4>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d022      	beq.n	8001be4 <HAL_DMA_Abort_IT+0x9c>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a1f      	ldr	r2, [pc, #124]	; (8001c20 <HAL_DMA_Abort_IT+0xd8>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d01a      	beq.n	8001bde <HAL_DMA_Abort_IT+0x96>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a1d      	ldr	r2, [pc, #116]	; (8001c24 <HAL_DMA_Abort_IT+0xdc>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d012      	beq.n	8001bd8 <HAL_DMA_Abort_IT+0x90>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a1c      	ldr	r2, [pc, #112]	; (8001c28 <HAL_DMA_Abort_IT+0xe0>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d00a      	beq.n	8001bd2 <HAL_DMA_Abort_IT+0x8a>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a1a      	ldr	r2, [pc, #104]	; (8001c2c <HAL_DMA_Abort_IT+0xe4>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d102      	bne.n	8001bcc <HAL_DMA_Abort_IT+0x84>
 8001bc6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001bca:	e00e      	b.n	8001bea <HAL_DMA_Abort_IT+0xa2>
 8001bcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bd0:	e00b      	b.n	8001bea <HAL_DMA_Abort_IT+0xa2>
 8001bd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bd6:	e008      	b.n	8001bea <HAL_DMA_Abort_IT+0xa2>
 8001bd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bdc:	e005      	b.n	8001bea <HAL_DMA_Abort_IT+0xa2>
 8001bde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001be2:	e002      	b.n	8001bea <HAL_DMA_Abort_IT+0xa2>
 8001be4:	2310      	movs	r3, #16
 8001be6:	e000      	b.n	8001bea <HAL_DMA_Abort_IT+0xa2>
 8001be8:	2301      	movs	r3, #1
 8001bea:	4a11      	ldr	r2, [pc, #68]	; (8001c30 <HAL_DMA_Abort_IT+0xe8>)
 8001bec:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	4798      	blx	r3
    } 
  }
  return status;
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40020008 	.word	0x40020008
 8001c1c:	4002001c 	.word	0x4002001c
 8001c20:	40020030 	.word	0x40020030
 8001c24:	40020044 	.word	0x40020044
 8001c28:	40020058 	.word	0x40020058
 8001c2c:	4002006c 	.word	0x4002006c
 8001c30:	40020000 	.word	0x40020000

08001c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b08b      	sub	sp, #44	; 0x2c
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c42:	2300      	movs	r3, #0
 8001c44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c46:	e169      	b.n	8001f1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c48:	2201      	movs	r2, #1
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	69fa      	ldr	r2, [r7, #28]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	f040 8158 	bne.w	8001f16 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	4a9a      	ldr	r2, [pc, #616]	; (8001ed4 <HAL_GPIO_Init+0x2a0>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d05e      	beq.n	8001d2e <HAL_GPIO_Init+0xfa>
 8001c70:	4a98      	ldr	r2, [pc, #608]	; (8001ed4 <HAL_GPIO_Init+0x2a0>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d875      	bhi.n	8001d62 <HAL_GPIO_Init+0x12e>
 8001c76:	4a98      	ldr	r2, [pc, #608]	; (8001ed8 <HAL_GPIO_Init+0x2a4>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d058      	beq.n	8001d2e <HAL_GPIO_Init+0xfa>
 8001c7c:	4a96      	ldr	r2, [pc, #600]	; (8001ed8 <HAL_GPIO_Init+0x2a4>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d86f      	bhi.n	8001d62 <HAL_GPIO_Init+0x12e>
 8001c82:	4a96      	ldr	r2, [pc, #600]	; (8001edc <HAL_GPIO_Init+0x2a8>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d052      	beq.n	8001d2e <HAL_GPIO_Init+0xfa>
 8001c88:	4a94      	ldr	r2, [pc, #592]	; (8001edc <HAL_GPIO_Init+0x2a8>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d869      	bhi.n	8001d62 <HAL_GPIO_Init+0x12e>
 8001c8e:	4a94      	ldr	r2, [pc, #592]	; (8001ee0 <HAL_GPIO_Init+0x2ac>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d04c      	beq.n	8001d2e <HAL_GPIO_Init+0xfa>
 8001c94:	4a92      	ldr	r2, [pc, #584]	; (8001ee0 <HAL_GPIO_Init+0x2ac>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d863      	bhi.n	8001d62 <HAL_GPIO_Init+0x12e>
 8001c9a:	4a92      	ldr	r2, [pc, #584]	; (8001ee4 <HAL_GPIO_Init+0x2b0>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d046      	beq.n	8001d2e <HAL_GPIO_Init+0xfa>
 8001ca0:	4a90      	ldr	r2, [pc, #576]	; (8001ee4 <HAL_GPIO_Init+0x2b0>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d85d      	bhi.n	8001d62 <HAL_GPIO_Init+0x12e>
 8001ca6:	2b12      	cmp	r3, #18
 8001ca8:	d82a      	bhi.n	8001d00 <HAL_GPIO_Init+0xcc>
 8001caa:	2b12      	cmp	r3, #18
 8001cac:	d859      	bhi.n	8001d62 <HAL_GPIO_Init+0x12e>
 8001cae:	a201      	add	r2, pc, #4	; (adr r2, 8001cb4 <HAL_GPIO_Init+0x80>)
 8001cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb4:	08001d2f 	.word	0x08001d2f
 8001cb8:	08001d09 	.word	0x08001d09
 8001cbc:	08001d1b 	.word	0x08001d1b
 8001cc0:	08001d5d 	.word	0x08001d5d
 8001cc4:	08001d63 	.word	0x08001d63
 8001cc8:	08001d63 	.word	0x08001d63
 8001ccc:	08001d63 	.word	0x08001d63
 8001cd0:	08001d63 	.word	0x08001d63
 8001cd4:	08001d63 	.word	0x08001d63
 8001cd8:	08001d63 	.word	0x08001d63
 8001cdc:	08001d63 	.word	0x08001d63
 8001ce0:	08001d63 	.word	0x08001d63
 8001ce4:	08001d63 	.word	0x08001d63
 8001ce8:	08001d63 	.word	0x08001d63
 8001cec:	08001d63 	.word	0x08001d63
 8001cf0:	08001d63 	.word	0x08001d63
 8001cf4:	08001d63 	.word	0x08001d63
 8001cf8:	08001d11 	.word	0x08001d11
 8001cfc:	08001d25 	.word	0x08001d25
 8001d00:	4a79      	ldr	r2, [pc, #484]	; (8001ee8 <HAL_GPIO_Init+0x2b4>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d013      	beq.n	8001d2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d06:	e02c      	b.n	8001d62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	623b      	str	r3, [r7, #32]
          break;
 8001d0e:	e029      	b.n	8001d64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	3304      	adds	r3, #4
 8001d16:	623b      	str	r3, [r7, #32]
          break;
 8001d18:	e024      	b.n	8001d64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	3308      	adds	r3, #8
 8001d20:	623b      	str	r3, [r7, #32]
          break;
 8001d22:	e01f      	b.n	8001d64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	330c      	adds	r3, #12
 8001d2a:	623b      	str	r3, [r7, #32]
          break;
 8001d2c:	e01a      	b.n	8001d64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d102      	bne.n	8001d3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d36:	2304      	movs	r3, #4
 8001d38:	623b      	str	r3, [r7, #32]
          break;
 8001d3a:	e013      	b.n	8001d64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d105      	bne.n	8001d50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d44:	2308      	movs	r3, #8
 8001d46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69fa      	ldr	r2, [r7, #28]
 8001d4c:	611a      	str	r2, [r3, #16]
          break;
 8001d4e:	e009      	b.n	8001d64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d50:	2308      	movs	r3, #8
 8001d52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69fa      	ldr	r2, [r7, #28]
 8001d58:	615a      	str	r2, [r3, #20]
          break;
 8001d5a:	e003      	b.n	8001d64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	623b      	str	r3, [r7, #32]
          break;
 8001d60:	e000      	b.n	8001d64 <HAL_GPIO_Init+0x130>
          break;
 8001d62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	2bff      	cmp	r3, #255	; 0xff
 8001d68:	d801      	bhi.n	8001d6e <HAL_GPIO_Init+0x13a>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	e001      	b.n	8001d72 <HAL_GPIO_Init+0x13e>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3304      	adds	r3, #4
 8001d72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	2bff      	cmp	r3, #255	; 0xff
 8001d78:	d802      	bhi.n	8001d80 <HAL_GPIO_Init+0x14c>
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	e002      	b.n	8001d86 <HAL_GPIO_Init+0x152>
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	3b08      	subs	r3, #8
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	210f      	movs	r1, #15
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	fa01 f303 	lsl.w	r3, r1, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	401a      	ands	r2, r3
 8001d98:	6a39      	ldr	r1, [r7, #32]
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001da0:	431a      	orrs	r2, r3
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 80b1 	beq.w	8001f16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001db4:	4b4d      	ldr	r3, [pc, #308]	; (8001eec <HAL_GPIO_Init+0x2b8>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	4a4c      	ldr	r2, [pc, #304]	; (8001eec <HAL_GPIO_Init+0x2b8>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	6193      	str	r3, [r2, #24]
 8001dc0:	4b4a      	ldr	r3, [pc, #296]	; (8001eec <HAL_GPIO_Init+0x2b8>)
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001dcc:	4a48      	ldr	r2, [pc, #288]	; (8001ef0 <HAL_GPIO_Init+0x2bc>)
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	089b      	lsrs	r3, r3, #2
 8001dd2:	3302      	adds	r3, #2
 8001dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	f003 0303 	and.w	r3, r3, #3
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	220f      	movs	r2, #15
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	4013      	ands	r3, r2
 8001dee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a40      	ldr	r2, [pc, #256]	; (8001ef4 <HAL_GPIO_Init+0x2c0>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d013      	beq.n	8001e20 <HAL_GPIO_Init+0x1ec>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a3f      	ldr	r2, [pc, #252]	; (8001ef8 <HAL_GPIO_Init+0x2c4>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d00d      	beq.n	8001e1c <HAL_GPIO_Init+0x1e8>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a3e      	ldr	r2, [pc, #248]	; (8001efc <HAL_GPIO_Init+0x2c8>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d007      	beq.n	8001e18 <HAL_GPIO_Init+0x1e4>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a3d      	ldr	r2, [pc, #244]	; (8001f00 <HAL_GPIO_Init+0x2cc>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d101      	bne.n	8001e14 <HAL_GPIO_Init+0x1e0>
 8001e10:	2303      	movs	r3, #3
 8001e12:	e006      	b.n	8001e22 <HAL_GPIO_Init+0x1ee>
 8001e14:	2304      	movs	r3, #4
 8001e16:	e004      	b.n	8001e22 <HAL_GPIO_Init+0x1ee>
 8001e18:	2302      	movs	r3, #2
 8001e1a:	e002      	b.n	8001e22 <HAL_GPIO_Init+0x1ee>
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e000      	b.n	8001e22 <HAL_GPIO_Init+0x1ee>
 8001e20:	2300      	movs	r3, #0
 8001e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e24:	f002 0203 	and.w	r2, r2, #3
 8001e28:	0092      	lsls	r2, r2, #2
 8001e2a:	4093      	lsls	r3, r2
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e32:	492f      	ldr	r1, [pc, #188]	; (8001ef0 <HAL_GPIO_Init+0x2bc>)
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	089b      	lsrs	r3, r3, #2
 8001e38:	3302      	adds	r3, #2
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d006      	beq.n	8001e5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e4c:	4b2d      	ldr	r3, [pc, #180]	; (8001f04 <HAL_GPIO_Init+0x2d0>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	492c      	ldr	r1, [pc, #176]	; (8001f04 <HAL_GPIO_Init+0x2d0>)
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	600b      	str	r3, [r1, #0]
 8001e58:	e006      	b.n	8001e68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e5a:	4b2a      	ldr	r3, [pc, #168]	; (8001f04 <HAL_GPIO_Init+0x2d0>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	43db      	mvns	r3, r3
 8001e62:	4928      	ldr	r1, [pc, #160]	; (8001f04 <HAL_GPIO_Init+0x2d0>)
 8001e64:	4013      	ands	r3, r2
 8001e66:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d006      	beq.n	8001e82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e74:	4b23      	ldr	r3, [pc, #140]	; (8001f04 <HAL_GPIO_Init+0x2d0>)
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	4922      	ldr	r1, [pc, #136]	; (8001f04 <HAL_GPIO_Init+0x2d0>)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	604b      	str	r3, [r1, #4]
 8001e80:	e006      	b.n	8001e90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e82:	4b20      	ldr	r3, [pc, #128]	; (8001f04 <HAL_GPIO_Init+0x2d0>)
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	491e      	ldr	r1, [pc, #120]	; (8001f04 <HAL_GPIO_Init+0x2d0>)
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d006      	beq.n	8001eaa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e9c:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <HAL_GPIO_Init+0x2d0>)
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	4918      	ldr	r1, [pc, #96]	; (8001f04 <HAL_GPIO_Init+0x2d0>)
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	608b      	str	r3, [r1, #8]
 8001ea8:	e006      	b.n	8001eb8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001eaa:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <HAL_GPIO_Init+0x2d0>)
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	4914      	ldr	r1, [pc, #80]	; (8001f04 <HAL_GPIO_Init+0x2d0>)
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d021      	beq.n	8001f08 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <HAL_GPIO_Init+0x2d0>)
 8001ec6:	68da      	ldr	r2, [r3, #12]
 8001ec8:	490e      	ldr	r1, [pc, #56]	; (8001f04 <HAL_GPIO_Init+0x2d0>)
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	60cb      	str	r3, [r1, #12]
 8001ed0:	e021      	b.n	8001f16 <HAL_GPIO_Init+0x2e2>
 8001ed2:	bf00      	nop
 8001ed4:	10320000 	.word	0x10320000
 8001ed8:	10310000 	.word	0x10310000
 8001edc:	10220000 	.word	0x10220000
 8001ee0:	10210000 	.word	0x10210000
 8001ee4:	10120000 	.word	0x10120000
 8001ee8:	10110000 	.word	0x10110000
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	40010000 	.word	0x40010000
 8001ef4:	40010800 	.word	0x40010800
 8001ef8:	40010c00 	.word	0x40010c00
 8001efc:	40011000 	.word	0x40011000
 8001f00:	40011400 	.word	0x40011400
 8001f04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <HAL_GPIO_Init+0x304>)
 8001f0a:	68da      	ldr	r2, [r3, #12]
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	4909      	ldr	r1, [pc, #36]	; (8001f38 <HAL_GPIO_Init+0x304>)
 8001f12:	4013      	ands	r3, r2
 8001f14:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	3301      	adds	r3, #1
 8001f1a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f22:	fa22 f303 	lsr.w	r3, r2, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f47f ae8e 	bne.w	8001c48 <HAL_GPIO_Init+0x14>
  }
}
 8001f2c:	bf00      	nop
 8001f2e:	bf00      	nop
 8001f30:	372c      	adds	r7, #44	; 0x2c
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr
 8001f38:	40010400 	.word	0x40010400

08001f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	807b      	strh	r3, [r7, #2]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f4c:	787b      	ldrb	r3, [r7, #1]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f52:	887a      	ldrh	r2, [r7, #2]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f58:	e003      	b.n	8001f62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f5a:	887b      	ldrh	r3, [r7, #2]
 8001f5c:	041a      	lsls	r2, r3, #16
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	611a      	str	r2, [r3, #16]
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr

08001f6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e272      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 8087 	beq.w	800209a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f8c:	4b92      	ldr	r3, [pc, #584]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 030c 	and.w	r3, r3, #12
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d00c      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f98:	4b8f      	ldr	r3, [pc, #572]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 030c 	and.w	r3, r3, #12
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d112      	bne.n	8001fca <HAL_RCC_OscConfig+0x5e>
 8001fa4:	4b8c      	ldr	r3, [pc, #560]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fb0:	d10b      	bne.n	8001fca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb2:	4b89      	ldr	r3, [pc, #548]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d06c      	beq.n	8002098 <HAL_RCC_OscConfig+0x12c>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d168      	bne.n	8002098 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e24c      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd2:	d106      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x76>
 8001fd4:	4b80      	ldr	r3, [pc, #512]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a7f      	ldr	r2, [pc, #508]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	e02e      	b.n	8002040 <HAL_RCC_OscConfig+0xd4>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10c      	bne.n	8002004 <HAL_RCC_OscConfig+0x98>
 8001fea:	4b7b      	ldr	r3, [pc, #492]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a7a      	ldr	r2, [pc, #488]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	4b78      	ldr	r3, [pc, #480]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a77      	ldr	r2, [pc, #476]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	e01d      	b.n	8002040 <HAL_RCC_OscConfig+0xd4>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800200c:	d10c      	bne.n	8002028 <HAL_RCC_OscConfig+0xbc>
 800200e:	4b72      	ldr	r3, [pc, #456]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a71      	ldr	r2, [pc, #452]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	4b6f      	ldr	r3, [pc, #444]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a6e      	ldr	r2, [pc, #440]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	e00b      	b.n	8002040 <HAL_RCC_OscConfig+0xd4>
 8002028:	4b6b      	ldr	r3, [pc, #428]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a6a      	ldr	r2, [pc, #424]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800202e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	4b68      	ldr	r3, [pc, #416]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a67      	ldr	r2, [pc, #412]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800203a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800203e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d013      	beq.n	8002070 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002048:	f7ff fc08 	bl	800185c <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002050:	f7ff fc04 	bl	800185c <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b64      	cmp	r3, #100	; 0x64
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e200      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002062:	4b5d      	ldr	r3, [pc, #372]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0f0      	beq.n	8002050 <HAL_RCC_OscConfig+0xe4>
 800206e:	e014      	b.n	800209a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002070:	f7ff fbf4 	bl	800185c <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002078:	f7ff fbf0 	bl	800185c <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b64      	cmp	r3, #100	; 0x64
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e1ec      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800208a:	4b53      	ldr	r3, [pc, #332]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f0      	bne.n	8002078 <HAL_RCC_OscConfig+0x10c>
 8002096:	e000      	b.n	800209a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d063      	beq.n	800216e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020a6:	4b4c      	ldr	r3, [pc, #304]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00b      	beq.n	80020ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020b2:	4b49      	ldr	r3, [pc, #292]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d11c      	bne.n	80020f8 <HAL_RCC_OscConfig+0x18c>
 80020be:	4b46      	ldr	r3, [pc, #280]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d116      	bne.n	80020f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ca:	4b43      	ldr	r3, [pc, #268]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d005      	beq.n	80020e2 <HAL_RCC_OscConfig+0x176>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d001      	beq.n	80020e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e1c0      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e2:	4b3d      	ldr	r3, [pc, #244]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4939      	ldr	r1, [pc, #228]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f6:	e03a      	b.n	800216e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d020      	beq.n	8002142 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002100:	4b36      	ldr	r3, [pc, #216]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 8002102:	2201      	movs	r2, #1
 8002104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002106:	f7ff fba9 	bl	800185c <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800210e:	f7ff fba5 	bl	800185c <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e1a1      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002120:	4b2d      	ldr	r3, [pc, #180]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0f0      	beq.n	800210e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800212c:	4b2a      	ldr	r3, [pc, #168]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	4927      	ldr	r1, [pc, #156]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800213c:	4313      	orrs	r3, r2
 800213e:	600b      	str	r3, [r1, #0]
 8002140:	e015      	b.n	800216e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002142:	4b26      	ldr	r3, [pc, #152]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002148:	f7ff fb88 	bl	800185c <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002150:	f7ff fb84 	bl	800185c <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e180      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002162:	4b1d      	ldr	r3, [pc, #116]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f0      	bne.n	8002150 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b00      	cmp	r3, #0
 8002178:	d03a      	beq.n	80021f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d019      	beq.n	80021b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002182:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <HAL_RCC_OscConfig+0x274>)
 8002184:	2201      	movs	r2, #1
 8002186:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002188:	f7ff fb68 	bl	800185c <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002190:	f7ff fb64 	bl	800185c <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e160      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a2:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0f0      	beq.n	8002190 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021ae:	2001      	movs	r0, #1
 80021b0:	f000 fad8 	bl	8002764 <RCC_Delay>
 80021b4:	e01c      	b.n	80021f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021b6:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <HAL_RCC_OscConfig+0x274>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021bc:	f7ff fb4e 	bl	800185c <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c2:	e00f      	b.n	80021e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c4:	f7ff fb4a 	bl	800185c <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d908      	bls.n	80021e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e146      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
 80021d6:	bf00      	nop
 80021d8:	40021000 	.word	0x40021000
 80021dc:	42420000 	.word	0x42420000
 80021e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e4:	4b92      	ldr	r3, [pc, #584]	; (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80021e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1e9      	bne.n	80021c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 80a6 	beq.w	800234a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021fe:	2300      	movs	r3, #0
 8002200:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002202:	4b8b      	ldr	r3, [pc, #556]	; (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10d      	bne.n	800222a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800220e:	4b88      	ldr	r3, [pc, #544]	; (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	4a87      	ldr	r2, [pc, #540]	; (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002218:	61d3      	str	r3, [r2, #28]
 800221a:	4b85      	ldr	r3, [pc, #532]	; (8002430 <HAL_RCC_OscConfig+0x4c4>)
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002226:	2301      	movs	r3, #1
 8002228:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222a:	4b82      	ldr	r3, [pc, #520]	; (8002434 <HAL_RCC_OscConfig+0x4c8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002232:	2b00      	cmp	r3, #0
 8002234:	d118      	bne.n	8002268 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002236:	4b7f      	ldr	r3, [pc, #508]	; (8002434 <HAL_RCC_OscConfig+0x4c8>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a7e      	ldr	r2, [pc, #504]	; (8002434 <HAL_RCC_OscConfig+0x4c8>)
 800223c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002242:	f7ff fb0b 	bl	800185c <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800224a:	f7ff fb07 	bl	800185c <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b64      	cmp	r3, #100	; 0x64
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e103      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225c:	4b75      	ldr	r3, [pc, #468]	; (8002434 <HAL_RCC_OscConfig+0x4c8>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0f0      	beq.n	800224a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d106      	bne.n	800227e <HAL_RCC_OscConfig+0x312>
 8002270:	4b6f      	ldr	r3, [pc, #444]	; (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	4a6e      	ldr	r2, [pc, #440]	; (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	6213      	str	r3, [r2, #32]
 800227c:	e02d      	b.n	80022da <HAL_RCC_OscConfig+0x36e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10c      	bne.n	80022a0 <HAL_RCC_OscConfig+0x334>
 8002286:	4b6a      	ldr	r3, [pc, #424]	; (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	4a69      	ldr	r2, [pc, #420]	; (8002430 <HAL_RCC_OscConfig+0x4c4>)
 800228c:	f023 0301 	bic.w	r3, r3, #1
 8002290:	6213      	str	r3, [r2, #32]
 8002292:	4b67      	ldr	r3, [pc, #412]	; (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	4a66      	ldr	r2, [pc, #408]	; (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002298:	f023 0304 	bic.w	r3, r3, #4
 800229c:	6213      	str	r3, [r2, #32]
 800229e:	e01c      	b.n	80022da <HAL_RCC_OscConfig+0x36e>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	2b05      	cmp	r3, #5
 80022a6:	d10c      	bne.n	80022c2 <HAL_RCC_OscConfig+0x356>
 80022a8:	4b61      	ldr	r3, [pc, #388]	; (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	4a60      	ldr	r2, [pc, #384]	; (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80022ae:	f043 0304 	orr.w	r3, r3, #4
 80022b2:	6213      	str	r3, [r2, #32]
 80022b4:	4b5e      	ldr	r3, [pc, #376]	; (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	4a5d      	ldr	r2, [pc, #372]	; (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	6213      	str	r3, [r2, #32]
 80022c0:	e00b      	b.n	80022da <HAL_RCC_OscConfig+0x36e>
 80022c2:	4b5b      	ldr	r3, [pc, #364]	; (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	4a5a      	ldr	r2, [pc, #360]	; (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80022c8:	f023 0301 	bic.w	r3, r3, #1
 80022cc:	6213      	str	r3, [r2, #32]
 80022ce:	4b58      	ldr	r3, [pc, #352]	; (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	4a57      	ldr	r2, [pc, #348]	; (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80022d4:	f023 0304 	bic.w	r3, r3, #4
 80022d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d015      	beq.n	800230e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e2:	f7ff fabb 	bl	800185c <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e8:	e00a      	b.n	8002300 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ea:	f7ff fab7 	bl	800185c <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e0b1      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002300:	4b4b      	ldr	r3, [pc, #300]	; (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0ee      	beq.n	80022ea <HAL_RCC_OscConfig+0x37e>
 800230c:	e014      	b.n	8002338 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230e:	f7ff faa5 	bl	800185c <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002314:	e00a      	b.n	800232c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002316:	f7ff faa1 	bl	800185c <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	f241 3288 	movw	r2, #5000	; 0x1388
 8002324:	4293      	cmp	r3, r2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e09b      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800232c:	4b40      	ldr	r3, [pc, #256]	; (8002430 <HAL_RCC_OscConfig+0x4c4>)
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1ee      	bne.n	8002316 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002338:	7dfb      	ldrb	r3, [r7, #23]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d105      	bne.n	800234a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800233e:	4b3c      	ldr	r3, [pc, #240]	; (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	4a3b      	ldr	r2, [pc, #236]	; (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002348:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 8087 	beq.w	8002462 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002354:	4b36      	ldr	r3, [pc, #216]	; (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 030c 	and.w	r3, r3, #12
 800235c:	2b08      	cmp	r3, #8
 800235e:	d061      	beq.n	8002424 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	2b02      	cmp	r3, #2
 8002366:	d146      	bne.n	80023f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002368:	4b33      	ldr	r3, [pc, #204]	; (8002438 <HAL_RCC_OscConfig+0x4cc>)
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236e:	f7ff fa75 	bl	800185c <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002376:	f7ff fa71 	bl	800185c <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e06d      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002388:	4b29      	ldr	r3, [pc, #164]	; (8002430 <HAL_RCC_OscConfig+0x4c4>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1f0      	bne.n	8002376 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239c:	d108      	bne.n	80023b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800239e:	4b24      	ldr	r3, [pc, #144]	; (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	4921      	ldr	r1, [pc, #132]	; (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023b0:	4b1f      	ldr	r3, [pc, #124]	; (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a19      	ldr	r1, [r3, #32]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	430b      	orrs	r3, r1
 80023c2:	491b      	ldr	r1, [pc, #108]	; (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c8:	4b1b      	ldr	r3, [pc, #108]	; (8002438 <HAL_RCC_OscConfig+0x4cc>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ce:	f7ff fa45 	bl	800185c <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d6:	f7ff fa41 	bl	800185c <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e03d      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023e8:	4b11      	ldr	r3, [pc, #68]	; (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0x46a>
 80023f4:	e035      	b.n	8002462 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f6:	4b10      	ldr	r3, [pc, #64]	; (8002438 <HAL_RCC_OscConfig+0x4cc>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fc:	f7ff fa2e 	bl	800185c <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002404:	f7ff fa2a 	bl	800185c <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e026      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f0      	bne.n	8002404 <HAL_RCC_OscConfig+0x498>
 8002422:	e01e      	b.n	8002462 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d107      	bne.n	800243c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e019      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
 8002430:	40021000 	.word	0x40021000
 8002434:	40007000 	.word	0x40007000
 8002438:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800243c:	4b0b      	ldr	r3, [pc, #44]	; (800246c <HAL_RCC_OscConfig+0x500>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	429a      	cmp	r2, r3
 800244e:	d106      	bne.n	800245e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245a:	429a      	cmp	r2, r3
 800245c:	d001      	beq.n	8002462 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40021000 	.word	0x40021000

08002470 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e0d0      	b.n	8002626 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002484:	4b6a      	ldr	r3, [pc, #424]	; (8002630 <HAL_RCC_ClockConfig+0x1c0>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d910      	bls.n	80024b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002492:	4b67      	ldr	r3, [pc, #412]	; (8002630 <HAL_RCC_ClockConfig+0x1c0>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f023 0207 	bic.w	r2, r3, #7
 800249a:	4965      	ldr	r1, [pc, #404]	; (8002630 <HAL_RCC_ClockConfig+0x1c0>)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	4313      	orrs	r3, r2
 80024a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a2:	4b63      	ldr	r3, [pc, #396]	; (8002630 <HAL_RCC_ClockConfig+0x1c0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d001      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e0b8      	b.n	8002626 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d020      	beq.n	8002502 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d005      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024cc:	4b59      	ldr	r3, [pc, #356]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	4a58      	ldr	r2, [pc, #352]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80024d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024e4:	4b53      	ldr	r3, [pc, #332]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	4a52      	ldr	r2, [pc, #328]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80024ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f0:	4b50      	ldr	r3, [pc, #320]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	494d      	ldr	r1, [pc, #308]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d040      	beq.n	8002590 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d107      	bne.n	8002526 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002516:	4b47      	ldr	r3, [pc, #284]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d115      	bne.n	800254e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e07f      	b.n	8002626 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b02      	cmp	r3, #2
 800252c:	d107      	bne.n	800253e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252e:	4b41      	ldr	r3, [pc, #260]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d109      	bne.n	800254e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e073      	b.n	8002626 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253e:	4b3d      	ldr	r3, [pc, #244]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e06b      	b.n	8002626 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800254e:	4b39      	ldr	r3, [pc, #228]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f023 0203 	bic.w	r2, r3, #3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	4936      	ldr	r1, [pc, #216]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 800255c:	4313      	orrs	r3, r2
 800255e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002560:	f7ff f97c 	bl	800185c <HAL_GetTick>
 8002564:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002566:	e00a      	b.n	800257e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002568:	f7ff f978 	bl	800185c <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	f241 3288 	movw	r2, #5000	; 0x1388
 8002576:	4293      	cmp	r3, r2
 8002578:	d901      	bls.n	800257e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e053      	b.n	8002626 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257e:	4b2d      	ldr	r3, [pc, #180]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f003 020c 	and.w	r2, r3, #12
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	429a      	cmp	r2, r3
 800258e:	d1eb      	bne.n	8002568 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002590:	4b27      	ldr	r3, [pc, #156]	; (8002630 <HAL_RCC_ClockConfig+0x1c0>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d210      	bcs.n	80025c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259e:	4b24      	ldr	r3, [pc, #144]	; (8002630 <HAL_RCC_ClockConfig+0x1c0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f023 0207 	bic.w	r2, r3, #7
 80025a6:	4922      	ldr	r1, [pc, #136]	; (8002630 <HAL_RCC_ClockConfig+0x1c0>)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ae:	4b20      	ldr	r3, [pc, #128]	; (8002630 <HAL_RCC_ClockConfig+0x1c0>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d001      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e032      	b.n	8002626 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d008      	beq.n	80025de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025cc:	4b19      	ldr	r3, [pc, #100]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	4916      	ldr	r1, [pc, #88]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d009      	beq.n	80025fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025ea:	4b12      	ldr	r3, [pc, #72]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	490e      	ldr	r1, [pc, #56]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025fe:	f000 f821 	bl	8002644 <HAL_RCC_GetSysClockFreq>
 8002602:	4602      	mov	r2, r0
 8002604:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	091b      	lsrs	r3, r3, #4
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	490a      	ldr	r1, [pc, #40]	; (8002638 <HAL_RCC_ClockConfig+0x1c8>)
 8002610:	5ccb      	ldrb	r3, [r1, r3]
 8002612:	fa22 f303 	lsr.w	r3, r2, r3
 8002616:	4a09      	ldr	r2, [pc, #36]	; (800263c <HAL_RCC_ClockConfig+0x1cc>)
 8002618:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800261a:	4b09      	ldr	r3, [pc, #36]	; (8002640 <HAL_RCC_ClockConfig+0x1d0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff f8da 	bl	80017d8 <HAL_InitTick>

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40022000 	.word	0x40022000
 8002634:	40021000 	.word	0x40021000
 8002638:	080054c4 	.word	0x080054c4
 800263c:	20000000 	.word	0x20000000
 8002640:	20000004 	.word	0x20000004

08002644 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002644:	b490      	push	{r4, r7}
 8002646:	b08a      	sub	sp, #40	; 0x28
 8002648:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800264a:	4b29      	ldr	r3, [pc, #164]	; (80026f0 <HAL_RCC_GetSysClockFreq+0xac>)
 800264c:	1d3c      	adds	r4, r7, #4
 800264e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002650:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002654:	f240 2301 	movw	r3, #513	; 0x201
 8002658:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800265a:	2300      	movs	r3, #0
 800265c:	61fb      	str	r3, [r7, #28]
 800265e:	2300      	movs	r3, #0
 8002660:	61bb      	str	r3, [r7, #24]
 8002662:	2300      	movs	r3, #0
 8002664:	627b      	str	r3, [r7, #36]	; 0x24
 8002666:	2300      	movs	r3, #0
 8002668:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800266a:	2300      	movs	r3, #0
 800266c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800266e:	4b21      	ldr	r3, [pc, #132]	; (80026f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f003 030c 	and.w	r3, r3, #12
 800267a:	2b04      	cmp	r3, #4
 800267c:	d002      	beq.n	8002684 <HAL_RCC_GetSysClockFreq+0x40>
 800267e:	2b08      	cmp	r3, #8
 8002680:	d003      	beq.n	800268a <HAL_RCC_GetSysClockFreq+0x46>
 8002682:	e02b      	b.n	80026dc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002684:	4b1c      	ldr	r3, [pc, #112]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002686:	623b      	str	r3, [r7, #32]
      break;
 8002688:	e02b      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	0c9b      	lsrs	r3, r3, #18
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	3328      	adds	r3, #40	; 0x28
 8002694:	443b      	add	r3, r7
 8002696:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800269a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d012      	beq.n	80026cc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026a6:	4b13      	ldr	r3, [pc, #76]	; (80026f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	0c5b      	lsrs	r3, r3, #17
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	3328      	adds	r3, #40	; 0x28
 80026b2:	443b      	add	r3, r7
 80026b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80026b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	4a0e      	ldr	r2, [pc, #56]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026be:	fb03 f202 	mul.w	r2, r3, r2
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
 80026ca:	e004      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	4a0b      	ldr	r2, [pc, #44]	; (80026fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80026d0:	fb02 f303 	mul.w	r3, r2, r3
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	623b      	str	r3, [r7, #32]
      break;
 80026da:	e002      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026de:	623b      	str	r3, [r7, #32]
      break;
 80026e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026e2:	6a3b      	ldr	r3, [r7, #32]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3728      	adds	r7, #40	; 0x28
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc90      	pop	{r4, r7}
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	080054b4 	.word	0x080054b4
 80026f4:	40021000 	.word	0x40021000
 80026f8:	007a1200 	.word	0x007a1200
 80026fc:	003d0900 	.word	0x003d0900

08002700 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002704:	4b02      	ldr	r3, [pc, #8]	; (8002710 <HAL_RCC_GetHCLKFreq+0x10>)
 8002706:	681b      	ldr	r3, [r3, #0]
}
 8002708:	4618      	mov	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr
 8002710:	20000000 	.word	0x20000000

08002714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002718:	f7ff fff2 	bl	8002700 <HAL_RCC_GetHCLKFreq>
 800271c:	4602      	mov	r2, r0
 800271e:	4b05      	ldr	r3, [pc, #20]	; (8002734 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	0a1b      	lsrs	r3, r3, #8
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	4903      	ldr	r1, [pc, #12]	; (8002738 <HAL_RCC_GetPCLK1Freq+0x24>)
 800272a:	5ccb      	ldrb	r3, [r1, r3]
 800272c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002730:	4618      	mov	r0, r3
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40021000 	.word	0x40021000
 8002738:	080054d4 	.word	0x080054d4

0800273c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002740:	f7ff ffde 	bl	8002700 <HAL_RCC_GetHCLKFreq>
 8002744:	4602      	mov	r2, r0
 8002746:	4b05      	ldr	r3, [pc, #20]	; (800275c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	0adb      	lsrs	r3, r3, #11
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	4903      	ldr	r1, [pc, #12]	; (8002760 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002752:	5ccb      	ldrb	r3, [r1, r3]
 8002754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002758:	4618      	mov	r0, r3
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40021000 	.word	0x40021000
 8002760:	080054d4 	.word	0x080054d4

08002764 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800276c:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <RCC_Delay+0x34>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a0a      	ldr	r2, [pc, #40]	; (800279c <RCC_Delay+0x38>)
 8002772:	fba2 2303 	umull	r2, r3, r2, r3
 8002776:	0a5b      	lsrs	r3, r3, #9
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	fb02 f303 	mul.w	r3, r2, r3
 800277e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002780:	bf00      	nop
  }
  while (Delay --);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	1e5a      	subs	r2, r3, #1
 8002786:	60fa      	str	r2, [r7, #12]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1f9      	bne.n	8002780 <RCC_Delay+0x1c>
}
 800278c:	bf00      	nop
 800278e:	bf00      	nop
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr
 8002798:	20000000 	.word	0x20000000
 800279c:	10624dd3 	.word	0x10624dd3

080027a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e076      	b.n	80028a0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d108      	bne.n	80027cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027c2:	d009      	beq.n	80027d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	61da      	str	r2, [r3, #28]
 80027ca:	e005      	b.n	80027d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d106      	bne.n	80027f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7fe fea8 	bl	8001548 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2202      	movs	r2, #2
 80027fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800280e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002820:	431a      	orrs	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	431a      	orrs	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002848:	431a      	orrs	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285c:	ea42 0103 	orr.w	r1, r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002864:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	0c1a      	lsrs	r2, r3, #16
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f002 0204 	and.w	r2, r2, #4
 800287e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	69da      	ldr	r2, [r3, #28]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800288e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b088      	sub	sp, #32
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	603b      	str	r3, [r7, #0]
 80028b4:	4613      	mov	r3, r2
 80028b6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028b8:	2300      	movs	r3, #0
 80028ba:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_SPI_Transmit+0x22>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e126      	b.n	8002b18 <HAL_SPI_Transmit+0x270>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028d2:	f7fe ffc3 	bl	800185c <HAL_GetTick>
 80028d6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80028d8:	88fb      	ldrh	r3, [r7, #6]
 80028da:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d002      	beq.n	80028ee <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80028e8:	2302      	movs	r3, #2
 80028ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80028ec:	e10b      	b.n	8002b06 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d002      	beq.n	80028fa <HAL_SPI_Transmit+0x52>
 80028f4:	88fb      	ldrh	r3, [r7, #6]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d102      	bne.n	8002900 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80028fe:	e102      	b.n	8002b06 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2203      	movs	r2, #3
 8002904:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	88fa      	ldrh	r2, [r7, #6]
 8002918:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	88fa      	ldrh	r2, [r7, #6]
 800291e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002946:	d10f      	bne.n	8002968 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002956:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002966:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002972:	2b40      	cmp	r3, #64	; 0x40
 8002974:	d007      	beq.n	8002986 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002984:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800298e:	d14b      	bne.n	8002a28 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d002      	beq.n	800299e <HAL_SPI_Transmit+0xf6>
 8002998:	8afb      	ldrh	r3, [r7, #22]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d13e      	bne.n	8002a1c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	881a      	ldrh	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	1c9a      	adds	r2, r3, #2
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	3b01      	subs	r3, #1
 80029bc:	b29a      	uxth	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80029c2:	e02b      	b.n	8002a1c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d112      	bne.n	80029f8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	881a      	ldrh	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	1c9a      	adds	r2, r3, #2
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	86da      	strh	r2, [r3, #54]	; 0x36
 80029f6:	e011      	b.n	8002a1c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029f8:	f7fe ff30 	bl	800185c <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d803      	bhi.n	8002a10 <HAL_SPI_Transmit+0x168>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0e:	d102      	bne.n	8002a16 <HAL_SPI_Transmit+0x16e>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d102      	bne.n	8002a1c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a1a:	e074      	b.n	8002b06 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1ce      	bne.n	80029c4 <HAL_SPI_Transmit+0x11c>
 8002a26:	e04c      	b.n	8002ac2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d002      	beq.n	8002a36 <HAL_SPI_Transmit+0x18e>
 8002a30:	8afb      	ldrh	r3, [r7, #22]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d140      	bne.n	8002ab8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	330c      	adds	r3, #12
 8002a40:	7812      	ldrb	r2, [r2, #0]
 8002a42:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002a5c:	e02c      	b.n	8002ab8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d113      	bne.n	8002a94 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	330c      	adds	r3, #12
 8002a76:	7812      	ldrb	r2, [r2, #0]
 8002a78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	1c5a      	adds	r2, r3, #1
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a92:	e011      	b.n	8002ab8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a94:	f7fe fee2 	bl	800185c <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d803      	bhi.n	8002aac <HAL_SPI_Transmit+0x204>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aaa:	d102      	bne.n	8002ab2 <HAL_SPI_Transmit+0x20a>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d102      	bne.n	8002ab8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ab6:	e026      	b.n	8002b06 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1cd      	bne.n	8002a5e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	6839      	ldr	r1, [r7, #0]
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 fbb8 	bl	800323c <SPI_EndRxTxTransaction>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d002      	beq.n	8002ad8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10a      	bne.n	8002af6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	613b      	str	r3, [r7, #16]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	613b      	str	r3, [r7, #16]
 8002af4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	77fb      	strb	r3, [r7, #31]
 8002b02:	e000      	b.n	8002b06 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002b04:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b16:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3720      	adds	r7, #32
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b088      	sub	sp, #32
 8002b24:	af02      	add	r7, sp, #8
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	603b      	str	r3, [r7, #0]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b30:	2300      	movs	r3, #0
 8002b32:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b3c:	d112      	bne.n	8002b64 <HAL_SPI_Receive+0x44>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10e      	bne.n	8002b64 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2204      	movs	r2, #4
 8002b4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002b4e:	88fa      	ldrh	r2, [r7, #6]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	4613      	mov	r3, r2
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 f8f1 	bl	8002d42 <HAL_SPI_TransmitReceive>
 8002b60:	4603      	mov	r3, r0
 8002b62:	e0ea      	b.n	8002d3a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d101      	bne.n	8002b72 <HAL_SPI_Receive+0x52>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e0e3      	b.n	8002d3a <HAL_SPI_Receive+0x21a>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b7a:	f7fe fe6f 	bl	800185c <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d002      	beq.n	8002b92 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b90:	e0ca      	b.n	8002d28 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d002      	beq.n	8002b9e <HAL_SPI_Receive+0x7e>
 8002b98:	88fb      	ldrh	r3, [r7, #6]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d102      	bne.n	8002ba4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ba2:	e0c1      	b.n	8002d28 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2204      	movs	r2, #4
 8002ba8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	88fa      	ldrh	r2, [r7, #6]
 8002bbc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	88fa      	ldrh	r2, [r7, #6]
 8002bc2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bea:	d10f      	bne.n	8002c0c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bfa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c0a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c16:	2b40      	cmp	r3, #64	; 0x40
 8002c18:	d007      	beq.n	8002c2a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c28:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d162      	bne.n	8002cf8 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002c32:	e02e      	b.n	8002c92 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d115      	bne.n	8002c6e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f103 020c 	add.w	r2, r3, #12
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4e:	7812      	ldrb	r2, [r2, #0]
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c58:	1c5a      	adds	r2, r3, #1
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c6c:	e011      	b.n	8002c92 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c6e:	f7fe fdf5 	bl	800185c <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d803      	bhi.n	8002c86 <HAL_SPI_Receive+0x166>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c84:	d102      	bne.n	8002c8c <HAL_SPI_Receive+0x16c>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d102      	bne.n	8002c92 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002c90:	e04a      	b.n	8002d28 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1cb      	bne.n	8002c34 <HAL_SPI_Receive+0x114>
 8002c9c:	e031      	b.n	8002d02 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d113      	bne.n	8002cd4 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb6:	b292      	uxth	r2, r2
 8002cb8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbe:	1c9a      	adds	r2, r3, #2
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cd2:	e011      	b.n	8002cf8 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cd4:	f7fe fdc2 	bl	800185c <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d803      	bhi.n	8002cec <HAL_SPI_Receive+0x1cc>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cea:	d102      	bne.n	8002cf2 <HAL_SPI_Receive+0x1d2>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d102      	bne.n	8002cf8 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002cf6:	e017      	b.n	8002d28 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1cd      	bne.n	8002c9e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	6839      	ldr	r1, [r7, #0]
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 fa46 	bl	8003198 <SPI_EndRxTransaction>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2220      	movs	r2, #32
 8002d16:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d002      	beq.n	8002d26 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	75fb      	strb	r3, [r7, #23]
 8002d24:	e000      	b.n	8002d28 <HAL_SPI_Receive+0x208>
  }

error :
 8002d26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b08c      	sub	sp, #48	; 0x30
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	60f8      	str	r0, [r7, #12]
 8002d4a:	60b9      	str	r1, [r7, #8]
 8002d4c:	607a      	str	r2, [r7, #4]
 8002d4e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d50:	2301      	movs	r3, #1
 8002d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <HAL_SPI_TransmitReceive+0x26>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e18a      	b.n	800307e <HAL_SPI_TransmitReceive+0x33c>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d70:	f7fe fd74 	bl	800185c <HAL_GetTick>
 8002d74:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002d86:	887b      	ldrh	r3, [r7, #2]
 8002d88:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d00f      	beq.n	8002db2 <HAL_SPI_TransmitReceive+0x70>
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d98:	d107      	bne.n	8002daa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d103      	bne.n	8002daa <HAL_SPI_TransmitReceive+0x68>
 8002da2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d003      	beq.n	8002db2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002daa:	2302      	movs	r3, #2
 8002dac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002db0:	e15b      	b.n	800306a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <HAL_SPI_TransmitReceive+0x82>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d002      	beq.n	8002dc4 <HAL_SPI_TransmitReceive+0x82>
 8002dbe:	887b      	ldrh	r3, [r7, #2]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d103      	bne.n	8002dcc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002dca:	e14e      	b.n	800306a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d003      	beq.n	8002de0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2205      	movs	r2, #5
 8002ddc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	887a      	ldrh	r2, [r7, #2]
 8002df0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	887a      	ldrh	r2, [r7, #2]
 8002df6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	887a      	ldrh	r2, [r7, #2]
 8002e02:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	887a      	ldrh	r2, [r7, #2]
 8002e08:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e20:	2b40      	cmp	r3, #64	; 0x40
 8002e22:	d007      	beq.n	8002e34 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e3c:	d178      	bne.n	8002f30 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d002      	beq.n	8002e4c <HAL_SPI_TransmitReceive+0x10a>
 8002e46:	8b7b      	ldrh	r3, [r7, #26]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d166      	bne.n	8002f1a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e50:	881a      	ldrh	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5c:	1c9a      	adds	r2, r3, #2
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e70:	e053      	b.n	8002f1a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d11b      	bne.n	8002eb8 <HAL_SPI_TransmitReceive+0x176>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d016      	beq.n	8002eb8 <HAL_SPI_TransmitReceive+0x176>
 8002e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d113      	bne.n	8002eb8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e94:	881a      	ldrh	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea0:	1c9a      	adds	r2, r3, #2
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d119      	bne.n	8002efa <HAL_SPI_TransmitReceive+0x1b8>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d014      	beq.n	8002efa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68da      	ldr	r2, [r3, #12]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eda:	b292      	uxth	r2, r2
 8002edc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee2:	1c9a      	adds	r2, r3, #2
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002efa:	f7fe fcaf 	bl	800185c <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d807      	bhi.n	8002f1a <HAL_SPI_TransmitReceive+0x1d8>
 8002f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f10:	d003      	beq.n	8002f1a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002f18:	e0a7      	b.n	800306a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1a6      	bne.n	8002e72 <HAL_SPI_TransmitReceive+0x130>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1a1      	bne.n	8002e72 <HAL_SPI_TransmitReceive+0x130>
 8002f2e:	e07c      	b.n	800302a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d002      	beq.n	8002f3e <HAL_SPI_TransmitReceive+0x1fc>
 8002f38:	8b7b      	ldrh	r3, [r7, #26]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d16b      	bne.n	8003016 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	330c      	adds	r3, #12
 8002f48:	7812      	ldrb	r2, [r2, #0]
 8002f4a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f64:	e057      	b.n	8003016 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d11c      	bne.n	8002fae <HAL_SPI_TransmitReceive+0x26c>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d017      	beq.n	8002fae <HAL_SPI_TransmitReceive+0x26c>
 8002f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d114      	bne.n	8002fae <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	330c      	adds	r3, #12
 8002f8e:	7812      	ldrb	r2, [r2, #0]
 8002f90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	1c5a      	adds	r2, r3, #1
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d119      	bne.n	8002ff0 <HAL_SPI_TransmitReceive+0x2ae>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d014      	beq.n	8002ff0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fec:	2301      	movs	r3, #1
 8002fee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ff0:	f7fe fc34 	bl	800185c <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d803      	bhi.n	8003008 <HAL_SPI_TransmitReceive+0x2c6>
 8003000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003006:	d102      	bne.n	800300e <HAL_SPI_TransmitReceive+0x2cc>
 8003008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800300a:	2b00      	cmp	r3, #0
 800300c:	d103      	bne.n	8003016 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003014:	e029      	b.n	800306a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800301a:	b29b      	uxth	r3, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1a2      	bne.n	8002f66 <HAL_SPI_TransmitReceive+0x224>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003024:	b29b      	uxth	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d19d      	bne.n	8002f66 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800302a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800302c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 f904 	bl	800323c <SPI_EndRxTxTransaction>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d006      	beq.n	8003048 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2220      	movs	r2, #32
 8003044:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003046:	e010      	b.n	800306a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10b      	bne.n	8003068 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003050:	2300      	movs	r3, #0
 8003052:	617b      	str	r3, [r7, #20]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	617b      	str	r3, [r7, #20]
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	e000      	b.n	800306a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003068:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800307a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800307e:	4618      	mov	r0, r3
 8003080:	3730      	adds	r7, #48	; 0x30
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
	...

08003088 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b088      	sub	sp, #32
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	603b      	str	r3, [r7, #0]
 8003094:	4613      	mov	r3, r2
 8003096:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003098:	f7fe fbe0 	bl	800185c <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a0:	1a9b      	subs	r3, r3, r2
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	4413      	add	r3, r2
 80030a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80030a8:	f7fe fbd8 	bl	800185c <HAL_GetTick>
 80030ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80030ae:	4b39      	ldr	r3, [pc, #228]	; (8003194 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	015b      	lsls	r3, r3, #5
 80030b4:	0d1b      	lsrs	r3, r3, #20
 80030b6:	69fa      	ldr	r2, [r7, #28]
 80030b8:	fb02 f303 	mul.w	r3, r2, r3
 80030bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030be:	e054      	b.n	800316a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c6:	d050      	beq.n	800316a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030c8:	f7fe fbc8 	bl	800185c <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	69fa      	ldr	r2, [r7, #28]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d902      	bls.n	80030de <SPI_WaitFlagStateUntilTimeout+0x56>
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d13d      	bne.n	800315a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80030ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030f6:	d111      	bne.n	800311c <SPI_WaitFlagStateUntilTimeout+0x94>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003100:	d004      	beq.n	800310c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800310a:	d107      	bne.n	800311c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800311a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003120:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003124:	d10f      	bne.n	8003146 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003144:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e017      	b.n	800318a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	3b01      	subs	r3, #1
 8003168:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	4013      	ands	r3, r2
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	429a      	cmp	r2, r3
 8003178:	bf0c      	ite	eq
 800317a:	2301      	moveq	r3, #1
 800317c:	2300      	movne	r3, #0
 800317e:	b2db      	uxtb	r3, r3
 8003180:	461a      	mov	r2, r3
 8003182:	79fb      	ldrb	r3, [r7, #7]
 8003184:	429a      	cmp	r2, r3
 8003186:	d19b      	bne.n	80030c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3720      	adds	r7, #32
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20000000 	.word	0x20000000

08003198 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af02      	add	r7, sp, #8
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031ac:	d111      	bne.n	80031d2 <SPI_EndRxTransaction+0x3a>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031b6:	d004      	beq.n	80031c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c0:	d107      	bne.n	80031d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031d0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031da:	d117      	bne.n	800320c <SPI_EndRxTransaction+0x74>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031e4:	d112      	bne.n	800320c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2200      	movs	r2, #0
 80031ee:	2101      	movs	r1, #1
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f7ff ff49 	bl	8003088 <SPI_WaitFlagStateUntilTimeout>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d01a      	beq.n	8003232 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003200:	f043 0220 	orr.w	r2, r3, #32
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e013      	b.n	8003234 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	2200      	movs	r2, #0
 8003214:	2180      	movs	r1, #128	; 0x80
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f7ff ff36 	bl	8003088 <SPI_WaitFlagStateUntilTimeout>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d007      	beq.n	8003232 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003226:	f043 0220 	orr.w	r2, r3, #32
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e000      	b.n	8003234 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af02      	add	r7, sp, #8
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	2200      	movs	r2, #0
 8003250:	2180      	movs	r1, #128	; 0x80
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f7ff ff18 	bl	8003088 <SPI_WaitFlagStateUntilTimeout>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d007      	beq.n	800326e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003262:	f043 0220 	orr.w	r2, r3, #32
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e000      	b.n	8003270 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e03f      	b.n	800330a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d106      	bne.n	80032a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7fe f99c 	bl	80015dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2224      	movs	r2, #36	; 0x24
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68da      	ldr	r2, [r3, #12]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 fca1 	bl	8003c04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	691a      	ldr	r2, [r3, #16]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	695a      	ldr	r2, [r3, #20]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2220      	movs	r2, #32
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2220      	movs	r2, #32
 8003304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b08a      	sub	sp, #40	; 0x28
 8003316:	af02      	add	r7, sp, #8
 8003318:	60f8      	str	r0, [r7, #12]
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	603b      	str	r3, [r7, #0]
 800331e:	4613      	mov	r3, r2
 8003320:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003322:	2300      	movs	r3, #0
 8003324:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b20      	cmp	r3, #32
 8003330:	d17c      	bne.n	800342c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <HAL_UART_Transmit+0x2c>
 8003338:	88fb      	ldrh	r3, [r7, #6]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e075      	b.n	800342e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <HAL_UART_Transmit+0x3e>
 800334c:	2302      	movs	r3, #2
 800334e:	e06e      	b.n	800342e <HAL_UART_Transmit+0x11c>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2221      	movs	r2, #33	; 0x21
 8003362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003366:	f7fe fa79 	bl	800185c <HAL_GetTick>
 800336a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	88fa      	ldrh	r2, [r7, #6]
 8003370:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	88fa      	ldrh	r2, [r7, #6]
 8003376:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003380:	d108      	bne.n	8003394 <HAL_UART_Transmit+0x82>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d104      	bne.n	8003394 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800338a:	2300      	movs	r3, #0
 800338c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	61bb      	str	r3, [r7, #24]
 8003392:	e003      	b.n	800339c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003398:	2300      	movs	r3, #0
 800339a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80033a4:	e02a      	b.n	80033fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	2200      	movs	r2, #0
 80033ae:	2180      	movs	r1, #128	; 0x80
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 fa54 	bl	800385e <UART_WaitOnFlagUntilTimeout>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e036      	b.n	800342e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10b      	bne.n	80033de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	881b      	ldrh	r3, [r3, #0]
 80033ca:	461a      	mov	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	3302      	adds	r3, #2
 80033da:	61bb      	str	r3, [r7, #24]
 80033dc:	e007      	b.n	80033ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	781a      	ldrb	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	3301      	adds	r3, #1
 80033ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003400:	b29b      	uxth	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1cf      	bne.n	80033a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	2200      	movs	r2, #0
 800340e:	2140      	movs	r1, #64	; 0x40
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f000 fa24 	bl	800385e <UART_WaitOnFlagUntilTimeout>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e006      	b.n	800342e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003428:	2300      	movs	r3, #0
 800342a:	e000      	b.n	800342e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800342c:	2302      	movs	r3, #2
  }
}
 800342e:	4618      	mov	r0, r3
 8003430:	3720      	adds	r7, #32
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b086      	sub	sp, #24
 800343a:	af00      	add	r7, sp, #0
 800343c:	60f8      	str	r0, [r7, #12]
 800343e:	60b9      	str	r1, [r7, #8]
 8003440:	4613      	mov	r3, r2
 8003442:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b20      	cmp	r3, #32
 800344e:	d13c      	bne.n	80034ca <HAL_UARTEx_ReceiveToIdle_IT+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8003456:	88fb      	ldrh	r3, [r7, #6]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e035      	b.n	80034cc <HAL_UARTEx_ReceiveToIdle_IT+0x96>
    }

    __HAL_LOCK(huart);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003466:	2b01      	cmp	r3, #1
 8003468:	d101      	bne.n	800346e <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 800346a:	2302      	movs	r3, #2
 800346c:	e02e      	b.n	80034cc <HAL_UARTEx_ReceiveToIdle_IT+0x96>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2201      	movs	r2, #1
 800347a:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800347c:	88fb      	ldrh	r3, [r7, #6]
 800347e:	461a      	mov	r2, r3
 8003480:	68b9      	ldr	r1, [r7, #8]
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 fa35 	bl	80038f2 <UART_Start_Receive_IT>
 8003488:	4603      	mov	r3, r0
 800348a:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800348c:	7dfb      	ldrb	r3, [r7, #23]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d119      	bne.n	80034c6 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	2b01      	cmp	r3, #1
 8003498:	d113      	bne.n	80034c2 <HAL_UARTEx_ReceiveToIdle_IT+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800349a:	2300      	movs	r3, #0
 800349c:	613b      	str	r3, [r7, #16]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	613b      	str	r3, [r7, #16]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	613b      	str	r3, [r7, #16]
 80034ae:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68da      	ldr	r2, [r3, #12]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0210 	orr.w	r2, r2, #16
 80034be:	60da      	str	r2, [r3, #12]
 80034c0:	e001      	b.n	80034c6 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 80034c6:	7dfb      	ldrb	r3, [r7, #23]
 80034c8:	e000      	b.n	80034cc <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  }
  else
  {
    return HAL_BUSY;
 80034ca:	2302      	movs	r3, #2
  }
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08a      	sub	sp, #40	; 0x28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10d      	bne.n	8003526 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	f003 0320 	and.w	r3, r3, #32
 8003510:	2b00      	cmp	r3, #0
 8003512:	d008      	beq.n	8003526 <HAL_UART_IRQHandler+0x52>
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	f003 0320 	and.w	r3, r3, #32
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fac7 	bl	8003ab2 <UART_Receive_IT>
      return;
 8003524:	e17b      	b.n	800381e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 80b1 	beq.w	8003690 <HAL_UART_IRQHandler+0x1bc>
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b00      	cmp	r3, #0
 8003536:	d105      	bne.n	8003544 <HAL_UART_IRQHandler+0x70>
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 80a6 	beq.w	8003690 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <HAL_UART_IRQHandler+0x90>
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003554:	2b00      	cmp	r3, #0
 8003556:	d005      	beq.n	8003564 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	f043 0201 	orr.w	r2, r3, #1
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	f003 0304 	and.w	r3, r3, #4
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <HAL_UART_IRQHandler+0xb0>
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	d005      	beq.n	8003584 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	f043 0202 	orr.w	r2, r3, #2
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00a      	beq.n	80035a4 <HAL_UART_IRQHandler+0xd0>
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b00      	cmp	r3, #0
 8003596:	d005      	beq.n	80035a4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	f043 0204 	orr.w	r2, r3, #4
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00f      	beq.n	80035ce <HAL_UART_IRQHandler+0xfa>
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	f003 0320 	and.w	r3, r3, #32
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d104      	bne.n	80035c2 <HAL_UART_IRQHandler+0xee>
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d005      	beq.n	80035ce <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	f043 0208 	orr.w	r2, r3, #8
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 811e 	beq.w	8003814 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	f003 0320 	and.w	r3, r3, #32
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d007      	beq.n	80035f2 <HAL_UART_IRQHandler+0x11e>
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	f003 0320 	and.w	r3, r3, #32
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d002      	beq.n	80035f2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 fa60 	bl	8003ab2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	bf14      	ite	ne
 8003600:	2301      	movne	r3, #1
 8003602:	2300      	moveq	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b00      	cmp	r3, #0
 8003612:	d102      	bne.n	800361a <HAL_UART_IRQHandler+0x146>
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d031      	beq.n	800367e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f9a2 	bl	8003964 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362a:	2b00      	cmp	r3, #0
 800362c:	d023      	beq.n	8003676 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695a      	ldr	r2, [r3, #20]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800363c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003642:	2b00      	cmp	r3, #0
 8003644:	d013      	beq.n	800366e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364a:	4a76      	ldr	r2, [pc, #472]	; (8003824 <HAL_UART_IRQHandler+0x350>)
 800364c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003652:	4618      	mov	r0, r3
 8003654:	f7fe fa78 	bl	8001b48 <HAL_DMA_Abort_IT>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d016      	beq.n	800368c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003668:	4610      	mov	r0, r2
 800366a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800366c:	e00e      	b.n	800368c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f8ec 	bl	800384c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003674:	e00a      	b.n	800368c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f8e8 	bl	800384c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800367c:	e006      	b.n	800368c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f8e4 	bl	800384c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800368a:	e0c3      	b.n	8003814 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800368c:	bf00      	nop
    return;
 800368e:	e0c1      	b.n	8003814 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003694:	2b01      	cmp	r3, #1
 8003696:	f040 80a1 	bne.w	80037dc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	f003 0310 	and.w	r3, r3, #16
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 809b 	beq.w	80037dc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	f003 0310 	and.w	r3, r3, #16
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 8095 	beq.w	80037dc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036b2:	2300      	movs	r3, #0
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d04e      	beq.n	8003774 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80036e0:	8a3b      	ldrh	r3, [r7, #16]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 8098 	beq.w	8003818 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80036ec:	8a3a      	ldrh	r2, [r7, #16]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	f080 8092 	bcs.w	8003818 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	8a3a      	ldrh	r2, [r7, #16]
 80036f8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	2b20      	cmp	r3, #32
 8003702:	d02b      	beq.n	800375c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68da      	ldr	r2, [r3, #12]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003712:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695a      	ldr	r2, [r3, #20]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0201 	bic.w	r2, r2, #1
 8003722:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	695a      	ldr	r2, [r3, #20]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003732:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2220      	movs	r2, #32
 8003738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68da      	ldr	r2, [r3, #12]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0210 	bic.w	r2, r2, #16
 8003750:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003756:	4618      	mov	r0, r3
 8003758:	f7fe f9bb 	bl	8001ad2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003764:	b29b      	uxth	r3, r3
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	b29b      	uxth	r3, r3
 800376a:	4619      	mov	r1, r3
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7fd fcff 	bl	8001170 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003772:	e051      	b.n	8003818 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800377c:	b29b      	uxth	r3, r3
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003786:	b29b      	uxth	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	d047      	beq.n	800381c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800378c:	8a7b      	ldrh	r3, [r7, #18]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d044      	beq.n	800381c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68da      	ldr	r2, [r3, #12]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80037a0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	695a      	ldr	r2, [r3, #20]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 0201 	bic.w	r2, r2, #1
 80037b0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2220      	movs	r2, #32
 80037b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68da      	ldr	r2, [r3, #12]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0210 	bic.w	r2, r2, #16
 80037ce:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037d0:	8a7b      	ldrh	r3, [r7, #18]
 80037d2:	4619      	mov	r1, r3
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7fd fccb 	bl	8001170 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80037da:	e01f      	b.n	800381c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d008      	beq.n	80037f8 <HAL_UART_IRQHandler+0x324>
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f8f7 	bl	80039e4 <UART_Transmit_IT>
    return;
 80037f6:	e012      	b.n	800381e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00d      	beq.n	800381e <HAL_UART_IRQHandler+0x34a>
 8003802:	6a3b      	ldr	r3, [r7, #32]
 8003804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f938 	bl	8003a82 <UART_EndTransmit_IT>
    return;
 8003812:	e004      	b.n	800381e <HAL_UART_IRQHandler+0x34a>
    return;
 8003814:	bf00      	nop
 8003816:	e002      	b.n	800381e <HAL_UART_IRQHandler+0x34a>
      return;
 8003818:	bf00      	nop
 800381a:	e000      	b.n	800381e <HAL_UART_IRQHandler+0x34a>
      return;
 800381c:	bf00      	nop
  }
}
 800381e:	3728      	adds	r7, #40	; 0x28
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	080039bd 	.word	0x080039bd

08003828 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	bc80      	pop	{r7}
 8003838:	4770      	bx	lr

0800383a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	bc80      	pop	{r7}
 800384a:	4770      	bx	lr

0800384c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	bc80      	pop	{r7}
 800385c:	4770      	bx	lr

0800385e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b084      	sub	sp, #16
 8003862:	af00      	add	r7, sp, #0
 8003864:	60f8      	str	r0, [r7, #12]
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	603b      	str	r3, [r7, #0]
 800386a:	4613      	mov	r3, r2
 800386c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800386e:	e02c      	b.n	80038ca <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003876:	d028      	beq.n	80038ca <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d007      	beq.n	800388e <UART_WaitOnFlagUntilTimeout+0x30>
 800387e:	f7fd ffed 	bl	800185c <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	429a      	cmp	r2, r3
 800388c:	d21d      	bcs.n	80038ca <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800389c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695a      	ldr	r2, [r3, #20]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0201 	bic.w	r2, r2, #1
 80038ac:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e00f      	b.n	80038ea <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	4013      	ands	r3, r2
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	bf0c      	ite	eq
 80038da:	2301      	moveq	r3, #1
 80038dc:	2300      	movne	r3, #0
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	461a      	mov	r2, r3
 80038e2:	79fb      	ldrb	r3, [r7, #7]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d0c3      	beq.n	8003870 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b085      	sub	sp, #20
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	60f8      	str	r0, [r7, #12]
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	4613      	mov	r3, r2
 80038fe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	88fa      	ldrh	r2, [r7, #6]
 800390a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	88fa      	ldrh	r2, [r7, #6]
 8003910:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2222      	movs	r2, #34	; 0x22
 800391c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68da      	ldr	r2, [r3, #12]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003936:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	695a      	ldr	r2, [r3, #20]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0201 	orr.w	r2, r2, #1
 8003946:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0220 	orr.w	r2, r2, #32
 8003956:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	bc80      	pop	{r7}
 8003962:	4770      	bx	lr

08003964 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800397a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	695a      	ldr	r2, [r3, #20]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0201 	bic.w	r2, r2, #1
 800398a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003990:	2b01      	cmp	r3, #1
 8003992:	d107      	bne.n	80039a4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68da      	ldr	r2, [r3, #12]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0210 	bic.w	r2, r2, #16
 80039a2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bc80      	pop	{r7}
 80039ba:	4770      	bx	lr

080039bc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f7ff ff38 	bl	800384c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039dc:	bf00      	nop
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b21      	cmp	r3, #33	; 0x21
 80039f6:	d13e      	bne.n	8003a76 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a00:	d114      	bne.n	8003a2c <UART_Transmit_IT+0x48>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d110      	bne.n	8003a2c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	881b      	ldrh	r3, [r3, #0]
 8003a14:	461a      	mov	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a1e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	1c9a      	adds	r2, r3, #2
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	621a      	str	r2, [r3, #32]
 8003a2a:	e008      	b.n	8003a3e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	1c59      	adds	r1, r3, #1
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6211      	str	r1, [r2, #32]
 8003a36:	781a      	ldrb	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	3b01      	subs	r3, #1
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10f      	bne.n	8003a72 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68da      	ldr	r2, [r3, #12]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a60:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68da      	ldr	r2, [r3, #12]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a70:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a72:	2300      	movs	r3, #0
 8003a74:	e000      	b.n	8003a78 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a76:	2302      	movs	r3, #2
  }
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bc80      	pop	{r7}
 8003a80:	4770      	bx	lr

08003a82 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b082      	sub	sp, #8
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68da      	ldr	r2, [r3, #12]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7ff fec0 	bl	8003828 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b086      	sub	sp, #24
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b22      	cmp	r3, #34	; 0x22
 8003ac4:	f040 8099 	bne.w	8003bfa <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad0:	d117      	bne.n	8003b02 <UART_Receive_IT+0x50>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d113      	bne.n	8003b02 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afa:	1c9a      	adds	r2, r3, #2
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	629a      	str	r2, [r3, #40]	; 0x28
 8003b00:	e026      	b.n	8003b50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b06:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b14:	d007      	beq.n	8003b26 <UART_Receive_IT+0x74>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10a      	bne.n	8003b34 <UART_Receive_IT+0x82>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d106      	bne.n	8003b34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	b2da      	uxtb	r2, r3
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	701a      	strb	r2, [r3, #0]
 8003b32:	e008      	b.n	8003b46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	3b01      	subs	r3, #1
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d148      	bne.n	8003bf6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68da      	ldr	r2, [r3, #12]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0220 	bic.w	r2, r2, #32
 8003b72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68da      	ldr	r2, [r3, #12]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695a      	ldr	r2, [r3, #20]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0201 	bic.w	r2, r2, #1
 8003b92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d123      	bne.n	8003bec <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68da      	ldr	r2, [r3, #12]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0210 	bic.w	r2, r2, #16
 8003bb8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0310 	and.w	r3, r3, #16
 8003bc4:	2b10      	cmp	r3, #16
 8003bc6:	d10a      	bne.n	8003bde <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bc8:	2300      	movs	r3, #0
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003be2:	4619      	mov	r1, r3
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7fd fac3 	bl	8001170 <HAL_UARTEx_RxEventCallback>
 8003bea:	e002      	b.n	8003bf2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff fe24 	bl	800383a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	e002      	b.n	8003bfc <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	e000      	b.n	8003bfc <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003bfa:	2302      	movs	r3, #2
  }
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3718      	adds	r7, #24
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68da      	ldr	r2, [r3, #12]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003c3e:	f023 030c 	bic.w	r3, r3, #12
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6812      	ldr	r2, [r2, #0]
 8003c46:	68b9      	ldr	r1, [r7, #8]
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a2c      	ldr	r2, [pc, #176]	; (8003d18 <UART_SetConfig+0x114>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d103      	bne.n	8003c74 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c6c:	f7fe fd66 	bl	800273c <HAL_RCC_GetPCLK2Freq>
 8003c70:	60f8      	str	r0, [r7, #12]
 8003c72:	e002      	b.n	8003c7a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c74:	f7fe fd4e 	bl	8002714 <HAL_RCC_GetPCLK1Freq>
 8003c78:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	009a      	lsls	r2, r3, #2
 8003c84:	441a      	add	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c90:	4a22      	ldr	r2, [pc, #136]	; (8003d1c <UART_SetConfig+0x118>)
 8003c92:	fba2 2303 	umull	r2, r3, r2, r3
 8003c96:	095b      	lsrs	r3, r3, #5
 8003c98:	0119      	lsls	r1, r3, #4
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	009a      	lsls	r2, r3, #2
 8003ca4:	441a      	add	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cb0:	4b1a      	ldr	r3, [pc, #104]	; (8003d1c <UART_SetConfig+0x118>)
 8003cb2:	fba3 0302 	umull	r0, r3, r3, r2
 8003cb6:	095b      	lsrs	r3, r3, #5
 8003cb8:	2064      	movs	r0, #100	; 0x64
 8003cba:	fb00 f303 	mul.w	r3, r0, r3
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	3332      	adds	r3, #50	; 0x32
 8003cc4:	4a15      	ldr	r2, [pc, #84]	; (8003d1c <UART_SetConfig+0x118>)
 8003cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cd0:	4419      	add	r1, r3
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	009a      	lsls	r2, r3, #2
 8003cdc:	441a      	add	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ce8:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <UART_SetConfig+0x118>)
 8003cea:	fba3 0302 	umull	r0, r3, r3, r2
 8003cee:	095b      	lsrs	r3, r3, #5
 8003cf0:	2064      	movs	r0, #100	; 0x64
 8003cf2:	fb00 f303 	mul.w	r3, r0, r3
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	3332      	adds	r3, #50	; 0x32
 8003cfc:	4a07      	ldr	r2, [pc, #28]	; (8003d1c <UART_SetConfig+0x118>)
 8003cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003d02:	095b      	lsrs	r3, r3, #5
 8003d04:	f003 020f 	and.w	r2, r3, #15
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	440a      	add	r2, r1
 8003d0e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d10:	bf00      	nop
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	40013800 	.word	0x40013800
 8003d1c:	51eb851f 	.word	0x51eb851f

08003d20 <__errno>:
 8003d20:	4b01      	ldr	r3, [pc, #4]	; (8003d28 <__errno+0x8>)
 8003d22:	6818      	ldr	r0, [r3, #0]
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	2000000c 	.word	0x2000000c

08003d2c <__libc_init_array>:
 8003d2c:	b570      	push	{r4, r5, r6, lr}
 8003d2e:	2600      	movs	r6, #0
 8003d30:	4d0c      	ldr	r5, [pc, #48]	; (8003d64 <__libc_init_array+0x38>)
 8003d32:	4c0d      	ldr	r4, [pc, #52]	; (8003d68 <__libc_init_array+0x3c>)
 8003d34:	1b64      	subs	r4, r4, r5
 8003d36:	10a4      	asrs	r4, r4, #2
 8003d38:	42a6      	cmp	r6, r4
 8003d3a:	d109      	bne.n	8003d50 <__libc_init_array+0x24>
 8003d3c:	f001 fba2 	bl	8005484 <_init>
 8003d40:	2600      	movs	r6, #0
 8003d42:	4d0a      	ldr	r5, [pc, #40]	; (8003d6c <__libc_init_array+0x40>)
 8003d44:	4c0a      	ldr	r4, [pc, #40]	; (8003d70 <__libc_init_array+0x44>)
 8003d46:	1b64      	subs	r4, r4, r5
 8003d48:	10a4      	asrs	r4, r4, #2
 8003d4a:	42a6      	cmp	r6, r4
 8003d4c:	d105      	bne.n	8003d5a <__libc_init_array+0x2e>
 8003d4e:	bd70      	pop	{r4, r5, r6, pc}
 8003d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d54:	4798      	blx	r3
 8003d56:	3601      	adds	r6, #1
 8003d58:	e7ee      	b.n	8003d38 <__libc_init_array+0xc>
 8003d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d5e:	4798      	blx	r3
 8003d60:	3601      	adds	r6, #1
 8003d62:	e7f2      	b.n	8003d4a <__libc_init_array+0x1e>
 8003d64:	08005540 	.word	0x08005540
 8003d68:	08005540 	.word	0x08005540
 8003d6c:	08005540 	.word	0x08005540
 8003d70:	08005544 	.word	0x08005544

08003d74 <memset>:
 8003d74:	4603      	mov	r3, r0
 8003d76:	4402      	add	r2, r0
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d100      	bne.n	8003d7e <memset+0xa>
 8003d7c:	4770      	bx	lr
 8003d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d82:	e7f9      	b.n	8003d78 <memset+0x4>

08003d84 <siprintf>:
 8003d84:	b40e      	push	{r1, r2, r3}
 8003d86:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d8a:	b500      	push	{lr}
 8003d8c:	b09c      	sub	sp, #112	; 0x70
 8003d8e:	ab1d      	add	r3, sp, #116	; 0x74
 8003d90:	9002      	str	r0, [sp, #8]
 8003d92:	9006      	str	r0, [sp, #24]
 8003d94:	9107      	str	r1, [sp, #28]
 8003d96:	9104      	str	r1, [sp, #16]
 8003d98:	4808      	ldr	r0, [pc, #32]	; (8003dbc <siprintf+0x38>)
 8003d9a:	4909      	ldr	r1, [pc, #36]	; (8003dc0 <siprintf+0x3c>)
 8003d9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003da0:	9105      	str	r1, [sp, #20]
 8003da2:	6800      	ldr	r0, [r0, #0]
 8003da4:	a902      	add	r1, sp, #8
 8003da6:	9301      	str	r3, [sp, #4]
 8003da8:	f000 f868 	bl	8003e7c <_svfiprintf_r>
 8003dac:	2200      	movs	r2, #0
 8003dae:	9b02      	ldr	r3, [sp, #8]
 8003db0:	701a      	strb	r2, [r3, #0]
 8003db2:	b01c      	add	sp, #112	; 0x70
 8003db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003db8:	b003      	add	sp, #12
 8003dba:	4770      	bx	lr
 8003dbc:	2000000c 	.word	0x2000000c
 8003dc0:	ffff0208 	.word	0xffff0208

08003dc4 <__ssputs_r>:
 8003dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dc8:	688e      	ldr	r6, [r1, #8]
 8003dca:	4682      	mov	sl, r0
 8003dcc:	429e      	cmp	r6, r3
 8003dce:	460c      	mov	r4, r1
 8003dd0:	4690      	mov	r8, r2
 8003dd2:	461f      	mov	r7, r3
 8003dd4:	d838      	bhi.n	8003e48 <__ssputs_r+0x84>
 8003dd6:	898a      	ldrh	r2, [r1, #12]
 8003dd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ddc:	d032      	beq.n	8003e44 <__ssputs_r+0x80>
 8003dde:	6825      	ldr	r5, [r4, #0]
 8003de0:	6909      	ldr	r1, [r1, #16]
 8003de2:	3301      	adds	r3, #1
 8003de4:	eba5 0901 	sub.w	r9, r5, r1
 8003de8:	6965      	ldr	r5, [r4, #20]
 8003dea:	444b      	add	r3, r9
 8003dec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003df0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003df4:	106d      	asrs	r5, r5, #1
 8003df6:	429d      	cmp	r5, r3
 8003df8:	bf38      	it	cc
 8003dfa:	461d      	movcc	r5, r3
 8003dfc:	0553      	lsls	r3, r2, #21
 8003dfe:	d531      	bpl.n	8003e64 <__ssputs_r+0xa0>
 8003e00:	4629      	mov	r1, r5
 8003e02:	f000 fb6f 	bl	80044e4 <_malloc_r>
 8003e06:	4606      	mov	r6, r0
 8003e08:	b950      	cbnz	r0, 8003e20 <__ssputs_r+0x5c>
 8003e0a:	230c      	movs	r3, #12
 8003e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e10:	f8ca 3000 	str.w	r3, [sl]
 8003e14:	89a3      	ldrh	r3, [r4, #12]
 8003e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e1a:	81a3      	strh	r3, [r4, #12]
 8003e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e20:	464a      	mov	r2, r9
 8003e22:	6921      	ldr	r1, [r4, #16]
 8003e24:	f000 face 	bl	80043c4 <memcpy>
 8003e28:	89a3      	ldrh	r3, [r4, #12]
 8003e2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e32:	81a3      	strh	r3, [r4, #12]
 8003e34:	6126      	str	r6, [r4, #16]
 8003e36:	444e      	add	r6, r9
 8003e38:	6026      	str	r6, [r4, #0]
 8003e3a:	463e      	mov	r6, r7
 8003e3c:	6165      	str	r5, [r4, #20]
 8003e3e:	eba5 0509 	sub.w	r5, r5, r9
 8003e42:	60a5      	str	r5, [r4, #8]
 8003e44:	42be      	cmp	r6, r7
 8003e46:	d900      	bls.n	8003e4a <__ssputs_r+0x86>
 8003e48:	463e      	mov	r6, r7
 8003e4a:	4632      	mov	r2, r6
 8003e4c:	4641      	mov	r1, r8
 8003e4e:	6820      	ldr	r0, [r4, #0]
 8003e50:	f000 fac6 	bl	80043e0 <memmove>
 8003e54:	68a3      	ldr	r3, [r4, #8]
 8003e56:	2000      	movs	r0, #0
 8003e58:	1b9b      	subs	r3, r3, r6
 8003e5a:	60a3      	str	r3, [r4, #8]
 8003e5c:	6823      	ldr	r3, [r4, #0]
 8003e5e:	4433      	add	r3, r6
 8003e60:	6023      	str	r3, [r4, #0]
 8003e62:	e7db      	b.n	8003e1c <__ssputs_r+0x58>
 8003e64:	462a      	mov	r2, r5
 8003e66:	f000 fbb1 	bl	80045cc <_realloc_r>
 8003e6a:	4606      	mov	r6, r0
 8003e6c:	2800      	cmp	r0, #0
 8003e6e:	d1e1      	bne.n	8003e34 <__ssputs_r+0x70>
 8003e70:	4650      	mov	r0, sl
 8003e72:	6921      	ldr	r1, [r4, #16]
 8003e74:	f000 face 	bl	8004414 <_free_r>
 8003e78:	e7c7      	b.n	8003e0a <__ssputs_r+0x46>
	...

08003e7c <_svfiprintf_r>:
 8003e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e80:	4698      	mov	r8, r3
 8003e82:	898b      	ldrh	r3, [r1, #12]
 8003e84:	4607      	mov	r7, r0
 8003e86:	061b      	lsls	r3, r3, #24
 8003e88:	460d      	mov	r5, r1
 8003e8a:	4614      	mov	r4, r2
 8003e8c:	b09d      	sub	sp, #116	; 0x74
 8003e8e:	d50e      	bpl.n	8003eae <_svfiprintf_r+0x32>
 8003e90:	690b      	ldr	r3, [r1, #16]
 8003e92:	b963      	cbnz	r3, 8003eae <_svfiprintf_r+0x32>
 8003e94:	2140      	movs	r1, #64	; 0x40
 8003e96:	f000 fb25 	bl	80044e4 <_malloc_r>
 8003e9a:	6028      	str	r0, [r5, #0]
 8003e9c:	6128      	str	r0, [r5, #16]
 8003e9e:	b920      	cbnz	r0, 8003eaa <_svfiprintf_r+0x2e>
 8003ea0:	230c      	movs	r3, #12
 8003ea2:	603b      	str	r3, [r7, #0]
 8003ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea8:	e0d1      	b.n	800404e <_svfiprintf_r+0x1d2>
 8003eaa:	2340      	movs	r3, #64	; 0x40
 8003eac:	616b      	str	r3, [r5, #20]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8003eb2:	2320      	movs	r3, #32
 8003eb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003eb8:	2330      	movs	r3, #48	; 0x30
 8003eba:	f04f 0901 	mov.w	r9, #1
 8003ebe:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ec2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004068 <_svfiprintf_r+0x1ec>
 8003ec6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003eca:	4623      	mov	r3, r4
 8003ecc:	469a      	mov	sl, r3
 8003ece:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ed2:	b10a      	cbz	r2, 8003ed8 <_svfiprintf_r+0x5c>
 8003ed4:	2a25      	cmp	r2, #37	; 0x25
 8003ed6:	d1f9      	bne.n	8003ecc <_svfiprintf_r+0x50>
 8003ed8:	ebba 0b04 	subs.w	fp, sl, r4
 8003edc:	d00b      	beq.n	8003ef6 <_svfiprintf_r+0x7a>
 8003ede:	465b      	mov	r3, fp
 8003ee0:	4622      	mov	r2, r4
 8003ee2:	4629      	mov	r1, r5
 8003ee4:	4638      	mov	r0, r7
 8003ee6:	f7ff ff6d 	bl	8003dc4 <__ssputs_r>
 8003eea:	3001      	adds	r0, #1
 8003eec:	f000 80aa 	beq.w	8004044 <_svfiprintf_r+0x1c8>
 8003ef0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ef2:	445a      	add	r2, fp
 8003ef4:	9209      	str	r2, [sp, #36]	; 0x24
 8003ef6:	f89a 3000 	ldrb.w	r3, [sl]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 80a2 	beq.w	8004044 <_svfiprintf_r+0x1c8>
 8003f00:	2300      	movs	r3, #0
 8003f02:	f04f 32ff 	mov.w	r2, #4294967295
 8003f06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f0a:	f10a 0a01 	add.w	sl, sl, #1
 8003f0e:	9304      	str	r3, [sp, #16]
 8003f10:	9307      	str	r3, [sp, #28]
 8003f12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f16:	931a      	str	r3, [sp, #104]	; 0x68
 8003f18:	4654      	mov	r4, sl
 8003f1a:	2205      	movs	r2, #5
 8003f1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f20:	4851      	ldr	r0, [pc, #324]	; (8004068 <_svfiprintf_r+0x1ec>)
 8003f22:	f000 fa41 	bl	80043a8 <memchr>
 8003f26:	9a04      	ldr	r2, [sp, #16]
 8003f28:	b9d8      	cbnz	r0, 8003f62 <_svfiprintf_r+0xe6>
 8003f2a:	06d0      	lsls	r0, r2, #27
 8003f2c:	bf44      	itt	mi
 8003f2e:	2320      	movmi	r3, #32
 8003f30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f34:	0711      	lsls	r1, r2, #28
 8003f36:	bf44      	itt	mi
 8003f38:	232b      	movmi	r3, #43	; 0x2b
 8003f3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f3e:	f89a 3000 	ldrb.w	r3, [sl]
 8003f42:	2b2a      	cmp	r3, #42	; 0x2a
 8003f44:	d015      	beq.n	8003f72 <_svfiprintf_r+0xf6>
 8003f46:	4654      	mov	r4, sl
 8003f48:	2000      	movs	r0, #0
 8003f4a:	f04f 0c0a 	mov.w	ip, #10
 8003f4e:	9a07      	ldr	r2, [sp, #28]
 8003f50:	4621      	mov	r1, r4
 8003f52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f56:	3b30      	subs	r3, #48	; 0x30
 8003f58:	2b09      	cmp	r3, #9
 8003f5a:	d94e      	bls.n	8003ffa <_svfiprintf_r+0x17e>
 8003f5c:	b1b0      	cbz	r0, 8003f8c <_svfiprintf_r+0x110>
 8003f5e:	9207      	str	r2, [sp, #28]
 8003f60:	e014      	b.n	8003f8c <_svfiprintf_r+0x110>
 8003f62:	eba0 0308 	sub.w	r3, r0, r8
 8003f66:	fa09 f303 	lsl.w	r3, r9, r3
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	46a2      	mov	sl, r4
 8003f6e:	9304      	str	r3, [sp, #16]
 8003f70:	e7d2      	b.n	8003f18 <_svfiprintf_r+0x9c>
 8003f72:	9b03      	ldr	r3, [sp, #12]
 8003f74:	1d19      	adds	r1, r3, #4
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	9103      	str	r1, [sp, #12]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	bfbb      	ittet	lt
 8003f7e:	425b      	neglt	r3, r3
 8003f80:	f042 0202 	orrlt.w	r2, r2, #2
 8003f84:	9307      	strge	r3, [sp, #28]
 8003f86:	9307      	strlt	r3, [sp, #28]
 8003f88:	bfb8      	it	lt
 8003f8a:	9204      	strlt	r2, [sp, #16]
 8003f8c:	7823      	ldrb	r3, [r4, #0]
 8003f8e:	2b2e      	cmp	r3, #46	; 0x2e
 8003f90:	d10c      	bne.n	8003fac <_svfiprintf_r+0x130>
 8003f92:	7863      	ldrb	r3, [r4, #1]
 8003f94:	2b2a      	cmp	r3, #42	; 0x2a
 8003f96:	d135      	bne.n	8004004 <_svfiprintf_r+0x188>
 8003f98:	9b03      	ldr	r3, [sp, #12]
 8003f9a:	3402      	adds	r4, #2
 8003f9c:	1d1a      	adds	r2, r3, #4
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	9203      	str	r2, [sp, #12]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	bfb8      	it	lt
 8003fa6:	f04f 33ff 	movlt.w	r3, #4294967295
 8003faa:	9305      	str	r3, [sp, #20]
 8003fac:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800406c <_svfiprintf_r+0x1f0>
 8003fb0:	2203      	movs	r2, #3
 8003fb2:	4650      	mov	r0, sl
 8003fb4:	7821      	ldrb	r1, [r4, #0]
 8003fb6:	f000 f9f7 	bl	80043a8 <memchr>
 8003fba:	b140      	cbz	r0, 8003fce <_svfiprintf_r+0x152>
 8003fbc:	2340      	movs	r3, #64	; 0x40
 8003fbe:	eba0 000a 	sub.w	r0, r0, sl
 8003fc2:	fa03 f000 	lsl.w	r0, r3, r0
 8003fc6:	9b04      	ldr	r3, [sp, #16]
 8003fc8:	3401      	adds	r4, #1
 8003fca:	4303      	orrs	r3, r0
 8003fcc:	9304      	str	r3, [sp, #16]
 8003fce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fd2:	2206      	movs	r2, #6
 8003fd4:	4826      	ldr	r0, [pc, #152]	; (8004070 <_svfiprintf_r+0x1f4>)
 8003fd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fda:	f000 f9e5 	bl	80043a8 <memchr>
 8003fde:	2800      	cmp	r0, #0
 8003fe0:	d038      	beq.n	8004054 <_svfiprintf_r+0x1d8>
 8003fe2:	4b24      	ldr	r3, [pc, #144]	; (8004074 <_svfiprintf_r+0x1f8>)
 8003fe4:	bb1b      	cbnz	r3, 800402e <_svfiprintf_r+0x1b2>
 8003fe6:	9b03      	ldr	r3, [sp, #12]
 8003fe8:	3307      	adds	r3, #7
 8003fea:	f023 0307 	bic.w	r3, r3, #7
 8003fee:	3308      	adds	r3, #8
 8003ff0:	9303      	str	r3, [sp, #12]
 8003ff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ff4:	4433      	add	r3, r6
 8003ff6:	9309      	str	r3, [sp, #36]	; 0x24
 8003ff8:	e767      	b.n	8003eca <_svfiprintf_r+0x4e>
 8003ffa:	460c      	mov	r4, r1
 8003ffc:	2001      	movs	r0, #1
 8003ffe:	fb0c 3202 	mla	r2, ip, r2, r3
 8004002:	e7a5      	b.n	8003f50 <_svfiprintf_r+0xd4>
 8004004:	2300      	movs	r3, #0
 8004006:	f04f 0c0a 	mov.w	ip, #10
 800400a:	4619      	mov	r1, r3
 800400c:	3401      	adds	r4, #1
 800400e:	9305      	str	r3, [sp, #20]
 8004010:	4620      	mov	r0, r4
 8004012:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004016:	3a30      	subs	r2, #48	; 0x30
 8004018:	2a09      	cmp	r2, #9
 800401a:	d903      	bls.n	8004024 <_svfiprintf_r+0x1a8>
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0c5      	beq.n	8003fac <_svfiprintf_r+0x130>
 8004020:	9105      	str	r1, [sp, #20]
 8004022:	e7c3      	b.n	8003fac <_svfiprintf_r+0x130>
 8004024:	4604      	mov	r4, r0
 8004026:	2301      	movs	r3, #1
 8004028:	fb0c 2101 	mla	r1, ip, r1, r2
 800402c:	e7f0      	b.n	8004010 <_svfiprintf_r+0x194>
 800402e:	ab03      	add	r3, sp, #12
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	462a      	mov	r2, r5
 8004034:	4638      	mov	r0, r7
 8004036:	4b10      	ldr	r3, [pc, #64]	; (8004078 <_svfiprintf_r+0x1fc>)
 8004038:	a904      	add	r1, sp, #16
 800403a:	f3af 8000 	nop.w
 800403e:	1c42      	adds	r2, r0, #1
 8004040:	4606      	mov	r6, r0
 8004042:	d1d6      	bne.n	8003ff2 <_svfiprintf_r+0x176>
 8004044:	89ab      	ldrh	r3, [r5, #12]
 8004046:	065b      	lsls	r3, r3, #25
 8004048:	f53f af2c 	bmi.w	8003ea4 <_svfiprintf_r+0x28>
 800404c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800404e:	b01d      	add	sp, #116	; 0x74
 8004050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004054:	ab03      	add	r3, sp, #12
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	462a      	mov	r2, r5
 800405a:	4638      	mov	r0, r7
 800405c:	4b06      	ldr	r3, [pc, #24]	; (8004078 <_svfiprintf_r+0x1fc>)
 800405e:	a904      	add	r1, sp, #16
 8004060:	f000 f87c 	bl	800415c <_printf_i>
 8004064:	e7eb      	b.n	800403e <_svfiprintf_r+0x1c2>
 8004066:	bf00      	nop
 8004068:	080054dc 	.word	0x080054dc
 800406c:	080054e2 	.word	0x080054e2
 8004070:	080054e6 	.word	0x080054e6
 8004074:	00000000 	.word	0x00000000
 8004078:	08003dc5 	.word	0x08003dc5

0800407c <_printf_common>:
 800407c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004080:	4616      	mov	r6, r2
 8004082:	4699      	mov	r9, r3
 8004084:	688a      	ldr	r2, [r1, #8]
 8004086:	690b      	ldr	r3, [r1, #16]
 8004088:	4607      	mov	r7, r0
 800408a:	4293      	cmp	r3, r2
 800408c:	bfb8      	it	lt
 800408e:	4613      	movlt	r3, r2
 8004090:	6033      	str	r3, [r6, #0]
 8004092:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004096:	460c      	mov	r4, r1
 8004098:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800409c:	b10a      	cbz	r2, 80040a2 <_printf_common+0x26>
 800409e:	3301      	adds	r3, #1
 80040a0:	6033      	str	r3, [r6, #0]
 80040a2:	6823      	ldr	r3, [r4, #0]
 80040a4:	0699      	lsls	r1, r3, #26
 80040a6:	bf42      	ittt	mi
 80040a8:	6833      	ldrmi	r3, [r6, #0]
 80040aa:	3302      	addmi	r3, #2
 80040ac:	6033      	strmi	r3, [r6, #0]
 80040ae:	6825      	ldr	r5, [r4, #0]
 80040b0:	f015 0506 	ands.w	r5, r5, #6
 80040b4:	d106      	bne.n	80040c4 <_printf_common+0x48>
 80040b6:	f104 0a19 	add.w	sl, r4, #25
 80040ba:	68e3      	ldr	r3, [r4, #12]
 80040bc:	6832      	ldr	r2, [r6, #0]
 80040be:	1a9b      	subs	r3, r3, r2
 80040c0:	42ab      	cmp	r3, r5
 80040c2:	dc28      	bgt.n	8004116 <_printf_common+0x9a>
 80040c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040c8:	1e13      	subs	r3, r2, #0
 80040ca:	6822      	ldr	r2, [r4, #0]
 80040cc:	bf18      	it	ne
 80040ce:	2301      	movne	r3, #1
 80040d0:	0692      	lsls	r2, r2, #26
 80040d2:	d42d      	bmi.n	8004130 <_printf_common+0xb4>
 80040d4:	4649      	mov	r1, r9
 80040d6:	4638      	mov	r0, r7
 80040d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040dc:	47c0      	blx	r8
 80040de:	3001      	adds	r0, #1
 80040e0:	d020      	beq.n	8004124 <_printf_common+0xa8>
 80040e2:	6823      	ldr	r3, [r4, #0]
 80040e4:	68e5      	ldr	r5, [r4, #12]
 80040e6:	f003 0306 	and.w	r3, r3, #6
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	bf18      	it	ne
 80040ee:	2500      	movne	r5, #0
 80040f0:	6832      	ldr	r2, [r6, #0]
 80040f2:	f04f 0600 	mov.w	r6, #0
 80040f6:	68a3      	ldr	r3, [r4, #8]
 80040f8:	bf08      	it	eq
 80040fa:	1aad      	subeq	r5, r5, r2
 80040fc:	6922      	ldr	r2, [r4, #16]
 80040fe:	bf08      	it	eq
 8004100:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004104:	4293      	cmp	r3, r2
 8004106:	bfc4      	itt	gt
 8004108:	1a9b      	subgt	r3, r3, r2
 800410a:	18ed      	addgt	r5, r5, r3
 800410c:	341a      	adds	r4, #26
 800410e:	42b5      	cmp	r5, r6
 8004110:	d11a      	bne.n	8004148 <_printf_common+0xcc>
 8004112:	2000      	movs	r0, #0
 8004114:	e008      	b.n	8004128 <_printf_common+0xac>
 8004116:	2301      	movs	r3, #1
 8004118:	4652      	mov	r2, sl
 800411a:	4649      	mov	r1, r9
 800411c:	4638      	mov	r0, r7
 800411e:	47c0      	blx	r8
 8004120:	3001      	adds	r0, #1
 8004122:	d103      	bne.n	800412c <_printf_common+0xb0>
 8004124:	f04f 30ff 	mov.w	r0, #4294967295
 8004128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800412c:	3501      	adds	r5, #1
 800412e:	e7c4      	b.n	80040ba <_printf_common+0x3e>
 8004130:	2030      	movs	r0, #48	; 0x30
 8004132:	18e1      	adds	r1, r4, r3
 8004134:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800413e:	4422      	add	r2, r4
 8004140:	3302      	adds	r3, #2
 8004142:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004146:	e7c5      	b.n	80040d4 <_printf_common+0x58>
 8004148:	2301      	movs	r3, #1
 800414a:	4622      	mov	r2, r4
 800414c:	4649      	mov	r1, r9
 800414e:	4638      	mov	r0, r7
 8004150:	47c0      	blx	r8
 8004152:	3001      	adds	r0, #1
 8004154:	d0e6      	beq.n	8004124 <_printf_common+0xa8>
 8004156:	3601      	adds	r6, #1
 8004158:	e7d9      	b.n	800410e <_printf_common+0x92>
	...

0800415c <_printf_i>:
 800415c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004160:	7e0f      	ldrb	r7, [r1, #24]
 8004162:	4691      	mov	r9, r2
 8004164:	2f78      	cmp	r7, #120	; 0x78
 8004166:	4680      	mov	r8, r0
 8004168:	460c      	mov	r4, r1
 800416a:	469a      	mov	sl, r3
 800416c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800416e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004172:	d807      	bhi.n	8004184 <_printf_i+0x28>
 8004174:	2f62      	cmp	r7, #98	; 0x62
 8004176:	d80a      	bhi.n	800418e <_printf_i+0x32>
 8004178:	2f00      	cmp	r7, #0
 800417a:	f000 80d9 	beq.w	8004330 <_printf_i+0x1d4>
 800417e:	2f58      	cmp	r7, #88	; 0x58
 8004180:	f000 80a4 	beq.w	80042cc <_printf_i+0x170>
 8004184:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004188:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800418c:	e03a      	b.n	8004204 <_printf_i+0xa8>
 800418e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004192:	2b15      	cmp	r3, #21
 8004194:	d8f6      	bhi.n	8004184 <_printf_i+0x28>
 8004196:	a101      	add	r1, pc, #4	; (adr r1, 800419c <_printf_i+0x40>)
 8004198:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800419c:	080041f5 	.word	0x080041f5
 80041a0:	08004209 	.word	0x08004209
 80041a4:	08004185 	.word	0x08004185
 80041a8:	08004185 	.word	0x08004185
 80041ac:	08004185 	.word	0x08004185
 80041b0:	08004185 	.word	0x08004185
 80041b4:	08004209 	.word	0x08004209
 80041b8:	08004185 	.word	0x08004185
 80041bc:	08004185 	.word	0x08004185
 80041c0:	08004185 	.word	0x08004185
 80041c4:	08004185 	.word	0x08004185
 80041c8:	08004317 	.word	0x08004317
 80041cc:	08004239 	.word	0x08004239
 80041d0:	080042f9 	.word	0x080042f9
 80041d4:	08004185 	.word	0x08004185
 80041d8:	08004185 	.word	0x08004185
 80041dc:	08004339 	.word	0x08004339
 80041e0:	08004185 	.word	0x08004185
 80041e4:	08004239 	.word	0x08004239
 80041e8:	08004185 	.word	0x08004185
 80041ec:	08004185 	.word	0x08004185
 80041f0:	08004301 	.word	0x08004301
 80041f4:	682b      	ldr	r3, [r5, #0]
 80041f6:	1d1a      	adds	r2, r3, #4
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	602a      	str	r2, [r5, #0]
 80041fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004200:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004204:	2301      	movs	r3, #1
 8004206:	e0a4      	b.n	8004352 <_printf_i+0x1f6>
 8004208:	6820      	ldr	r0, [r4, #0]
 800420a:	6829      	ldr	r1, [r5, #0]
 800420c:	0606      	lsls	r6, r0, #24
 800420e:	f101 0304 	add.w	r3, r1, #4
 8004212:	d50a      	bpl.n	800422a <_printf_i+0xce>
 8004214:	680e      	ldr	r6, [r1, #0]
 8004216:	602b      	str	r3, [r5, #0]
 8004218:	2e00      	cmp	r6, #0
 800421a:	da03      	bge.n	8004224 <_printf_i+0xc8>
 800421c:	232d      	movs	r3, #45	; 0x2d
 800421e:	4276      	negs	r6, r6
 8004220:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004224:	230a      	movs	r3, #10
 8004226:	485e      	ldr	r0, [pc, #376]	; (80043a0 <_printf_i+0x244>)
 8004228:	e019      	b.n	800425e <_printf_i+0x102>
 800422a:	680e      	ldr	r6, [r1, #0]
 800422c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004230:	602b      	str	r3, [r5, #0]
 8004232:	bf18      	it	ne
 8004234:	b236      	sxthne	r6, r6
 8004236:	e7ef      	b.n	8004218 <_printf_i+0xbc>
 8004238:	682b      	ldr	r3, [r5, #0]
 800423a:	6820      	ldr	r0, [r4, #0]
 800423c:	1d19      	adds	r1, r3, #4
 800423e:	6029      	str	r1, [r5, #0]
 8004240:	0601      	lsls	r1, r0, #24
 8004242:	d501      	bpl.n	8004248 <_printf_i+0xec>
 8004244:	681e      	ldr	r6, [r3, #0]
 8004246:	e002      	b.n	800424e <_printf_i+0xf2>
 8004248:	0646      	lsls	r6, r0, #25
 800424a:	d5fb      	bpl.n	8004244 <_printf_i+0xe8>
 800424c:	881e      	ldrh	r6, [r3, #0]
 800424e:	2f6f      	cmp	r7, #111	; 0x6f
 8004250:	bf0c      	ite	eq
 8004252:	2308      	moveq	r3, #8
 8004254:	230a      	movne	r3, #10
 8004256:	4852      	ldr	r0, [pc, #328]	; (80043a0 <_printf_i+0x244>)
 8004258:	2100      	movs	r1, #0
 800425a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800425e:	6865      	ldr	r5, [r4, #4]
 8004260:	2d00      	cmp	r5, #0
 8004262:	bfa8      	it	ge
 8004264:	6821      	ldrge	r1, [r4, #0]
 8004266:	60a5      	str	r5, [r4, #8]
 8004268:	bfa4      	itt	ge
 800426a:	f021 0104 	bicge.w	r1, r1, #4
 800426e:	6021      	strge	r1, [r4, #0]
 8004270:	b90e      	cbnz	r6, 8004276 <_printf_i+0x11a>
 8004272:	2d00      	cmp	r5, #0
 8004274:	d04d      	beq.n	8004312 <_printf_i+0x1b6>
 8004276:	4615      	mov	r5, r2
 8004278:	fbb6 f1f3 	udiv	r1, r6, r3
 800427c:	fb03 6711 	mls	r7, r3, r1, r6
 8004280:	5dc7      	ldrb	r7, [r0, r7]
 8004282:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004286:	4637      	mov	r7, r6
 8004288:	42bb      	cmp	r3, r7
 800428a:	460e      	mov	r6, r1
 800428c:	d9f4      	bls.n	8004278 <_printf_i+0x11c>
 800428e:	2b08      	cmp	r3, #8
 8004290:	d10b      	bne.n	80042aa <_printf_i+0x14e>
 8004292:	6823      	ldr	r3, [r4, #0]
 8004294:	07de      	lsls	r6, r3, #31
 8004296:	d508      	bpl.n	80042aa <_printf_i+0x14e>
 8004298:	6923      	ldr	r3, [r4, #16]
 800429a:	6861      	ldr	r1, [r4, #4]
 800429c:	4299      	cmp	r1, r3
 800429e:	bfde      	ittt	le
 80042a0:	2330      	movle	r3, #48	; 0x30
 80042a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80042a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80042aa:	1b52      	subs	r2, r2, r5
 80042ac:	6122      	str	r2, [r4, #16]
 80042ae:	464b      	mov	r3, r9
 80042b0:	4621      	mov	r1, r4
 80042b2:	4640      	mov	r0, r8
 80042b4:	f8cd a000 	str.w	sl, [sp]
 80042b8:	aa03      	add	r2, sp, #12
 80042ba:	f7ff fedf 	bl	800407c <_printf_common>
 80042be:	3001      	adds	r0, #1
 80042c0:	d14c      	bne.n	800435c <_printf_i+0x200>
 80042c2:	f04f 30ff 	mov.w	r0, #4294967295
 80042c6:	b004      	add	sp, #16
 80042c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042cc:	4834      	ldr	r0, [pc, #208]	; (80043a0 <_printf_i+0x244>)
 80042ce:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80042d2:	6829      	ldr	r1, [r5, #0]
 80042d4:	6823      	ldr	r3, [r4, #0]
 80042d6:	f851 6b04 	ldr.w	r6, [r1], #4
 80042da:	6029      	str	r1, [r5, #0]
 80042dc:	061d      	lsls	r5, r3, #24
 80042de:	d514      	bpl.n	800430a <_printf_i+0x1ae>
 80042e0:	07df      	lsls	r7, r3, #31
 80042e2:	bf44      	itt	mi
 80042e4:	f043 0320 	orrmi.w	r3, r3, #32
 80042e8:	6023      	strmi	r3, [r4, #0]
 80042ea:	b91e      	cbnz	r6, 80042f4 <_printf_i+0x198>
 80042ec:	6823      	ldr	r3, [r4, #0]
 80042ee:	f023 0320 	bic.w	r3, r3, #32
 80042f2:	6023      	str	r3, [r4, #0]
 80042f4:	2310      	movs	r3, #16
 80042f6:	e7af      	b.n	8004258 <_printf_i+0xfc>
 80042f8:	6823      	ldr	r3, [r4, #0]
 80042fa:	f043 0320 	orr.w	r3, r3, #32
 80042fe:	6023      	str	r3, [r4, #0]
 8004300:	2378      	movs	r3, #120	; 0x78
 8004302:	4828      	ldr	r0, [pc, #160]	; (80043a4 <_printf_i+0x248>)
 8004304:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004308:	e7e3      	b.n	80042d2 <_printf_i+0x176>
 800430a:	0659      	lsls	r1, r3, #25
 800430c:	bf48      	it	mi
 800430e:	b2b6      	uxthmi	r6, r6
 8004310:	e7e6      	b.n	80042e0 <_printf_i+0x184>
 8004312:	4615      	mov	r5, r2
 8004314:	e7bb      	b.n	800428e <_printf_i+0x132>
 8004316:	682b      	ldr	r3, [r5, #0]
 8004318:	6826      	ldr	r6, [r4, #0]
 800431a:	1d18      	adds	r0, r3, #4
 800431c:	6961      	ldr	r1, [r4, #20]
 800431e:	6028      	str	r0, [r5, #0]
 8004320:	0635      	lsls	r5, r6, #24
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	d501      	bpl.n	800432a <_printf_i+0x1ce>
 8004326:	6019      	str	r1, [r3, #0]
 8004328:	e002      	b.n	8004330 <_printf_i+0x1d4>
 800432a:	0670      	lsls	r0, r6, #25
 800432c:	d5fb      	bpl.n	8004326 <_printf_i+0x1ca>
 800432e:	8019      	strh	r1, [r3, #0]
 8004330:	2300      	movs	r3, #0
 8004332:	4615      	mov	r5, r2
 8004334:	6123      	str	r3, [r4, #16]
 8004336:	e7ba      	b.n	80042ae <_printf_i+0x152>
 8004338:	682b      	ldr	r3, [r5, #0]
 800433a:	2100      	movs	r1, #0
 800433c:	1d1a      	adds	r2, r3, #4
 800433e:	602a      	str	r2, [r5, #0]
 8004340:	681d      	ldr	r5, [r3, #0]
 8004342:	6862      	ldr	r2, [r4, #4]
 8004344:	4628      	mov	r0, r5
 8004346:	f000 f82f 	bl	80043a8 <memchr>
 800434a:	b108      	cbz	r0, 8004350 <_printf_i+0x1f4>
 800434c:	1b40      	subs	r0, r0, r5
 800434e:	6060      	str	r0, [r4, #4]
 8004350:	6863      	ldr	r3, [r4, #4]
 8004352:	6123      	str	r3, [r4, #16]
 8004354:	2300      	movs	r3, #0
 8004356:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800435a:	e7a8      	b.n	80042ae <_printf_i+0x152>
 800435c:	462a      	mov	r2, r5
 800435e:	4649      	mov	r1, r9
 8004360:	4640      	mov	r0, r8
 8004362:	6923      	ldr	r3, [r4, #16]
 8004364:	47d0      	blx	sl
 8004366:	3001      	adds	r0, #1
 8004368:	d0ab      	beq.n	80042c2 <_printf_i+0x166>
 800436a:	6823      	ldr	r3, [r4, #0]
 800436c:	079b      	lsls	r3, r3, #30
 800436e:	d413      	bmi.n	8004398 <_printf_i+0x23c>
 8004370:	68e0      	ldr	r0, [r4, #12]
 8004372:	9b03      	ldr	r3, [sp, #12]
 8004374:	4298      	cmp	r0, r3
 8004376:	bfb8      	it	lt
 8004378:	4618      	movlt	r0, r3
 800437a:	e7a4      	b.n	80042c6 <_printf_i+0x16a>
 800437c:	2301      	movs	r3, #1
 800437e:	4632      	mov	r2, r6
 8004380:	4649      	mov	r1, r9
 8004382:	4640      	mov	r0, r8
 8004384:	47d0      	blx	sl
 8004386:	3001      	adds	r0, #1
 8004388:	d09b      	beq.n	80042c2 <_printf_i+0x166>
 800438a:	3501      	adds	r5, #1
 800438c:	68e3      	ldr	r3, [r4, #12]
 800438e:	9903      	ldr	r1, [sp, #12]
 8004390:	1a5b      	subs	r3, r3, r1
 8004392:	42ab      	cmp	r3, r5
 8004394:	dcf2      	bgt.n	800437c <_printf_i+0x220>
 8004396:	e7eb      	b.n	8004370 <_printf_i+0x214>
 8004398:	2500      	movs	r5, #0
 800439a:	f104 0619 	add.w	r6, r4, #25
 800439e:	e7f5      	b.n	800438c <_printf_i+0x230>
 80043a0:	080054ed 	.word	0x080054ed
 80043a4:	080054fe 	.word	0x080054fe

080043a8 <memchr>:
 80043a8:	4603      	mov	r3, r0
 80043aa:	b510      	push	{r4, lr}
 80043ac:	b2c9      	uxtb	r1, r1
 80043ae:	4402      	add	r2, r0
 80043b0:	4293      	cmp	r3, r2
 80043b2:	4618      	mov	r0, r3
 80043b4:	d101      	bne.n	80043ba <memchr+0x12>
 80043b6:	2000      	movs	r0, #0
 80043b8:	e003      	b.n	80043c2 <memchr+0x1a>
 80043ba:	7804      	ldrb	r4, [r0, #0]
 80043bc:	3301      	adds	r3, #1
 80043be:	428c      	cmp	r4, r1
 80043c0:	d1f6      	bne.n	80043b0 <memchr+0x8>
 80043c2:	bd10      	pop	{r4, pc}

080043c4 <memcpy>:
 80043c4:	440a      	add	r2, r1
 80043c6:	4291      	cmp	r1, r2
 80043c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80043cc:	d100      	bne.n	80043d0 <memcpy+0xc>
 80043ce:	4770      	bx	lr
 80043d0:	b510      	push	{r4, lr}
 80043d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043d6:	4291      	cmp	r1, r2
 80043d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043dc:	d1f9      	bne.n	80043d2 <memcpy+0xe>
 80043de:	bd10      	pop	{r4, pc}

080043e0 <memmove>:
 80043e0:	4288      	cmp	r0, r1
 80043e2:	b510      	push	{r4, lr}
 80043e4:	eb01 0402 	add.w	r4, r1, r2
 80043e8:	d902      	bls.n	80043f0 <memmove+0x10>
 80043ea:	4284      	cmp	r4, r0
 80043ec:	4623      	mov	r3, r4
 80043ee:	d807      	bhi.n	8004400 <memmove+0x20>
 80043f0:	1e43      	subs	r3, r0, #1
 80043f2:	42a1      	cmp	r1, r4
 80043f4:	d008      	beq.n	8004408 <memmove+0x28>
 80043f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80043fe:	e7f8      	b.n	80043f2 <memmove+0x12>
 8004400:	4601      	mov	r1, r0
 8004402:	4402      	add	r2, r0
 8004404:	428a      	cmp	r2, r1
 8004406:	d100      	bne.n	800440a <memmove+0x2a>
 8004408:	bd10      	pop	{r4, pc}
 800440a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800440e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004412:	e7f7      	b.n	8004404 <memmove+0x24>

08004414 <_free_r>:
 8004414:	b538      	push	{r3, r4, r5, lr}
 8004416:	4605      	mov	r5, r0
 8004418:	2900      	cmp	r1, #0
 800441a:	d040      	beq.n	800449e <_free_r+0x8a>
 800441c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004420:	1f0c      	subs	r4, r1, #4
 8004422:	2b00      	cmp	r3, #0
 8004424:	bfb8      	it	lt
 8004426:	18e4      	addlt	r4, r4, r3
 8004428:	f000 f910 	bl	800464c <__malloc_lock>
 800442c:	4a1c      	ldr	r2, [pc, #112]	; (80044a0 <_free_r+0x8c>)
 800442e:	6813      	ldr	r3, [r2, #0]
 8004430:	b933      	cbnz	r3, 8004440 <_free_r+0x2c>
 8004432:	6063      	str	r3, [r4, #4]
 8004434:	6014      	str	r4, [r2, #0]
 8004436:	4628      	mov	r0, r5
 8004438:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800443c:	f000 b90c 	b.w	8004658 <__malloc_unlock>
 8004440:	42a3      	cmp	r3, r4
 8004442:	d908      	bls.n	8004456 <_free_r+0x42>
 8004444:	6820      	ldr	r0, [r4, #0]
 8004446:	1821      	adds	r1, r4, r0
 8004448:	428b      	cmp	r3, r1
 800444a:	bf01      	itttt	eq
 800444c:	6819      	ldreq	r1, [r3, #0]
 800444e:	685b      	ldreq	r3, [r3, #4]
 8004450:	1809      	addeq	r1, r1, r0
 8004452:	6021      	streq	r1, [r4, #0]
 8004454:	e7ed      	b.n	8004432 <_free_r+0x1e>
 8004456:	461a      	mov	r2, r3
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	b10b      	cbz	r3, 8004460 <_free_r+0x4c>
 800445c:	42a3      	cmp	r3, r4
 800445e:	d9fa      	bls.n	8004456 <_free_r+0x42>
 8004460:	6811      	ldr	r1, [r2, #0]
 8004462:	1850      	adds	r0, r2, r1
 8004464:	42a0      	cmp	r0, r4
 8004466:	d10b      	bne.n	8004480 <_free_r+0x6c>
 8004468:	6820      	ldr	r0, [r4, #0]
 800446a:	4401      	add	r1, r0
 800446c:	1850      	adds	r0, r2, r1
 800446e:	4283      	cmp	r3, r0
 8004470:	6011      	str	r1, [r2, #0]
 8004472:	d1e0      	bne.n	8004436 <_free_r+0x22>
 8004474:	6818      	ldr	r0, [r3, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	4401      	add	r1, r0
 800447a:	6011      	str	r1, [r2, #0]
 800447c:	6053      	str	r3, [r2, #4]
 800447e:	e7da      	b.n	8004436 <_free_r+0x22>
 8004480:	d902      	bls.n	8004488 <_free_r+0x74>
 8004482:	230c      	movs	r3, #12
 8004484:	602b      	str	r3, [r5, #0]
 8004486:	e7d6      	b.n	8004436 <_free_r+0x22>
 8004488:	6820      	ldr	r0, [r4, #0]
 800448a:	1821      	adds	r1, r4, r0
 800448c:	428b      	cmp	r3, r1
 800448e:	bf01      	itttt	eq
 8004490:	6819      	ldreq	r1, [r3, #0]
 8004492:	685b      	ldreq	r3, [r3, #4]
 8004494:	1809      	addeq	r1, r1, r0
 8004496:	6021      	streq	r1, [r4, #0]
 8004498:	6063      	str	r3, [r4, #4]
 800449a:	6054      	str	r4, [r2, #4]
 800449c:	e7cb      	b.n	8004436 <_free_r+0x22>
 800449e:	bd38      	pop	{r3, r4, r5, pc}
 80044a0:	20000158 	.word	0x20000158

080044a4 <sbrk_aligned>:
 80044a4:	b570      	push	{r4, r5, r6, lr}
 80044a6:	4e0e      	ldr	r6, [pc, #56]	; (80044e0 <sbrk_aligned+0x3c>)
 80044a8:	460c      	mov	r4, r1
 80044aa:	6831      	ldr	r1, [r6, #0]
 80044ac:	4605      	mov	r5, r0
 80044ae:	b911      	cbnz	r1, 80044b6 <sbrk_aligned+0x12>
 80044b0:	f000 f8bc 	bl	800462c <_sbrk_r>
 80044b4:	6030      	str	r0, [r6, #0]
 80044b6:	4621      	mov	r1, r4
 80044b8:	4628      	mov	r0, r5
 80044ba:	f000 f8b7 	bl	800462c <_sbrk_r>
 80044be:	1c43      	adds	r3, r0, #1
 80044c0:	d00a      	beq.n	80044d8 <sbrk_aligned+0x34>
 80044c2:	1cc4      	adds	r4, r0, #3
 80044c4:	f024 0403 	bic.w	r4, r4, #3
 80044c8:	42a0      	cmp	r0, r4
 80044ca:	d007      	beq.n	80044dc <sbrk_aligned+0x38>
 80044cc:	1a21      	subs	r1, r4, r0
 80044ce:	4628      	mov	r0, r5
 80044d0:	f000 f8ac 	bl	800462c <_sbrk_r>
 80044d4:	3001      	adds	r0, #1
 80044d6:	d101      	bne.n	80044dc <sbrk_aligned+0x38>
 80044d8:	f04f 34ff 	mov.w	r4, #4294967295
 80044dc:	4620      	mov	r0, r4
 80044de:	bd70      	pop	{r4, r5, r6, pc}
 80044e0:	2000015c 	.word	0x2000015c

080044e4 <_malloc_r>:
 80044e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044e8:	1ccd      	adds	r5, r1, #3
 80044ea:	f025 0503 	bic.w	r5, r5, #3
 80044ee:	3508      	adds	r5, #8
 80044f0:	2d0c      	cmp	r5, #12
 80044f2:	bf38      	it	cc
 80044f4:	250c      	movcc	r5, #12
 80044f6:	2d00      	cmp	r5, #0
 80044f8:	4607      	mov	r7, r0
 80044fa:	db01      	blt.n	8004500 <_malloc_r+0x1c>
 80044fc:	42a9      	cmp	r1, r5
 80044fe:	d905      	bls.n	800450c <_malloc_r+0x28>
 8004500:	230c      	movs	r3, #12
 8004502:	2600      	movs	r6, #0
 8004504:	603b      	str	r3, [r7, #0]
 8004506:	4630      	mov	r0, r6
 8004508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800450c:	4e2e      	ldr	r6, [pc, #184]	; (80045c8 <_malloc_r+0xe4>)
 800450e:	f000 f89d 	bl	800464c <__malloc_lock>
 8004512:	6833      	ldr	r3, [r6, #0]
 8004514:	461c      	mov	r4, r3
 8004516:	bb34      	cbnz	r4, 8004566 <_malloc_r+0x82>
 8004518:	4629      	mov	r1, r5
 800451a:	4638      	mov	r0, r7
 800451c:	f7ff ffc2 	bl	80044a4 <sbrk_aligned>
 8004520:	1c43      	adds	r3, r0, #1
 8004522:	4604      	mov	r4, r0
 8004524:	d14d      	bne.n	80045c2 <_malloc_r+0xde>
 8004526:	6834      	ldr	r4, [r6, #0]
 8004528:	4626      	mov	r6, r4
 800452a:	2e00      	cmp	r6, #0
 800452c:	d140      	bne.n	80045b0 <_malloc_r+0xcc>
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	4631      	mov	r1, r6
 8004532:	4638      	mov	r0, r7
 8004534:	eb04 0803 	add.w	r8, r4, r3
 8004538:	f000 f878 	bl	800462c <_sbrk_r>
 800453c:	4580      	cmp	r8, r0
 800453e:	d13a      	bne.n	80045b6 <_malloc_r+0xd2>
 8004540:	6821      	ldr	r1, [r4, #0]
 8004542:	3503      	adds	r5, #3
 8004544:	1a6d      	subs	r5, r5, r1
 8004546:	f025 0503 	bic.w	r5, r5, #3
 800454a:	3508      	adds	r5, #8
 800454c:	2d0c      	cmp	r5, #12
 800454e:	bf38      	it	cc
 8004550:	250c      	movcc	r5, #12
 8004552:	4638      	mov	r0, r7
 8004554:	4629      	mov	r1, r5
 8004556:	f7ff ffa5 	bl	80044a4 <sbrk_aligned>
 800455a:	3001      	adds	r0, #1
 800455c:	d02b      	beq.n	80045b6 <_malloc_r+0xd2>
 800455e:	6823      	ldr	r3, [r4, #0]
 8004560:	442b      	add	r3, r5
 8004562:	6023      	str	r3, [r4, #0]
 8004564:	e00e      	b.n	8004584 <_malloc_r+0xa0>
 8004566:	6822      	ldr	r2, [r4, #0]
 8004568:	1b52      	subs	r2, r2, r5
 800456a:	d41e      	bmi.n	80045aa <_malloc_r+0xc6>
 800456c:	2a0b      	cmp	r2, #11
 800456e:	d916      	bls.n	800459e <_malloc_r+0xba>
 8004570:	1961      	adds	r1, r4, r5
 8004572:	42a3      	cmp	r3, r4
 8004574:	6025      	str	r5, [r4, #0]
 8004576:	bf18      	it	ne
 8004578:	6059      	strne	r1, [r3, #4]
 800457a:	6863      	ldr	r3, [r4, #4]
 800457c:	bf08      	it	eq
 800457e:	6031      	streq	r1, [r6, #0]
 8004580:	5162      	str	r2, [r4, r5]
 8004582:	604b      	str	r3, [r1, #4]
 8004584:	4638      	mov	r0, r7
 8004586:	f104 060b 	add.w	r6, r4, #11
 800458a:	f000 f865 	bl	8004658 <__malloc_unlock>
 800458e:	f026 0607 	bic.w	r6, r6, #7
 8004592:	1d23      	adds	r3, r4, #4
 8004594:	1af2      	subs	r2, r6, r3
 8004596:	d0b6      	beq.n	8004506 <_malloc_r+0x22>
 8004598:	1b9b      	subs	r3, r3, r6
 800459a:	50a3      	str	r3, [r4, r2]
 800459c:	e7b3      	b.n	8004506 <_malloc_r+0x22>
 800459e:	6862      	ldr	r2, [r4, #4]
 80045a0:	42a3      	cmp	r3, r4
 80045a2:	bf0c      	ite	eq
 80045a4:	6032      	streq	r2, [r6, #0]
 80045a6:	605a      	strne	r2, [r3, #4]
 80045a8:	e7ec      	b.n	8004584 <_malloc_r+0xa0>
 80045aa:	4623      	mov	r3, r4
 80045ac:	6864      	ldr	r4, [r4, #4]
 80045ae:	e7b2      	b.n	8004516 <_malloc_r+0x32>
 80045b0:	4634      	mov	r4, r6
 80045b2:	6876      	ldr	r6, [r6, #4]
 80045b4:	e7b9      	b.n	800452a <_malloc_r+0x46>
 80045b6:	230c      	movs	r3, #12
 80045b8:	4638      	mov	r0, r7
 80045ba:	603b      	str	r3, [r7, #0]
 80045bc:	f000 f84c 	bl	8004658 <__malloc_unlock>
 80045c0:	e7a1      	b.n	8004506 <_malloc_r+0x22>
 80045c2:	6025      	str	r5, [r4, #0]
 80045c4:	e7de      	b.n	8004584 <_malloc_r+0xa0>
 80045c6:	bf00      	nop
 80045c8:	20000158 	.word	0x20000158

080045cc <_realloc_r>:
 80045cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045d0:	4680      	mov	r8, r0
 80045d2:	4614      	mov	r4, r2
 80045d4:	460e      	mov	r6, r1
 80045d6:	b921      	cbnz	r1, 80045e2 <_realloc_r+0x16>
 80045d8:	4611      	mov	r1, r2
 80045da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045de:	f7ff bf81 	b.w	80044e4 <_malloc_r>
 80045e2:	b92a      	cbnz	r2, 80045f0 <_realloc_r+0x24>
 80045e4:	f7ff ff16 	bl	8004414 <_free_r>
 80045e8:	4625      	mov	r5, r4
 80045ea:	4628      	mov	r0, r5
 80045ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045f0:	f000 f838 	bl	8004664 <_malloc_usable_size_r>
 80045f4:	4284      	cmp	r4, r0
 80045f6:	4607      	mov	r7, r0
 80045f8:	d802      	bhi.n	8004600 <_realloc_r+0x34>
 80045fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80045fe:	d812      	bhi.n	8004626 <_realloc_r+0x5a>
 8004600:	4621      	mov	r1, r4
 8004602:	4640      	mov	r0, r8
 8004604:	f7ff ff6e 	bl	80044e4 <_malloc_r>
 8004608:	4605      	mov	r5, r0
 800460a:	2800      	cmp	r0, #0
 800460c:	d0ed      	beq.n	80045ea <_realloc_r+0x1e>
 800460e:	42bc      	cmp	r4, r7
 8004610:	4622      	mov	r2, r4
 8004612:	4631      	mov	r1, r6
 8004614:	bf28      	it	cs
 8004616:	463a      	movcs	r2, r7
 8004618:	f7ff fed4 	bl	80043c4 <memcpy>
 800461c:	4631      	mov	r1, r6
 800461e:	4640      	mov	r0, r8
 8004620:	f7ff fef8 	bl	8004414 <_free_r>
 8004624:	e7e1      	b.n	80045ea <_realloc_r+0x1e>
 8004626:	4635      	mov	r5, r6
 8004628:	e7df      	b.n	80045ea <_realloc_r+0x1e>
	...

0800462c <_sbrk_r>:
 800462c:	b538      	push	{r3, r4, r5, lr}
 800462e:	2300      	movs	r3, #0
 8004630:	4d05      	ldr	r5, [pc, #20]	; (8004648 <_sbrk_r+0x1c>)
 8004632:	4604      	mov	r4, r0
 8004634:	4608      	mov	r0, r1
 8004636:	602b      	str	r3, [r5, #0]
 8004638:	f7fd f856 	bl	80016e8 <_sbrk>
 800463c:	1c43      	adds	r3, r0, #1
 800463e:	d102      	bne.n	8004646 <_sbrk_r+0x1a>
 8004640:	682b      	ldr	r3, [r5, #0]
 8004642:	b103      	cbz	r3, 8004646 <_sbrk_r+0x1a>
 8004644:	6023      	str	r3, [r4, #0]
 8004646:	bd38      	pop	{r3, r4, r5, pc}
 8004648:	20000160 	.word	0x20000160

0800464c <__malloc_lock>:
 800464c:	4801      	ldr	r0, [pc, #4]	; (8004654 <__malloc_lock+0x8>)
 800464e:	f000 b811 	b.w	8004674 <__retarget_lock_acquire_recursive>
 8004652:	bf00      	nop
 8004654:	20000164 	.word	0x20000164

08004658 <__malloc_unlock>:
 8004658:	4801      	ldr	r0, [pc, #4]	; (8004660 <__malloc_unlock+0x8>)
 800465a:	f000 b80c 	b.w	8004676 <__retarget_lock_release_recursive>
 800465e:	bf00      	nop
 8004660:	20000164 	.word	0x20000164

08004664 <_malloc_usable_size_r>:
 8004664:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004668:	1f18      	subs	r0, r3, #4
 800466a:	2b00      	cmp	r3, #0
 800466c:	bfbc      	itt	lt
 800466e:	580b      	ldrlt	r3, [r1, r0]
 8004670:	18c0      	addlt	r0, r0, r3
 8004672:	4770      	bx	lr

08004674 <__retarget_lock_acquire_recursive>:
 8004674:	4770      	bx	lr

08004676 <__retarget_lock_release_recursive>:
 8004676:	4770      	bx	lr

08004678 <pow>:
 8004678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800467c:	4614      	mov	r4, r2
 800467e:	461d      	mov	r5, r3
 8004680:	4680      	mov	r8, r0
 8004682:	4689      	mov	r9, r1
 8004684:	f000 f884 	bl	8004790 <__ieee754_pow>
 8004688:	4622      	mov	r2, r4
 800468a:	4606      	mov	r6, r0
 800468c:	460f      	mov	r7, r1
 800468e:	462b      	mov	r3, r5
 8004690:	4620      	mov	r0, r4
 8004692:	4629      	mov	r1, r5
 8004694:	f7fc fa6e 	bl	8000b74 <__aeabi_dcmpun>
 8004698:	bbc8      	cbnz	r0, 800470e <pow+0x96>
 800469a:	2200      	movs	r2, #0
 800469c:	2300      	movs	r3, #0
 800469e:	4640      	mov	r0, r8
 80046a0:	4649      	mov	r1, r9
 80046a2:	f7fc fa35 	bl	8000b10 <__aeabi_dcmpeq>
 80046a6:	b1b8      	cbz	r0, 80046d8 <pow+0x60>
 80046a8:	2200      	movs	r2, #0
 80046aa:	2300      	movs	r3, #0
 80046ac:	4620      	mov	r0, r4
 80046ae:	4629      	mov	r1, r5
 80046b0:	f7fc fa2e 	bl	8000b10 <__aeabi_dcmpeq>
 80046b4:	2800      	cmp	r0, #0
 80046b6:	d141      	bne.n	800473c <pow+0xc4>
 80046b8:	4620      	mov	r0, r4
 80046ba:	4629      	mov	r1, r5
 80046bc:	f000 fe5d 	bl	800537a <finite>
 80046c0:	b328      	cbz	r0, 800470e <pow+0x96>
 80046c2:	2200      	movs	r2, #0
 80046c4:	2300      	movs	r3, #0
 80046c6:	4620      	mov	r0, r4
 80046c8:	4629      	mov	r1, r5
 80046ca:	f7fc fa2b 	bl	8000b24 <__aeabi_dcmplt>
 80046ce:	b1f0      	cbz	r0, 800470e <pow+0x96>
 80046d0:	f7ff fb26 	bl	8003d20 <__errno>
 80046d4:	2322      	movs	r3, #34	; 0x22
 80046d6:	e019      	b.n	800470c <pow+0x94>
 80046d8:	4630      	mov	r0, r6
 80046da:	4639      	mov	r1, r7
 80046dc:	f000 fe4d 	bl	800537a <finite>
 80046e0:	b9c8      	cbnz	r0, 8004716 <pow+0x9e>
 80046e2:	4640      	mov	r0, r8
 80046e4:	4649      	mov	r1, r9
 80046e6:	f000 fe48 	bl	800537a <finite>
 80046ea:	b1a0      	cbz	r0, 8004716 <pow+0x9e>
 80046ec:	4620      	mov	r0, r4
 80046ee:	4629      	mov	r1, r5
 80046f0:	f000 fe43 	bl	800537a <finite>
 80046f4:	b178      	cbz	r0, 8004716 <pow+0x9e>
 80046f6:	4632      	mov	r2, r6
 80046f8:	463b      	mov	r3, r7
 80046fa:	4630      	mov	r0, r6
 80046fc:	4639      	mov	r1, r7
 80046fe:	f7fc fa39 	bl	8000b74 <__aeabi_dcmpun>
 8004702:	2800      	cmp	r0, #0
 8004704:	d0e4      	beq.n	80046d0 <pow+0x58>
 8004706:	f7ff fb0b 	bl	8003d20 <__errno>
 800470a:	2321      	movs	r3, #33	; 0x21
 800470c:	6003      	str	r3, [r0, #0]
 800470e:	4630      	mov	r0, r6
 8004710:	4639      	mov	r1, r7
 8004712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004716:	2200      	movs	r2, #0
 8004718:	2300      	movs	r3, #0
 800471a:	4630      	mov	r0, r6
 800471c:	4639      	mov	r1, r7
 800471e:	f7fc f9f7 	bl	8000b10 <__aeabi_dcmpeq>
 8004722:	2800      	cmp	r0, #0
 8004724:	d0f3      	beq.n	800470e <pow+0x96>
 8004726:	4640      	mov	r0, r8
 8004728:	4649      	mov	r1, r9
 800472a:	f000 fe26 	bl	800537a <finite>
 800472e:	2800      	cmp	r0, #0
 8004730:	d0ed      	beq.n	800470e <pow+0x96>
 8004732:	4620      	mov	r0, r4
 8004734:	4629      	mov	r1, r5
 8004736:	f000 fe20 	bl	800537a <finite>
 800473a:	e7c8      	b.n	80046ce <pow+0x56>
 800473c:	2600      	movs	r6, #0
 800473e:	4f01      	ldr	r7, [pc, #4]	; (8004744 <pow+0xcc>)
 8004740:	e7e5      	b.n	800470e <pow+0x96>
 8004742:	bf00      	nop
 8004744:	3ff00000 	.word	0x3ff00000

08004748 <sqrt>:
 8004748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474a:	4606      	mov	r6, r0
 800474c:	460f      	mov	r7, r1
 800474e:	f000 fd35 	bl	80051bc <__ieee754_sqrt>
 8004752:	4632      	mov	r2, r6
 8004754:	4604      	mov	r4, r0
 8004756:	460d      	mov	r5, r1
 8004758:	463b      	mov	r3, r7
 800475a:	4630      	mov	r0, r6
 800475c:	4639      	mov	r1, r7
 800475e:	f7fc fa09 	bl	8000b74 <__aeabi_dcmpun>
 8004762:	b990      	cbnz	r0, 800478a <sqrt+0x42>
 8004764:	2200      	movs	r2, #0
 8004766:	2300      	movs	r3, #0
 8004768:	4630      	mov	r0, r6
 800476a:	4639      	mov	r1, r7
 800476c:	f7fc f9da 	bl	8000b24 <__aeabi_dcmplt>
 8004770:	b158      	cbz	r0, 800478a <sqrt+0x42>
 8004772:	f7ff fad5 	bl	8003d20 <__errno>
 8004776:	2321      	movs	r3, #33	; 0x21
 8004778:	2200      	movs	r2, #0
 800477a:	6003      	str	r3, [r0, #0]
 800477c:	2300      	movs	r3, #0
 800477e:	4610      	mov	r0, r2
 8004780:	4619      	mov	r1, r3
 8004782:	f7fc f887 	bl	8000894 <__aeabi_ddiv>
 8004786:	4604      	mov	r4, r0
 8004788:	460d      	mov	r5, r1
 800478a:	4620      	mov	r0, r4
 800478c:	4629      	mov	r1, r5
 800478e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004790 <__ieee754_pow>:
 8004790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004794:	b093      	sub	sp, #76	; 0x4c
 8004796:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800479a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800479e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80047a2:	4689      	mov	r9, r1
 80047a4:	ea56 0102 	orrs.w	r1, r6, r2
 80047a8:	4680      	mov	r8, r0
 80047aa:	d111      	bne.n	80047d0 <__ieee754_pow+0x40>
 80047ac:	1803      	adds	r3, r0, r0
 80047ae:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 80047b2:	4152      	adcs	r2, r2
 80047b4:	4299      	cmp	r1, r3
 80047b6:	4b82      	ldr	r3, [pc, #520]	; (80049c0 <__ieee754_pow+0x230>)
 80047b8:	4193      	sbcs	r3, r2
 80047ba:	f080 84b9 	bcs.w	8005130 <__ieee754_pow+0x9a0>
 80047be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80047c2:	4640      	mov	r0, r8
 80047c4:	4649      	mov	r1, r9
 80047c6:	f7fb fd85 	bl	80002d4 <__adddf3>
 80047ca:	4683      	mov	fp, r0
 80047cc:	468c      	mov	ip, r1
 80047ce:	e06f      	b.n	80048b0 <__ieee754_pow+0x120>
 80047d0:	4b7c      	ldr	r3, [pc, #496]	; (80049c4 <__ieee754_pow+0x234>)
 80047d2:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 80047d6:	429c      	cmp	r4, r3
 80047d8:	464d      	mov	r5, r9
 80047da:	4682      	mov	sl, r0
 80047dc:	dc06      	bgt.n	80047ec <__ieee754_pow+0x5c>
 80047de:	d101      	bne.n	80047e4 <__ieee754_pow+0x54>
 80047e0:	2800      	cmp	r0, #0
 80047e2:	d1ec      	bne.n	80047be <__ieee754_pow+0x2e>
 80047e4:	429e      	cmp	r6, r3
 80047e6:	dc01      	bgt.n	80047ec <__ieee754_pow+0x5c>
 80047e8:	d10f      	bne.n	800480a <__ieee754_pow+0x7a>
 80047ea:	b172      	cbz	r2, 800480a <__ieee754_pow+0x7a>
 80047ec:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80047f0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80047f4:	ea55 050a 	orrs.w	r5, r5, sl
 80047f8:	d1e1      	bne.n	80047be <__ieee754_pow+0x2e>
 80047fa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80047fe:	18db      	adds	r3, r3, r3
 8004800:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8004804:	4152      	adcs	r2, r2
 8004806:	429d      	cmp	r5, r3
 8004808:	e7d5      	b.n	80047b6 <__ieee754_pow+0x26>
 800480a:	2d00      	cmp	r5, #0
 800480c:	da39      	bge.n	8004882 <__ieee754_pow+0xf2>
 800480e:	4b6e      	ldr	r3, [pc, #440]	; (80049c8 <__ieee754_pow+0x238>)
 8004810:	429e      	cmp	r6, r3
 8004812:	dc52      	bgt.n	80048ba <__ieee754_pow+0x12a>
 8004814:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004818:	429e      	cmp	r6, r3
 800481a:	f340 849c 	ble.w	8005156 <__ieee754_pow+0x9c6>
 800481e:	1533      	asrs	r3, r6, #20
 8004820:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004824:	2b14      	cmp	r3, #20
 8004826:	dd0f      	ble.n	8004848 <__ieee754_pow+0xb8>
 8004828:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800482c:	fa22 f103 	lsr.w	r1, r2, r3
 8004830:	fa01 f303 	lsl.w	r3, r1, r3
 8004834:	4293      	cmp	r3, r2
 8004836:	f040 848e 	bne.w	8005156 <__ieee754_pow+0x9c6>
 800483a:	f001 0101 	and.w	r1, r1, #1
 800483e:	f1c1 0302 	rsb	r3, r1, #2
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	b182      	cbz	r2, 8004868 <__ieee754_pow+0xd8>
 8004846:	e05d      	b.n	8004904 <__ieee754_pow+0x174>
 8004848:	2a00      	cmp	r2, #0
 800484a:	d159      	bne.n	8004900 <__ieee754_pow+0x170>
 800484c:	f1c3 0314 	rsb	r3, r3, #20
 8004850:	fa46 f103 	asr.w	r1, r6, r3
 8004854:	fa01 f303 	lsl.w	r3, r1, r3
 8004858:	42b3      	cmp	r3, r6
 800485a:	f040 8479 	bne.w	8005150 <__ieee754_pow+0x9c0>
 800485e:	f001 0101 	and.w	r1, r1, #1
 8004862:	f1c1 0302 	rsb	r3, r1, #2
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	4b58      	ldr	r3, [pc, #352]	; (80049cc <__ieee754_pow+0x23c>)
 800486a:	429e      	cmp	r6, r3
 800486c:	d132      	bne.n	80048d4 <__ieee754_pow+0x144>
 800486e:	2f00      	cmp	r7, #0
 8004870:	f280 846a 	bge.w	8005148 <__ieee754_pow+0x9b8>
 8004874:	4642      	mov	r2, r8
 8004876:	464b      	mov	r3, r9
 8004878:	2000      	movs	r0, #0
 800487a:	4954      	ldr	r1, [pc, #336]	; (80049cc <__ieee754_pow+0x23c>)
 800487c:	f7fc f80a 	bl	8000894 <__aeabi_ddiv>
 8004880:	e7a3      	b.n	80047ca <__ieee754_pow+0x3a>
 8004882:	2300      	movs	r3, #0
 8004884:	9300      	str	r3, [sp, #0]
 8004886:	2a00      	cmp	r2, #0
 8004888:	d13c      	bne.n	8004904 <__ieee754_pow+0x174>
 800488a:	4b4e      	ldr	r3, [pc, #312]	; (80049c4 <__ieee754_pow+0x234>)
 800488c:	429e      	cmp	r6, r3
 800488e:	d1eb      	bne.n	8004868 <__ieee754_pow+0xd8>
 8004890:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004894:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004898:	ea53 030a 	orrs.w	r3, r3, sl
 800489c:	f000 8448 	beq.w	8005130 <__ieee754_pow+0x9a0>
 80048a0:	4b4b      	ldr	r3, [pc, #300]	; (80049d0 <__ieee754_pow+0x240>)
 80048a2:	429c      	cmp	r4, r3
 80048a4:	dd0b      	ble.n	80048be <__ieee754_pow+0x12e>
 80048a6:	2f00      	cmp	r7, #0
 80048a8:	f2c0 8448 	blt.w	800513c <__ieee754_pow+0x9ac>
 80048ac:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80048b0:	4658      	mov	r0, fp
 80048b2:	4661      	mov	r1, ip
 80048b4:	b013      	add	sp, #76	; 0x4c
 80048b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048ba:	2302      	movs	r3, #2
 80048bc:	e7e2      	b.n	8004884 <__ieee754_pow+0xf4>
 80048be:	2f00      	cmp	r7, #0
 80048c0:	f04f 0b00 	mov.w	fp, #0
 80048c4:	f04f 0c00 	mov.w	ip, #0
 80048c8:	daf2      	bge.n	80048b0 <__ieee754_pow+0x120>
 80048ca:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80048ce:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80048d2:	e7ed      	b.n	80048b0 <__ieee754_pow+0x120>
 80048d4:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80048d8:	d106      	bne.n	80048e8 <__ieee754_pow+0x158>
 80048da:	4642      	mov	r2, r8
 80048dc:	464b      	mov	r3, r9
 80048de:	4640      	mov	r0, r8
 80048e0:	4649      	mov	r1, r9
 80048e2:	f7fb fead 	bl	8000640 <__aeabi_dmul>
 80048e6:	e770      	b.n	80047ca <__ieee754_pow+0x3a>
 80048e8:	4b3a      	ldr	r3, [pc, #232]	; (80049d4 <__ieee754_pow+0x244>)
 80048ea:	429f      	cmp	r7, r3
 80048ec:	d10a      	bne.n	8004904 <__ieee754_pow+0x174>
 80048ee:	2d00      	cmp	r5, #0
 80048f0:	db08      	blt.n	8004904 <__ieee754_pow+0x174>
 80048f2:	4640      	mov	r0, r8
 80048f4:	4649      	mov	r1, r9
 80048f6:	b013      	add	sp, #76	; 0x4c
 80048f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048fc:	f000 bc5e 	b.w	80051bc <__ieee754_sqrt>
 8004900:	2300      	movs	r3, #0
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	4640      	mov	r0, r8
 8004906:	4649      	mov	r1, r9
 8004908:	f000 fd34 	bl	8005374 <fabs>
 800490c:	4683      	mov	fp, r0
 800490e:	468c      	mov	ip, r1
 8004910:	f1ba 0f00 	cmp.w	sl, #0
 8004914:	d128      	bne.n	8004968 <__ieee754_pow+0x1d8>
 8004916:	b124      	cbz	r4, 8004922 <__ieee754_pow+0x192>
 8004918:	4b2c      	ldr	r3, [pc, #176]	; (80049cc <__ieee754_pow+0x23c>)
 800491a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800491e:	429a      	cmp	r2, r3
 8004920:	d122      	bne.n	8004968 <__ieee754_pow+0x1d8>
 8004922:	2f00      	cmp	r7, #0
 8004924:	da07      	bge.n	8004936 <__ieee754_pow+0x1a6>
 8004926:	465a      	mov	r2, fp
 8004928:	4663      	mov	r3, ip
 800492a:	2000      	movs	r0, #0
 800492c:	4927      	ldr	r1, [pc, #156]	; (80049cc <__ieee754_pow+0x23c>)
 800492e:	f7fb ffb1 	bl	8000894 <__aeabi_ddiv>
 8004932:	4683      	mov	fp, r0
 8004934:	468c      	mov	ip, r1
 8004936:	2d00      	cmp	r5, #0
 8004938:	daba      	bge.n	80048b0 <__ieee754_pow+0x120>
 800493a:	9b00      	ldr	r3, [sp, #0]
 800493c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004940:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004944:	4323      	orrs	r3, r4
 8004946:	d108      	bne.n	800495a <__ieee754_pow+0x1ca>
 8004948:	465a      	mov	r2, fp
 800494a:	4663      	mov	r3, ip
 800494c:	4658      	mov	r0, fp
 800494e:	4661      	mov	r1, ip
 8004950:	f7fb fcbe 	bl	80002d0 <__aeabi_dsub>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	e790      	b.n	800487c <__ieee754_pow+0xec>
 800495a:	9b00      	ldr	r3, [sp, #0]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d1a7      	bne.n	80048b0 <__ieee754_pow+0x120>
 8004960:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8004964:	469c      	mov	ip, r3
 8004966:	e7a3      	b.n	80048b0 <__ieee754_pow+0x120>
 8004968:	0feb      	lsrs	r3, r5, #31
 800496a:	3b01      	subs	r3, #1
 800496c:	930c      	str	r3, [sp, #48]	; 0x30
 800496e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004970:	9b00      	ldr	r3, [sp, #0]
 8004972:	4313      	orrs	r3, r2
 8004974:	d104      	bne.n	8004980 <__ieee754_pow+0x1f0>
 8004976:	4642      	mov	r2, r8
 8004978:	464b      	mov	r3, r9
 800497a:	4640      	mov	r0, r8
 800497c:	4649      	mov	r1, r9
 800497e:	e7e7      	b.n	8004950 <__ieee754_pow+0x1c0>
 8004980:	4b15      	ldr	r3, [pc, #84]	; (80049d8 <__ieee754_pow+0x248>)
 8004982:	429e      	cmp	r6, r3
 8004984:	f340 80f6 	ble.w	8004b74 <__ieee754_pow+0x3e4>
 8004988:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800498c:	429e      	cmp	r6, r3
 800498e:	4b10      	ldr	r3, [pc, #64]	; (80049d0 <__ieee754_pow+0x240>)
 8004990:	dd09      	ble.n	80049a6 <__ieee754_pow+0x216>
 8004992:	429c      	cmp	r4, r3
 8004994:	dc0c      	bgt.n	80049b0 <__ieee754_pow+0x220>
 8004996:	2f00      	cmp	r7, #0
 8004998:	da0c      	bge.n	80049b4 <__ieee754_pow+0x224>
 800499a:	2000      	movs	r0, #0
 800499c:	b013      	add	sp, #76	; 0x4c
 800499e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049a2:	f000 bce2 	b.w	800536a <__math_oflow>
 80049a6:	429c      	cmp	r4, r3
 80049a8:	dbf5      	blt.n	8004996 <__ieee754_pow+0x206>
 80049aa:	4b08      	ldr	r3, [pc, #32]	; (80049cc <__ieee754_pow+0x23c>)
 80049ac:	429c      	cmp	r4, r3
 80049ae:	dd15      	ble.n	80049dc <__ieee754_pow+0x24c>
 80049b0:	2f00      	cmp	r7, #0
 80049b2:	dcf2      	bgt.n	800499a <__ieee754_pow+0x20a>
 80049b4:	2000      	movs	r0, #0
 80049b6:	b013      	add	sp, #76	; 0x4c
 80049b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049bc:	f000 bcd0 	b.w	8005360 <__math_uflow>
 80049c0:	fff00000 	.word	0xfff00000
 80049c4:	7ff00000 	.word	0x7ff00000
 80049c8:	433fffff 	.word	0x433fffff
 80049cc:	3ff00000 	.word	0x3ff00000
 80049d0:	3fefffff 	.word	0x3fefffff
 80049d4:	3fe00000 	.word	0x3fe00000
 80049d8:	41e00000 	.word	0x41e00000
 80049dc:	4661      	mov	r1, ip
 80049de:	2200      	movs	r2, #0
 80049e0:	4658      	mov	r0, fp
 80049e2:	4b5f      	ldr	r3, [pc, #380]	; (8004b60 <__ieee754_pow+0x3d0>)
 80049e4:	f7fb fc74 	bl	80002d0 <__aeabi_dsub>
 80049e8:	a355      	add	r3, pc, #340	; (adr r3, 8004b40 <__ieee754_pow+0x3b0>)
 80049ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ee:	4604      	mov	r4, r0
 80049f0:	460d      	mov	r5, r1
 80049f2:	f7fb fe25 	bl	8000640 <__aeabi_dmul>
 80049f6:	a354      	add	r3, pc, #336	; (adr r3, 8004b48 <__ieee754_pow+0x3b8>)
 80049f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fc:	4606      	mov	r6, r0
 80049fe:	460f      	mov	r7, r1
 8004a00:	4620      	mov	r0, r4
 8004a02:	4629      	mov	r1, r5
 8004a04:	f7fb fe1c 	bl	8000640 <__aeabi_dmul>
 8004a08:	2200      	movs	r2, #0
 8004a0a:	4682      	mov	sl, r0
 8004a0c:	468b      	mov	fp, r1
 8004a0e:	4620      	mov	r0, r4
 8004a10:	4629      	mov	r1, r5
 8004a12:	4b54      	ldr	r3, [pc, #336]	; (8004b64 <__ieee754_pow+0x3d4>)
 8004a14:	f7fb fe14 	bl	8000640 <__aeabi_dmul>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	a14c      	add	r1, pc, #304	; (adr r1, 8004b50 <__ieee754_pow+0x3c0>)
 8004a1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a22:	f7fb fc55 	bl	80002d0 <__aeabi_dsub>
 8004a26:	4622      	mov	r2, r4
 8004a28:	462b      	mov	r3, r5
 8004a2a:	f7fb fe09 	bl	8000640 <__aeabi_dmul>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	460b      	mov	r3, r1
 8004a32:	2000      	movs	r0, #0
 8004a34:	494c      	ldr	r1, [pc, #304]	; (8004b68 <__ieee754_pow+0x3d8>)
 8004a36:	f7fb fc4b 	bl	80002d0 <__aeabi_dsub>
 8004a3a:	4622      	mov	r2, r4
 8004a3c:	462b      	mov	r3, r5
 8004a3e:	4680      	mov	r8, r0
 8004a40:	4689      	mov	r9, r1
 8004a42:	4620      	mov	r0, r4
 8004a44:	4629      	mov	r1, r5
 8004a46:	f7fb fdfb 	bl	8000640 <__aeabi_dmul>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	4640      	mov	r0, r8
 8004a50:	4649      	mov	r1, r9
 8004a52:	f7fb fdf5 	bl	8000640 <__aeabi_dmul>
 8004a56:	a340      	add	r3, pc, #256	; (adr r3, 8004b58 <__ieee754_pow+0x3c8>)
 8004a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5c:	f7fb fdf0 	bl	8000640 <__aeabi_dmul>
 8004a60:	4602      	mov	r2, r0
 8004a62:	460b      	mov	r3, r1
 8004a64:	4650      	mov	r0, sl
 8004a66:	4659      	mov	r1, fp
 8004a68:	f7fb fc32 	bl	80002d0 <__aeabi_dsub>
 8004a6c:	f04f 0a00 	mov.w	sl, #0
 8004a70:	4602      	mov	r2, r0
 8004a72:	460b      	mov	r3, r1
 8004a74:	4604      	mov	r4, r0
 8004a76:	460d      	mov	r5, r1
 8004a78:	4630      	mov	r0, r6
 8004a7a:	4639      	mov	r1, r7
 8004a7c:	f7fb fc2a 	bl	80002d4 <__adddf3>
 8004a80:	4632      	mov	r2, r6
 8004a82:	463b      	mov	r3, r7
 8004a84:	4650      	mov	r0, sl
 8004a86:	468b      	mov	fp, r1
 8004a88:	f7fb fc22 	bl	80002d0 <__aeabi_dsub>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4620      	mov	r0, r4
 8004a92:	4629      	mov	r1, r5
 8004a94:	f7fb fc1c 	bl	80002d0 <__aeabi_dsub>
 8004a98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004a9c:	9b00      	ldr	r3, [sp, #0]
 8004a9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	f04f 0600 	mov.w	r6, #0
 8004aa8:	f04f 0200 	mov.w	r2, #0
 8004aac:	bf0c      	ite	eq
 8004aae:	4b2f      	ldreq	r3, [pc, #188]	; (8004b6c <__ieee754_pow+0x3dc>)
 8004ab0:	4b2b      	ldrne	r3, [pc, #172]	; (8004b60 <__ieee754_pow+0x3d0>)
 8004ab2:	4604      	mov	r4, r0
 8004ab4:	460d      	mov	r5, r1
 8004ab6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004aba:	e9cd 2300 	strd	r2, r3, [sp]
 8004abe:	4632      	mov	r2, r6
 8004ac0:	463b      	mov	r3, r7
 8004ac2:	f7fb fc05 	bl	80002d0 <__aeabi_dsub>
 8004ac6:	4652      	mov	r2, sl
 8004ac8:	465b      	mov	r3, fp
 8004aca:	f7fb fdb9 	bl	8000640 <__aeabi_dmul>
 8004ace:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ad2:	4680      	mov	r8, r0
 8004ad4:	4689      	mov	r9, r1
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	4629      	mov	r1, r5
 8004ada:	f7fb fdb1 	bl	8000640 <__aeabi_dmul>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	4640      	mov	r0, r8
 8004ae4:	4649      	mov	r1, r9
 8004ae6:	f7fb fbf5 	bl	80002d4 <__adddf3>
 8004aea:	4632      	mov	r2, r6
 8004aec:	463b      	mov	r3, r7
 8004aee:	4680      	mov	r8, r0
 8004af0:	4689      	mov	r9, r1
 8004af2:	4650      	mov	r0, sl
 8004af4:	4659      	mov	r1, fp
 8004af6:	f7fb fda3 	bl	8000640 <__aeabi_dmul>
 8004afa:	4604      	mov	r4, r0
 8004afc:	460d      	mov	r5, r1
 8004afe:	460b      	mov	r3, r1
 8004b00:	4602      	mov	r2, r0
 8004b02:	4649      	mov	r1, r9
 8004b04:	4640      	mov	r0, r8
 8004b06:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004b0a:	f7fb fbe3 	bl	80002d4 <__adddf3>
 8004b0e:	4b18      	ldr	r3, [pc, #96]	; (8004b70 <__ieee754_pow+0x3e0>)
 8004b10:	4682      	mov	sl, r0
 8004b12:	4299      	cmp	r1, r3
 8004b14:	460f      	mov	r7, r1
 8004b16:	460e      	mov	r6, r1
 8004b18:	f340 82e5 	ble.w	80050e6 <__ieee754_pow+0x956>
 8004b1c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004b20:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004b24:	4303      	orrs	r3, r0
 8004b26:	f000 81df 	beq.w	8004ee8 <__ieee754_pow+0x758>
 8004b2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	2300      	movs	r3, #0
 8004b32:	f7fb fff7 	bl	8000b24 <__aeabi_dcmplt>
 8004b36:	3800      	subs	r0, #0
 8004b38:	bf18      	it	ne
 8004b3a:	2001      	movne	r0, #1
 8004b3c:	e72e      	b.n	800499c <__ieee754_pow+0x20c>
 8004b3e:	bf00      	nop
 8004b40:	60000000 	.word	0x60000000
 8004b44:	3ff71547 	.word	0x3ff71547
 8004b48:	f85ddf44 	.word	0xf85ddf44
 8004b4c:	3e54ae0b 	.word	0x3e54ae0b
 8004b50:	55555555 	.word	0x55555555
 8004b54:	3fd55555 	.word	0x3fd55555
 8004b58:	652b82fe 	.word	0x652b82fe
 8004b5c:	3ff71547 	.word	0x3ff71547
 8004b60:	3ff00000 	.word	0x3ff00000
 8004b64:	3fd00000 	.word	0x3fd00000
 8004b68:	3fe00000 	.word	0x3fe00000
 8004b6c:	bff00000 	.word	0xbff00000
 8004b70:	408fffff 	.word	0x408fffff
 8004b74:	4bd2      	ldr	r3, [pc, #840]	; (8004ec0 <__ieee754_pow+0x730>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	402b      	ands	r3, r5
 8004b7a:	b943      	cbnz	r3, 8004b8e <__ieee754_pow+0x3fe>
 8004b7c:	4658      	mov	r0, fp
 8004b7e:	4661      	mov	r1, ip
 8004b80:	4bd0      	ldr	r3, [pc, #832]	; (8004ec4 <__ieee754_pow+0x734>)
 8004b82:	f7fb fd5d 	bl	8000640 <__aeabi_dmul>
 8004b86:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004b8a:	4683      	mov	fp, r0
 8004b8c:	460c      	mov	r4, r1
 8004b8e:	1523      	asrs	r3, r4, #20
 8004b90:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004b94:	4413      	add	r3, r2
 8004b96:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b98:	4bcb      	ldr	r3, [pc, #812]	; (8004ec8 <__ieee754_pow+0x738>)
 8004b9a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004b9e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004ba2:	429c      	cmp	r4, r3
 8004ba4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004ba8:	dd08      	ble.n	8004bbc <__ieee754_pow+0x42c>
 8004baa:	4bc8      	ldr	r3, [pc, #800]	; (8004ecc <__ieee754_pow+0x73c>)
 8004bac:	429c      	cmp	r4, r3
 8004bae:	f340 8199 	ble.w	8004ee4 <__ieee754_pow+0x754>
 8004bb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bb4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004bb8:	3301      	adds	r3, #1
 8004bba:	930b      	str	r3, [sp, #44]	; 0x2c
 8004bbc:	2600      	movs	r6, #0
 8004bbe:	00f3      	lsls	r3, r6, #3
 8004bc0:	930d      	str	r3, [sp, #52]	; 0x34
 8004bc2:	4bc3      	ldr	r3, [pc, #780]	; (8004ed0 <__ieee754_pow+0x740>)
 8004bc4:	4658      	mov	r0, fp
 8004bc6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004bca:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004bce:	4629      	mov	r1, r5
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8004bd6:	4623      	mov	r3, r4
 8004bd8:	f7fb fb7a 	bl	80002d0 <__aeabi_dsub>
 8004bdc:	46da      	mov	sl, fp
 8004bde:	462b      	mov	r3, r5
 8004be0:	4652      	mov	r2, sl
 8004be2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004be6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004bea:	f7fb fb73 	bl	80002d4 <__adddf3>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	2000      	movs	r0, #0
 8004bf4:	49b7      	ldr	r1, [pc, #732]	; (8004ed4 <__ieee754_pow+0x744>)
 8004bf6:	f7fb fe4d 	bl	8000894 <__aeabi_ddiv>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004c02:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004c06:	f7fb fd1b 	bl	8000640 <__aeabi_dmul>
 8004c0a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004c0e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8004c12:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004c16:	2300      	movs	r3, #0
 8004c18:	2200      	movs	r2, #0
 8004c1a:	46ab      	mov	fp, r5
 8004c1c:	106d      	asrs	r5, r5, #1
 8004c1e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004c22:	9304      	str	r3, [sp, #16]
 8004c24:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004c28:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004c2c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8004c30:	4640      	mov	r0, r8
 8004c32:	4649      	mov	r1, r9
 8004c34:	4614      	mov	r4, r2
 8004c36:	461d      	mov	r5, r3
 8004c38:	f7fb fd02 	bl	8000640 <__aeabi_dmul>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004c44:	f7fb fb44 	bl	80002d0 <__aeabi_dsub>
 8004c48:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004c4c:	4606      	mov	r6, r0
 8004c4e:	460f      	mov	r7, r1
 8004c50:	4620      	mov	r0, r4
 8004c52:	4629      	mov	r1, r5
 8004c54:	f7fb fb3c 	bl	80002d0 <__aeabi_dsub>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	4650      	mov	r0, sl
 8004c5e:	4659      	mov	r1, fp
 8004c60:	f7fb fb36 	bl	80002d0 <__aeabi_dsub>
 8004c64:	4642      	mov	r2, r8
 8004c66:	464b      	mov	r3, r9
 8004c68:	f7fb fcea 	bl	8000640 <__aeabi_dmul>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	460b      	mov	r3, r1
 8004c70:	4630      	mov	r0, r6
 8004c72:	4639      	mov	r1, r7
 8004c74:	f7fb fb2c 	bl	80002d0 <__aeabi_dsub>
 8004c78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004c7c:	f7fb fce0 	bl	8000640 <__aeabi_dmul>
 8004c80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004c84:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004c88:	4610      	mov	r0, r2
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	f7fb fcd8 	bl	8000640 <__aeabi_dmul>
 8004c90:	a379      	add	r3, pc, #484	; (adr r3, 8004e78 <__ieee754_pow+0x6e8>)
 8004c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c96:	4604      	mov	r4, r0
 8004c98:	460d      	mov	r5, r1
 8004c9a:	f7fb fcd1 	bl	8000640 <__aeabi_dmul>
 8004c9e:	a378      	add	r3, pc, #480	; (adr r3, 8004e80 <__ieee754_pow+0x6f0>)
 8004ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca4:	f7fb fb16 	bl	80002d4 <__adddf3>
 8004ca8:	4622      	mov	r2, r4
 8004caa:	462b      	mov	r3, r5
 8004cac:	f7fb fcc8 	bl	8000640 <__aeabi_dmul>
 8004cb0:	a375      	add	r3, pc, #468	; (adr r3, 8004e88 <__ieee754_pow+0x6f8>)
 8004cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb6:	f7fb fb0d 	bl	80002d4 <__adddf3>
 8004cba:	4622      	mov	r2, r4
 8004cbc:	462b      	mov	r3, r5
 8004cbe:	f7fb fcbf 	bl	8000640 <__aeabi_dmul>
 8004cc2:	a373      	add	r3, pc, #460	; (adr r3, 8004e90 <__ieee754_pow+0x700>)
 8004cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc8:	f7fb fb04 	bl	80002d4 <__adddf3>
 8004ccc:	4622      	mov	r2, r4
 8004cce:	462b      	mov	r3, r5
 8004cd0:	f7fb fcb6 	bl	8000640 <__aeabi_dmul>
 8004cd4:	a370      	add	r3, pc, #448	; (adr r3, 8004e98 <__ieee754_pow+0x708>)
 8004cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cda:	f7fb fafb 	bl	80002d4 <__adddf3>
 8004cde:	4622      	mov	r2, r4
 8004ce0:	462b      	mov	r3, r5
 8004ce2:	f7fb fcad 	bl	8000640 <__aeabi_dmul>
 8004ce6:	a36e      	add	r3, pc, #440	; (adr r3, 8004ea0 <__ieee754_pow+0x710>)
 8004ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cec:	f7fb faf2 	bl	80002d4 <__adddf3>
 8004cf0:	4622      	mov	r2, r4
 8004cf2:	4606      	mov	r6, r0
 8004cf4:	460f      	mov	r7, r1
 8004cf6:	462b      	mov	r3, r5
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	4629      	mov	r1, r5
 8004cfc:	f7fb fca0 	bl	8000640 <__aeabi_dmul>
 8004d00:	4602      	mov	r2, r0
 8004d02:	460b      	mov	r3, r1
 8004d04:	4630      	mov	r0, r6
 8004d06:	4639      	mov	r1, r7
 8004d08:	f7fb fc9a 	bl	8000640 <__aeabi_dmul>
 8004d0c:	4604      	mov	r4, r0
 8004d0e:	460d      	mov	r5, r1
 8004d10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d14:	4642      	mov	r2, r8
 8004d16:	464b      	mov	r3, r9
 8004d18:	f7fb fadc 	bl	80002d4 <__adddf3>
 8004d1c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004d20:	f7fb fc8e 	bl	8000640 <__aeabi_dmul>
 8004d24:	4622      	mov	r2, r4
 8004d26:	462b      	mov	r3, r5
 8004d28:	f7fb fad4 	bl	80002d4 <__adddf3>
 8004d2c:	4642      	mov	r2, r8
 8004d2e:	4606      	mov	r6, r0
 8004d30:	460f      	mov	r7, r1
 8004d32:	464b      	mov	r3, r9
 8004d34:	4640      	mov	r0, r8
 8004d36:	4649      	mov	r1, r9
 8004d38:	f7fb fc82 	bl	8000640 <__aeabi_dmul>
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	4b66      	ldr	r3, [pc, #408]	; (8004ed8 <__ieee754_pow+0x748>)
 8004d40:	4682      	mov	sl, r0
 8004d42:	468b      	mov	fp, r1
 8004d44:	f7fb fac6 	bl	80002d4 <__adddf3>
 8004d48:	4632      	mov	r2, r6
 8004d4a:	463b      	mov	r3, r7
 8004d4c:	f7fb fac2 	bl	80002d4 <__adddf3>
 8004d50:	2400      	movs	r4, #0
 8004d52:	460d      	mov	r5, r1
 8004d54:	4622      	mov	r2, r4
 8004d56:	460b      	mov	r3, r1
 8004d58:	4640      	mov	r0, r8
 8004d5a:	4649      	mov	r1, r9
 8004d5c:	f7fb fc70 	bl	8000640 <__aeabi_dmul>
 8004d60:	2200      	movs	r2, #0
 8004d62:	4680      	mov	r8, r0
 8004d64:	4689      	mov	r9, r1
 8004d66:	4620      	mov	r0, r4
 8004d68:	4629      	mov	r1, r5
 8004d6a:	4b5b      	ldr	r3, [pc, #364]	; (8004ed8 <__ieee754_pow+0x748>)
 8004d6c:	f7fb fab0 	bl	80002d0 <__aeabi_dsub>
 8004d70:	4652      	mov	r2, sl
 8004d72:	465b      	mov	r3, fp
 8004d74:	f7fb faac 	bl	80002d0 <__aeabi_dsub>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4630      	mov	r0, r6
 8004d7e:	4639      	mov	r1, r7
 8004d80:	f7fb faa6 	bl	80002d0 <__aeabi_dsub>
 8004d84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d88:	f7fb fc5a 	bl	8000640 <__aeabi_dmul>
 8004d8c:	4622      	mov	r2, r4
 8004d8e:	4606      	mov	r6, r0
 8004d90:	460f      	mov	r7, r1
 8004d92:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004d96:	462b      	mov	r3, r5
 8004d98:	f7fb fc52 	bl	8000640 <__aeabi_dmul>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4630      	mov	r0, r6
 8004da2:	4639      	mov	r1, r7
 8004da4:	f7fb fa96 	bl	80002d4 <__adddf3>
 8004da8:	2400      	movs	r4, #0
 8004daa:	4606      	mov	r6, r0
 8004dac:	460f      	mov	r7, r1
 8004dae:	4602      	mov	r2, r0
 8004db0:	460b      	mov	r3, r1
 8004db2:	4640      	mov	r0, r8
 8004db4:	4649      	mov	r1, r9
 8004db6:	f7fb fa8d 	bl	80002d4 <__adddf3>
 8004dba:	a33b      	add	r3, pc, #236	; (adr r3, 8004ea8 <__ieee754_pow+0x718>)
 8004dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc0:	4620      	mov	r0, r4
 8004dc2:	460d      	mov	r5, r1
 8004dc4:	f7fb fc3c 	bl	8000640 <__aeabi_dmul>
 8004dc8:	4642      	mov	r2, r8
 8004dca:	464b      	mov	r3, r9
 8004dcc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	4629      	mov	r1, r5
 8004dd4:	f7fb fa7c 	bl	80002d0 <__aeabi_dsub>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	460b      	mov	r3, r1
 8004ddc:	4630      	mov	r0, r6
 8004dde:	4639      	mov	r1, r7
 8004de0:	f7fb fa76 	bl	80002d0 <__aeabi_dsub>
 8004de4:	a332      	add	r3, pc, #200	; (adr r3, 8004eb0 <__ieee754_pow+0x720>)
 8004de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dea:	f7fb fc29 	bl	8000640 <__aeabi_dmul>
 8004dee:	a332      	add	r3, pc, #200	; (adr r3, 8004eb8 <__ieee754_pow+0x728>)
 8004df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df4:	4606      	mov	r6, r0
 8004df6:	460f      	mov	r7, r1
 8004df8:	4620      	mov	r0, r4
 8004dfa:	4629      	mov	r1, r5
 8004dfc:	f7fb fc20 	bl	8000640 <__aeabi_dmul>
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	4630      	mov	r0, r6
 8004e06:	4639      	mov	r1, r7
 8004e08:	f7fb fa64 	bl	80002d4 <__adddf3>
 8004e0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004e0e:	4b33      	ldr	r3, [pc, #204]	; (8004edc <__ieee754_pow+0x74c>)
 8004e10:	f04f 0a00 	mov.w	sl, #0
 8004e14:	4413      	add	r3, r2
 8004e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1a:	f7fb fa5b 	bl	80002d4 <__adddf3>
 8004e1e:	4680      	mov	r8, r0
 8004e20:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004e22:	4689      	mov	r9, r1
 8004e24:	f7fb fba2 	bl	800056c <__aeabi_i2d>
 8004e28:	4604      	mov	r4, r0
 8004e2a:	460d      	mov	r5, r1
 8004e2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004e2e:	4b2c      	ldr	r3, [pc, #176]	; (8004ee0 <__ieee754_pow+0x750>)
 8004e30:	4413      	add	r3, r2
 8004e32:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004e36:	4642      	mov	r2, r8
 8004e38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e3c:	464b      	mov	r3, r9
 8004e3e:	f7fb fa49 	bl	80002d4 <__adddf3>
 8004e42:	4632      	mov	r2, r6
 8004e44:	463b      	mov	r3, r7
 8004e46:	f7fb fa45 	bl	80002d4 <__adddf3>
 8004e4a:	4622      	mov	r2, r4
 8004e4c:	462b      	mov	r3, r5
 8004e4e:	f7fb fa41 	bl	80002d4 <__adddf3>
 8004e52:	4622      	mov	r2, r4
 8004e54:	462b      	mov	r3, r5
 8004e56:	4650      	mov	r0, sl
 8004e58:	468b      	mov	fp, r1
 8004e5a:	f7fb fa39 	bl	80002d0 <__aeabi_dsub>
 8004e5e:	4632      	mov	r2, r6
 8004e60:	463b      	mov	r3, r7
 8004e62:	f7fb fa35 	bl	80002d0 <__aeabi_dsub>
 8004e66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e6a:	f7fb fa31 	bl	80002d0 <__aeabi_dsub>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	460b      	mov	r3, r1
 8004e72:	4640      	mov	r0, r8
 8004e74:	4649      	mov	r1, r9
 8004e76:	e60d      	b.n	8004a94 <__ieee754_pow+0x304>
 8004e78:	4a454eef 	.word	0x4a454eef
 8004e7c:	3fca7e28 	.word	0x3fca7e28
 8004e80:	93c9db65 	.word	0x93c9db65
 8004e84:	3fcd864a 	.word	0x3fcd864a
 8004e88:	a91d4101 	.word	0xa91d4101
 8004e8c:	3fd17460 	.word	0x3fd17460
 8004e90:	518f264d 	.word	0x518f264d
 8004e94:	3fd55555 	.word	0x3fd55555
 8004e98:	db6fabff 	.word	0xdb6fabff
 8004e9c:	3fdb6db6 	.word	0x3fdb6db6
 8004ea0:	33333303 	.word	0x33333303
 8004ea4:	3fe33333 	.word	0x3fe33333
 8004ea8:	e0000000 	.word	0xe0000000
 8004eac:	3feec709 	.word	0x3feec709
 8004eb0:	dc3a03fd 	.word	0xdc3a03fd
 8004eb4:	3feec709 	.word	0x3feec709
 8004eb8:	145b01f5 	.word	0x145b01f5
 8004ebc:	be3e2fe0 	.word	0xbe3e2fe0
 8004ec0:	7ff00000 	.word	0x7ff00000
 8004ec4:	43400000 	.word	0x43400000
 8004ec8:	0003988e 	.word	0x0003988e
 8004ecc:	000bb679 	.word	0x000bb679
 8004ed0:	08005510 	.word	0x08005510
 8004ed4:	3ff00000 	.word	0x3ff00000
 8004ed8:	40080000 	.word	0x40080000
 8004edc:	08005530 	.word	0x08005530
 8004ee0:	08005520 	.word	0x08005520
 8004ee4:	2601      	movs	r6, #1
 8004ee6:	e66a      	b.n	8004bbe <__ieee754_pow+0x42e>
 8004ee8:	a39d      	add	r3, pc, #628	; (adr r3, 8005160 <__ieee754_pow+0x9d0>)
 8004eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eee:	4640      	mov	r0, r8
 8004ef0:	4649      	mov	r1, r9
 8004ef2:	f7fb f9ef 	bl	80002d4 <__adddf3>
 8004ef6:	4622      	mov	r2, r4
 8004ef8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004efc:	462b      	mov	r3, r5
 8004efe:	4650      	mov	r0, sl
 8004f00:	4639      	mov	r1, r7
 8004f02:	f7fb f9e5 	bl	80002d0 <__aeabi_dsub>
 8004f06:	4602      	mov	r2, r0
 8004f08:	460b      	mov	r3, r1
 8004f0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f0e:	f7fb fe27 	bl	8000b60 <__aeabi_dcmpgt>
 8004f12:	2800      	cmp	r0, #0
 8004f14:	f47f ae09 	bne.w	8004b2a <__ieee754_pow+0x39a>
 8004f18:	4aa3      	ldr	r2, [pc, #652]	; (80051a8 <__ieee754_pow+0xa18>)
 8004f1a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	f340 8101 	ble.w	8005126 <__ieee754_pow+0x996>
 8004f24:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004f28:	2000      	movs	r0, #0
 8004f2a:	151b      	asrs	r3, r3, #20
 8004f2c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004f30:	fa4a f303 	asr.w	r3, sl, r3
 8004f34:	4433      	add	r3, r6
 8004f36:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004f3a:	4f9c      	ldr	r7, [pc, #624]	; (80051ac <__ieee754_pow+0xa1c>)
 8004f3c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004f40:	4117      	asrs	r7, r2
 8004f42:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004f46:	ea23 0107 	bic.w	r1, r3, r7
 8004f4a:	f1c2 0214 	rsb	r2, r2, #20
 8004f4e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004f52:	460b      	mov	r3, r1
 8004f54:	fa4a fa02 	asr.w	sl, sl, r2
 8004f58:	2e00      	cmp	r6, #0
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	4629      	mov	r1, r5
 8004f5e:	4620      	mov	r0, r4
 8004f60:	bfb8      	it	lt
 8004f62:	f1ca 0a00 	rsblt	sl, sl, #0
 8004f66:	f7fb f9b3 	bl	80002d0 <__aeabi_dsub>
 8004f6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f72:	2400      	movs	r4, #0
 8004f74:	4642      	mov	r2, r8
 8004f76:	464b      	mov	r3, r9
 8004f78:	f7fb f9ac 	bl	80002d4 <__adddf3>
 8004f7c:	a37a      	add	r3, pc, #488	; (adr r3, 8005168 <__ieee754_pow+0x9d8>)
 8004f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f82:	4620      	mov	r0, r4
 8004f84:	460d      	mov	r5, r1
 8004f86:	f7fb fb5b 	bl	8000640 <__aeabi_dmul>
 8004f8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f8e:	4606      	mov	r6, r0
 8004f90:	460f      	mov	r7, r1
 8004f92:	4620      	mov	r0, r4
 8004f94:	4629      	mov	r1, r5
 8004f96:	f7fb f99b 	bl	80002d0 <__aeabi_dsub>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	4640      	mov	r0, r8
 8004fa0:	4649      	mov	r1, r9
 8004fa2:	f7fb f995 	bl	80002d0 <__aeabi_dsub>
 8004fa6:	a372      	add	r3, pc, #456	; (adr r3, 8005170 <__ieee754_pow+0x9e0>)
 8004fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fac:	f7fb fb48 	bl	8000640 <__aeabi_dmul>
 8004fb0:	a371      	add	r3, pc, #452	; (adr r3, 8005178 <__ieee754_pow+0x9e8>)
 8004fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb6:	4680      	mov	r8, r0
 8004fb8:	4689      	mov	r9, r1
 8004fba:	4620      	mov	r0, r4
 8004fbc:	4629      	mov	r1, r5
 8004fbe:	f7fb fb3f 	bl	8000640 <__aeabi_dmul>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	4640      	mov	r0, r8
 8004fc8:	4649      	mov	r1, r9
 8004fca:	f7fb f983 	bl	80002d4 <__adddf3>
 8004fce:	4604      	mov	r4, r0
 8004fd0:	460d      	mov	r5, r1
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	4630      	mov	r0, r6
 8004fd8:	4639      	mov	r1, r7
 8004fda:	f7fb f97b 	bl	80002d4 <__adddf3>
 8004fde:	4632      	mov	r2, r6
 8004fe0:	463b      	mov	r3, r7
 8004fe2:	4680      	mov	r8, r0
 8004fe4:	4689      	mov	r9, r1
 8004fe6:	f7fb f973 	bl	80002d0 <__aeabi_dsub>
 8004fea:	4602      	mov	r2, r0
 8004fec:	460b      	mov	r3, r1
 8004fee:	4620      	mov	r0, r4
 8004ff0:	4629      	mov	r1, r5
 8004ff2:	f7fb f96d 	bl	80002d0 <__aeabi_dsub>
 8004ff6:	4642      	mov	r2, r8
 8004ff8:	4606      	mov	r6, r0
 8004ffa:	460f      	mov	r7, r1
 8004ffc:	464b      	mov	r3, r9
 8004ffe:	4640      	mov	r0, r8
 8005000:	4649      	mov	r1, r9
 8005002:	f7fb fb1d 	bl	8000640 <__aeabi_dmul>
 8005006:	a35e      	add	r3, pc, #376	; (adr r3, 8005180 <__ieee754_pow+0x9f0>)
 8005008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500c:	4604      	mov	r4, r0
 800500e:	460d      	mov	r5, r1
 8005010:	f7fb fb16 	bl	8000640 <__aeabi_dmul>
 8005014:	a35c      	add	r3, pc, #368	; (adr r3, 8005188 <__ieee754_pow+0x9f8>)
 8005016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501a:	f7fb f959 	bl	80002d0 <__aeabi_dsub>
 800501e:	4622      	mov	r2, r4
 8005020:	462b      	mov	r3, r5
 8005022:	f7fb fb0d 	bl	8000640 <__aeabi_dmul>
 8005026:	a35a      	add	r3, pc, #360	; (adr r3, 8005190 <__ieee754_pow+0xa00>)
 8005028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502c:	f7fb f952 	bl	80002d4 <__adddf3>
 8005030:	4622      	mov	r2, r4
 8005032:	462b      	mov	r3, r5
 8005034:	f7fb fb04 	bl	8000640 <__aeabi_dmul>
 8005038:	a357      	add	r3, pc, #348	; (adr r3, 8005198 <__ieee754_pow+0xa08>)
 800503a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503e:	f7fb f947 	bl	80002d0 <__aeabi_dsub>
 8005042:	4622      	mov	r2, r4
 8005044:	462b      	mov	r3, r5
 8005046:	f7fb fafb 	bl	8000640 <__aeabi_dmul>
 800504a:	a355      	add	r3, pc, #340	; (adr r3, 80051a0 <__ieee754_pow+0xa10>)
 800504c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005050:	f7fb f940 	bl	80002d4 <__adddf3>
 8005054:	4622      	mov	r2, r4
 8005056:	462b      	mov	r3, r5
 8005058:	f7fb faf2 	bl	8000640 <__aeabi_dmul>
 800505c:	4602      	mov	r2, r0
 800505e:	460b      	mov	r3, r1
 8005060:	4640      	mov	r0, r8
 8005062:	4649      	mov	r1, r9
 8005064:	f7fb f934 	bl	80002d0 <__aeabi_dsub>
 8005068:	4604      	mov	r4, r0
 800506a:	460d      	mov	r5, r1
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	4640      	mov	r0, r8
 8005072:	4649      	mov	r1, r9
 8005074:	f7fb fae4 	bl	8000640 <__aeabi_dmul>
 8005078:	2200      	movs	r2, #0
 800507a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800507e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005082:	4620      	mov	r0, r4
 8005084:	4629      	mov	r1, r5
 8005086:	f7fb f923 	bl	80002d0 <__aeabi_dsub>
 800508a:	4602      	mov	r2, r0
 800508c:	460b      	mov	r3, r1
 800508e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005092:	f7fb fbff 	bl	8000894 <__aeabi_ddiv>
 8005096:	4632      	mov	r2, r6
 8005098:	4604      	mov	r4, r0
 800509a:	460d      	mov	r5, r1
 800509c:	463b      	mov	r3, r7
 800509e:	4640      	mov	r0, r8
 80050a0:	4649      	mov	r1, r9
 80050a2:	f7fb facd 	bl	8000640 <__aeabi_dmul>
 80050a6:	4632      	mov	r2, r6
 80050a8:	463b      	mov	r3, r7
 80050aa:	f7fb f913 	bl	80002d4 <__adddf3>
 80050ae:	4602      	mov	r2, r0
 80050b0:	460b      	mov	r3, r1
 80050b2:	4620      	mov	r0, r4
 80050b4:	4629      	mov	r1, r5
 80050b6:	f7fb f90b 	bl	80002d0 <__aeabi_dsub>
 80050ba:	4642      	mov	r2, r8
 80050bc:	464b      	mov	r3, r9
 80050be:	f7fb f907 	bl	80002d0 <__aeabi_dsub>
 80050c2:	4602      	mov	r2, r0
 80050c4:	460b      	mov	r3, r1
 80050c6:	2000      	movs	r0, #0
 80050c8:	4939      	ldr	r1, [pc, #228]	; (80051b0 <__ieee754_pow+0xa20>)
 80050ca:	f7fb f901 	bl	80002d0 <__aeabi_dsub>
 80050ce:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80050d2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80050d6:	da29      	bge.n	800512c <__ieee754_pow+0x99c>
 80050d8:	4652      	mov	r2, sl
 80050da:	f000 f955 	bl	8005388 <scalbn>
 80050de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050e2:	f7ff bbfe 	b.w	80048e2 <__ieee754_pow+0x152>
 80050e6:	4b33      	ldr	r3, [pc, #204]	; (80051b4 <__ieee754_pow+0xa24>)
 80050e8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80050ec:	429f      	cmp	r7, r3
 80050ee:	f77f af13 	ble.w	8004f18 <__ieee754_pow+0x788>
 80050f2:	4b31      	ldr	r3, [pc, #196]	; (80051b8 <__ieee754_pow+0xa28>)
 80050f4:	440b      	add	r3, r1
 80050f6:	4303      	orrs	r3, r0
 80050f8:	d009      	beq.n	800510e <__ieee754_pow+0x97e>
 80050fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050fe:	2200      	movs	r2, #0
 8005100:	2300      	movs	r3, #0
 8005102:	f7fb fd0f 	bl	8000b24 <__aeabi_dcmplt>
 8005106:	3800      	subs	r0, #0
 8005108:	bf18      	it	ne
 800510a:	2001      	movne	r0, #1
 800510c:	e453      	b.n	80049b6 <__ieee754_pow+0x226>
 800510e:	4622      	mov	r2, r4
 8005110:	462b      	mov	r3, r5
 8005112:	f7fb f8dd 	bl	80002d0 <__aeabi_dsub>
 8005116:	4642      	mov	r2, r8
 8005118:	464b      	mov	r3, r9
 800511a:	f7fb fd17 	bl	8000b4c <__aeabi_dcmpge>
 800511e:	2800      	cmp	r0, #0
 8005120:	f43f aefa 	beq.w	8004f18 <__ieee754_pow+0x788>
 8005124:	e7e9      	b.n	80050fa <__ieee754_pow+0x96a>
 8005126:	f04f 0a00 	mov.w	sl, #0
 800512a:	e720      	b.n	8004f6e <__ieee754_pow+0x7de>
 800512c:	4621      	mov	r1, r4
 800512e:	e7d6      	b.n	80050de <__ieee754_pow+0x94e>
 8005130:	f04f 0b00 	mov.w	fp, #0
 8005134:	f8df c078 	ldr.w	ip, [pc, #120]	; 80051b0 <__ieee754_pow+0xa20>
 8005138:	f7ff bbba 	b.w	80048b0 <__ieee754_pow+0x120>
 800513c:	f04f 0b00 	mov.w	fp, #0
 8005140:	f04f 0c00 	mov.w	ip, #0
 8005144:	f7ff bbb4 	b.w	80048b0 <__ieee754_pow+0x120>
 8005148:	4640      	mov	r0, r8
 800514a:	4649      	mov	r1, r9
 800514c:	f7ff bb3d 	b.w	80047ca <__ieee754_pow+0x3a>
 8005150:	9200      	str	r2, [sp, #0]
 8005152:	f7ff bb89 	b.w	8004868 <__ieee754_pow+0xd8>
 8005156:	2300      	movs	r3, #0
 8005158:	f7ff bb73 	b.w	8004842 <__ieee754_pow+0xb2>
 800515c:	f3af 8000 	nop.w
 8005160:	652b82fe 	.word	0x652b82fe
 8005164:	3c971547 	.word	0x3c971547
 8005168:	00000000 	.word	0x00000000
 800516c:	3fe62e43 	.word	0x3fe62e43
 8005170:	fefa39ef 	.word	0xfefa39ef
 8005174:	3fe62e42 	.word	0x3fe62e42
 8005178:	0ca86c39 	.word	0x0ca86c39
 800517c:	be205c61 	.word	0xbe205c61
 8005180:	72bea4d0 	.word	0x72bea4d0
 8005184:	3e663769 	.word	0x3e663769
 8005188:	c5d26bf1 	.word	0xc5d26bf1
 800518c:	3ebbbd41 	.word	0x3ebbbd41
 8005190:	af25de2c 	.word	0xaf25de2c
 8005194:	3f11566a 	.word	0x3f11566a
 8005198:	16bebd93 	.word	0x16bebd93
 800519c:	3f66c16c 	.word	0x3f66c16c
 80051a0:	5555553e 	.word	0x5555553e
 80051a4:	3fc55555 	.word	0x3fc55555
 80051a8:	3fe00000 	.word	0x3fe00000
 80051ac:	000fffff 	.word	0x000fffff
 80051b0:	3ff00000 	.word	0x3ff00000
 80051b4:	4090cbff 	.word	0x4090cbff
 80051b8:	3f6f3400 	.word	0x3f6f3400

080051bc <__ieee754_sqrt>:
 80051bc:	f8df c158 	ldr.w	ip, [pc, #344]	; 8005318 <__ieee754_sqrt+0x15c>
 80051c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051c4:	ea3c 0c01 	bics.w	ip, ip, r1
 80051c8:	4606      	mov	r6, r0
 80051ca:	460d      	mov	r5, r1
 80051cc:	460c      	mov	r4, r1
 80051ce:	460a      	mov	r2, r1
 80051d0:	4607      	mov	r7, r0
 80051d2:	4603      	mov	r3, r0
 80051d4:	d10f      	bne.n	80051f6 <__ieee754_sqrt+0x3a>
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	f7fb fa31 	bl	8000640 <__aeabi_dmul>
 80051de:	4602      	mov	r2, r0
 80051e0:	460b      	mov	r3, r1
 80051e2:	4630      	mov	r0, r6
 80051e4:	4629      	mov	r1, r5
 80051e6:	f7fb f875 	bl	80002d4 <__adddf3>
 80051ea:	4606      	mov	r6, r0
 80051ec:	460d      	mov	r5, r1
 80051ee:	4630      	mov	r0, r6
 80051f0:	4629      	mov	r1, r5
 80051f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051f6:	2900      	cmp	r1, #0
 80051f8:	dc0e      	bgt.n	8005218 <__ieee754_sqrt+0x5c>
 80051fa:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80051fe:	ea5c 0707 	orrs.w	r7, ip, r7
 8005202:	d0f4      	beq.n	80051ee <__ieee754_sqrt+0x32>
 8005204:	b141      	cbz	r1, 8005218 <__ieee754_sqrt+0x5c>
 8005206:	4602      	mov	r2, r0
 8005208:	460b      	mov	r3, r1
 800520a:	f7fb f861 	bl	80002d0 <__aeabi_dsub>
 800520e:	4602      	mov	r2, r0
 8005210:	460b      	mov	r3, r1
 8005212:	f7fb fb3f 	bl	8000894 <__aeabi_ddiv>
 8005216:	e7e8      	b.n	80051ea <__ieee754_sqrt+0x2e>
 8005218:	1521      	asrs	r1, r4, #20
 800521a:	d075      	beq.n	8005308 <__ieee754_sqrt+0x14c>
 800521c:	07cc      	lsls	r4, r1, #31
 800521e:	f04f 0400 	mov.w	r4, #0
 8005222:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8005226:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800522a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800522e:	bf5e      	ittt	pl
 8005230:	0fd9      	lsrpl	r1, r3, #31
 8005232:	005b      	lslpl	r3, r3, #1
 8005234:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8005238:	0fd9      	lsrs	r1, r3, #31
 800523a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800523e:	2516      	movs	r5, #22
 8005240:	4620      	mov	r0, r4
 8005242:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005246:	107f      	asrs	r7, r7, #1
 8005248:	005b      	lsls	r3, r3, #1
 800524a:	1846      	adds	r6, r0, r1
 800524c:	4296      	cmp	r6, r2
 800524e:	bfde      	ittt	le
 8005250:	1b92      	suble	r2, r2, r6
 8005252:	1870      	addle	r0, r6, r1
 8005254:	1864      	addle	r4, r4, r1
 8005256:	0052      	lsls	r2, r2, #1
 8005258:	3d01      	subs	r5, #1
 800525a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800525e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005262:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005266:	d1f0      	bne.n	800524a <__ieee754_sqrt+0x8e>
 8005268:	4629      	mov	r1, r5
 800526a:	f04f 0e20 	mov.w	lr, #32
 800526e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005272:	4282      	cmp	r2, r0
 8005274:	eb06 0c05 	add.w	ip, r6, r5
 8005278:	dc02      	bgt.n	8005280 <__ieee754_sqrt+0xc4>
 800527a:	d113      	bne.n	80052a4 <__ieee754_sqrt+0xe8>
 800527c:	459c      	cmp	ip, r3
 800527e:	d811      	bhi.n	80052a4 <__ieee754_sqrt+0xe8>
 8005280:	f1bc 0f00 	cmp.w	ip, #0
 8005284:	eb0c 0506 	add.w	r5, ip, r6
 8005288:	da43      	bge.n	8005312 <__ieee754_sqrt+0x156>
 800528a:	2d00      	cmp	r5, #0
 800528c:	db41      	blt.n	8005312 <__ieee754_sqrt+0x156>
 800528e:	f100 0801 	add.w	r8, r0, #1
 8005292:	1a12      	subs	r2, r2, r0
 8005294:	4640      	mov	r0, r8
 8005296:	459c      	cmp	ip, r3
 8005298:	bf88      	it	hi
 800529a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800529e:	eba3 030c 	sub.w	r3, r3, ip
 80052a2:	4431      	add	r1, r6
 80052a4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80052a8:	f1be 0e01 	subs.w	lr, lr, #1
 80052ac:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80052b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80052b4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80052b8:	d1db      	bne.n	8005272 <__ieee754_sqrt+0xb6>
 80052ba:	4313      	orrs	r3, r2
 80052bc:	d006      	beq.n	80052cc <__ieee754_sqrt+0x110>
 80052be:	1c48      	adds	r0, r1, #1
 80052c0:	bf0b      	itete	eq
 80052c2:	4671      	moveq	r1, lr
 80052c4:	3101      	addne	r1, #1
 80052c6:	3401      	addeq	r4, #1
 80052c8:	f021 0101 	bicne.w	r1, r1, #1
 80052cc:	1063      	asrs	r3, r4, #1
 80052ce:	0849      	lsrs	r1, r1, #1
 80052d0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80052d4:	07e2      	lsls	r2, r4, #31
 80052d6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80052da:	bf48      	it	mi
 80052dc:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80052e0:	460e      	mov	r6, r1
 80052e2:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80052e6:	e782      	b.n	80051ee <__ieee754_sqrt+0x32>
 80052e8:	0ada      	lsrs	r2, r3, #11
 80052ea:	3815      	subs	r0, #21
 80052ec:	055b      	lsls	r3, r3, #21
 80052ee:	2a00      	cmp	r2, #0
 80052f0:	d0fa      	beq.n	80052e8 <__ieee754_sqrt+0x12c>
 80052f2:	02d5      	lsls	r5, r2, #11
 80052f4:	d50a      	bpl.n	800530c <__ieee754_sqrt+0x150>
 80052f6:	f1c1 0420 	rsb	r4, r1, #32
 80052fa:	fa23 f404 	lsr.w	r4, r3, r4
 80052fe:	1e4d      	subs	r5, r1, #1
 8005300:	408b      	lsls	r3, r1
 8005302:	4322      	orrs	r2, r4
 8005304:	1b41      	subs	r1, r0, r5
 8005306:	e789      	b.n	800521c <__ieee754_sqrt+0x60>
 8005308:	4608      	mov	r0, r1
 800530a:	e7f0      	b.n	80052ee <__ieee754_sqrt+0x132>
 800530c:	0052      	lsls	r2, r2, #1
 800530e:	3101      	adds	r1, #1
 8005310:	e7ef      	b.n	80052f2 <__ieee754_sqrt+0x136>
 8005312:	4680      	mov	r8, r0
 8005314:	e7bd      	b.n	8005292 <__ieee754_sqrt+0xd6>
 8005316:	bf00      	nop
 8005318:	7ff00000 	.word	0x7ff00000

0800531c <with_errno>:
 800531c:	b570      	push	{r4, r5, r6, lr}
 800531e:	4604      	mov	r4, r0
 8005320:	460d      	mov	r5, r1
 8005322:	4616      	mov	r6, r2
 8005324:	f7fe fcfc 	bl	8003d20 <__errno>
 8005328:	4629      	mov	r1, r5
 800532a:	6006      	str	r6, [r0, #0]
 800532c:	4620      	mov	r0, r4
 800532e:	bd70      	pop	{r4, r5, r6, pc}

08005330 <xflow>:
 8005330:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005332:	4615      	mov	r5, r2
 8005334:	461c      	mov	r4, r3
 8005336:	b180      	cbz	r0, 800535a <xflow+0x2a>
 8005338:	4610      	mov	r0, r2
 800533a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800533e:	e9cd 0100 	strd	r0, r1, [sp]
 8005342:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005346:	4628      	mov	r0, r5
 8005348:	4621      	mov	r1, r4
 800534a:	f7fb f979 	bl	8000640 <__aeabi_dmul>
 800534e:	2222      	movs	r2, #34	; 0x22
 8005350:	b003      	add	sp, #12
 8005352:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005356:	f7ff bfe1 	b.w	800531c <with_errno>
 800535a:	4610      	mov	r0, r2
 800535c:	4619      	mov	r1, r3
 800535e:	e7ee      	b.n	800533e <xflow+0xe>

08005360 <__math_uflow>:
 8005360:	2200      	movs	r2, #0
 8005362:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005366:	f7ff bfe3 	b.w	8005330 <xflow>

0800536a <__math_oflow>:
 800536a:	2200      	movs	r2, #0
 800536c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005370:	f7ff bfde 	b.w	8005330 <xflow>

08005374 <fabs>:
 8005374:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005378:	4770      	bx	lr

0800537a <finite>:
 800537a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800537e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005382:	0fc0      	lsrs	r0, r0, #31
 8005384:	4770      	bx	lr
	...

08005388 <scalbn>:
 8005388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800538e:	4604      	mov	r4, r0
 8005390:	460d      	mov	r5, r1
 8005392:	4617      	mov	r7, r2
 8005394:	460b      	mov	r3, r1
 8005396:	b996      	cbnz	r6, 80053be <scalbn+0x36>
 8005398:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800539c:	4303      	orrs	r3, r0
 800539e:	d039      	beq.n	8005414 <scalbn+0x8c>
 80053a0:	4b33      	ldr	r3, [pc, #204]	; (8005470 <scalbn+0xe8>)
 80053a2:	2200      	movs	r2, #0
 80053a4:	f7fb f94c 	bl	8000640 <__aeabi_dmul>
 80053a8:	4b32      	ldr	r3, [pc, #200]	; (8005474 <scalbn+0xec>)
 80053aa:	4604      	mov	r4, r0
 80053ac:	429f      	cmp	r7, r3
 80053ae:	460d      	mov	r5, r1
 80053b0:	da0f      	bge.n	80053d2 <scalbn+0x4a>
 80053b2:	a32b      	add	r3, pc, #172	; (adr r3, 8005460 <scalbn+0xd8>)
 80053b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b8:	f7fb f942 	bl	8000640 <__aeabi_dmul>
 80053bc:	e006      	b.n	80053cc <scalbn+0x44>
 80053be:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80053c2:	4296      	cmp	r6, r2
 80053c4:	d10a      	bne.n	80053dc <scalbn+0x54>
 80053c6:	4602      	mov	r2, r0
 80053c8:	f7fa ff84 	bl	80002d4 <__adddf3>
 80053cc:	4604      	mov	r4, r0
 80053ce:	460d      	mov	r5, r1
 80053d0:	e020      	b.n	8005414 <scalbn+0x8c>
 80053d2:	460b      	mov	r3, r1
 80053d4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80053d8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80053dc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80053e0:	19b9      	adds	r1, r7, r6
 80053e2:	4291      	cmp	r1, r2
 80053e4:	dd0e      	ble.n	8005404 <scalbn+0x7c>
 80053e6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80053ea:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80053ee:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80053f2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80053f6:	4820      	ldr	r0, [pc, #128]	; (8005478 <scalbn+0xf0>)
 80053f8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80053fc:	a31a      	add	r3, pc, #104	; (adr r3, 8005468 <scalbn+0xe0>)
 80053fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005402:	e7d9      	b.n	80053b8 <scalbn+0x30>
 8005404:	2900      	cmp	r1, #0
 8005406:	dd08      	ble.n	800541a <scalbn+0x92>
 8005408:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800540c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005410:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8005414:	4620      	mov	r0, r4
 8005416:	4629      	mov	r1, r5
 8005418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800541a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800541e:	da12      	bge.n	8005446 <scalbn+0xbe>
 8005420:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005424:	429f      	cmp	r7, r3
 8005426:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800542a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800542e:	dcdc      	bgt.n	80053ea <scalbn+0x62>
 8005430:	a30b      	add	r3, pc, #44	; (adr r3, 8005460 <scalbn+0xd8>)
 8005432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005436:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800543a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800543e:	480f      	ldr	r0, [pc, #60]	; (800547c <scalbn+0xf4>)
 8005440:	f041 011f 	orr.w	r1, r1, #31
 8005444:	e7b8      	b.n	80053b8 <scalbn+0x30>
 8005446:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800544a:	3136      	adds	r1, #54	; 0x36
 800544c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005450:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8005454:	4620      	mov	r0, r4
 8005456:	4629      	mov	r1, r5
 8005458:	2200      	movs	r2, #0
 800545a:	4b09      	ldr	r3, [pc, #36]	; (8005480 <scalbn+0xf8>)
 800545c:	e7ac      	b.n	80053b8 <scalbn+0x30>
 800545e:	bf00      	nop
 8005460:	c2f8f359 	.word	0xc2f8f359
 8005464:	01a56e1f 	.word	0x01a56e1f
 8005468:	8800759c 	.word	0x8800759c
 800546c:	7e37e43c 	.word	0x7e37e43c
 8005470:	43500000 	.word	0x43500000
 8005474:	ffff3cb0 	.word	0xffff3cb0
 8005478:	8800759c 	.word	0x8800759c
 800547c:	c2f8f359 	.word	0xc2f8f359
 8005480:	3c900000 	.word	0x3c900000

08005484 <_init>:
 8005484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005486:	bf00      	nop
 8005488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800548a:	bc08      	pop	{r3}
 800548c:	469e      	mov	lr, r3
 800548e:	4770      	bx	lr

08005490 <_fini>:
 8005490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005492:	bf00      	nop
 8005494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005496:	bc08      	pop	{r3}
 8005498:	469e      	mov	lr, r3
 800549a:	4770      	bx	lr
